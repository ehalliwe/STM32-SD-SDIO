
4wire.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009808  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000848  080099d8  080099d8  0000a9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a220  0800a220  0000c05c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a220  0800a220  0000b220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a228  0800a228  0000c05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a228  0800a228  0000b228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a22c  0800a22c  0000b22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800a230  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  2000005c  0800a28c  0000c05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005cc  0800a28c  0000c5cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd6a  00000000  00000000  0000c08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f8  00000000  00000000  0001bdf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  0001e4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a79  00000000  00000000  0001f2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ae5  00000000  00000000  0001fd21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013671  00000000  00000000  00043806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf723  00000000  00000000  00056e77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012659a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dd0  00000000  00000000  001265e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0012a3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080099c0 	.word	0x080099c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080099c0 	.word	0x080099c0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	@ 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80008e0:	f000 b96a 	b.w	8000bb8 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	460c      	mov	r4, r1
 8000904:	2b00      	cmp	r3, #0
 8000906:	d14e      	bne.n	80009a6 <__udivmoddi4+0xaa>
 8000908:	4694      	mov	ip, r2
 800090a:	458c      	cmp	ip, r1
 800090c:	4686      	mov	lr, r0
 800090e:	fab2 f282 	clz	r2, r2
 8000912:	d962      	bls.n	80009da <__udivmoddi4+0xde>
 8000914:	b14a      	cbz	r2, 800092a <__udivmoddi4+0x2e>
 8000916:	f1c2 0320 	rsb	r3, r2, #32
 800091a:	4091      	lsls	r1, r2
 800091c:	fa20 f303 	lsr.w	r3, r0, r3
 8000920:	fa0c fc02 	lsl.w	ip, ip, r2
 8000924:	4319      	orrs	r1, r3
 8000926:	fa00 fe02 	lsl.w	lr, r0, r2
 800092a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800092e:	fa1f f68c 	uxth.w	r6, ip
 8000932:	fbb1 f4f7 	udiv	r4, r1, r7
 8000936:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800093a:	fb07 1114 	mls	r1, r7, r4, r1
 800093e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000942:	fb04 f106 	mul.w	r1, r4, r6
 8000946:	4299      	cmp	r1, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x64>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000952:	f080 8112 	bcs.w	8000b7a <__udivmoddi4+0x27e>
 8000956:	4299      	cmp	r1, r3
 8000958:	f240 810f 	bls.w	8000b7a <__udivmoddi4+0x27e>
 800095c:	3c02      	subs	r4, #2
 800095e:	4463      	add	r3, ip
 8000960:	1a59      	subs	r1, r3, r1
 8000962:	fa1f f38e 	uxth.w	r3, lr
 8000966:	fbb1 f0f7 	udiv	r0, r1, r7
 800096a:	fb07 1110 	mls	r1, r7, r0, r1
 800096e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000972:	fb00 f606 	mul.w	r6, r0, r6
 8000976:	429e      	cmp	r6, r3
 8000978:	d90a      	bls.n	8000990 <__udivmoddi4+0x94>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000982:	f080 80fc 	bcs.w	8000b7e <__udivmoddi4+0x282>
 8000986:	429e      	cmp	r6, r3
 8000988:	f240 80f9 	bls.w	8000b7e <__udivmoddi4+0x282>
 800098c:	4463      	add	r3, ip
 800098e:	3802      	subs	r0, #2
 8000990:	1b9b      	subs	r3, r3, r6
 8000992:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000996:	2100      	movs	r1, #0
 8000998:	b11d      	cbz	r5, 80009a2 <__udivmoddi4+0xa6>
 800099a:	40d3      	lsrs	r3, r2
 800099c:	2200      	movs	r2, #0
 800099e:	e9c5 3200 	strd	r3, r2, [r5]
 80009a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d905      	bls.n	80009b6 <__udivmoddi4+0xba>
 80009aa:	b10d      	cbz	r5, 80009b0 <__udivmoddi4+0xb4>
 80009ac:	e9c5 0100 	strd	r0, r1, [r5]
 80009b0:	2100      	movs	r1, #0
 80009b2:	4608      	mov	r0, r1
 80009b4:	e7f5      	b.n	80009a2 <__udivmoddi4+0xa6>
 80009b6:	fab3 f183 	clz	r1, r3
 80009ba:	2900      	cmp	r1, #0
 80009bc:	d146      	bne.n	8000a4c <__udivmoddi4+0x150>
 80009be:	42a3      	cmp	r3, r4
 80009c0:	d302      	bcc.n	80009c8 <__udivmoddi4+0xcc>
 80009c2:	4290      	cmp	r0, r2
 80009c4:	f0c0 80f0 	bcc.w	8000ba8 <__udivmoddi4+0x2ac>
 80009c8:	1a86      	subs	r6, r0, r2
 80009ca:	eb64 0303 	sbc.w	r3, r4, r3
 80009ce:	2001      	movs	r0, #1
 80009d0:	2d00      	cmp	r5, #0
 80009d2:	d0e6      	beq.n	80009a2 <__udivmoddi4+0xa6>
 80009d4:	e9c5 6300 	strd	r6, r3, [r5]
 80009d8:	e7e3      	b.n	80009a2 <__udivmoddi4+0xa6>
 80009da:	2a00      	cmp	r2, #0
 80009dc:	f040 8090 	bne.w	8000b00 <__udivmoddi4+0x204>
 80009e0:	eba1 040c 	sub.w	r4, r1, ip
 80009e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e8:	fa1f f78c 	uxth.w	r7, ip
 80009ec:	2101      	movs	r1, #1
 80009ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80009f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009f6:	fb08 4416 	mls	r4, r8, r6, r4
 80009fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009fe:	fb07 f006 	mul.w	r0, r7, r6
 8000a02:	4298      	cmp	r0, r3
 8000a04:	d908      	bls.n	8000a18 <__udivmoddi4+0x11c>
 8000a06:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000a0e:	d202      	bcs.n	8000a16 <__udivmoddi4+0x11a>
 8000a10:	4298      	cmp	r0, r3
 8000a12:	f200 80cd 	bhi.w	8000bb0 <__udivmoddi4+0x2b4>
 8000a16:	4626      	mov	r6, r4
 8000a18:	1a1c      	subs	r4, r3, r0
 8000a1a:	fa1f f38e 	uxth.w	r3, lr
 8000a1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a22:	fb08 4410 	mls	r4, r8, r0, r4
 8000a26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a2a:	fb00 f707 	mul.w	r7, r0, r7
 8000a2e:	429f      	cmp	r7, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x148>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000a3a:	d202      	bcs.n	8000a42 <__udivmoddi4+0x146>
 8000a3c:	429f      	cmp	r7, r3
 8000a3e:	f200 80b0 	bhi.w	8000ba2 <__udivmoddi4+0x2a6>
 8000a42:	4620      	mov	r0, r4
 8000a44:	1bdb      	subs	r3, r3, r7
 8000a46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a4a:	e7a5      	b.n	8000998 <__udivmoddi4+0x9c>
 8000a4c:	f1c1 0620 	rsb	r6, r1, #32
 8000a50:	408b      	lsls	r3, r1
 8000a52:	fa22 f706 	lsr.w	r7, r2, r6
 8000a56:	431f      	orrs	r7, r3
 8000a58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a60:	ea43 030c 	orr.w	r3, r3, ip
 8000a64:	40f4      	lsrs	r4, r6
 8000a66:	fa00 f801 	lsl.w	r8, r0, r1
 8000a6a:	0c38      	lsrs	r0, r7, #16
 8000a6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a70:	fbb4 fef0 	udiv	lr, r4, r0
 8000a74:	fa1f fc87 	uxth.w	ip, r7
 8000a78:	fb00 441e 	mls	r4, r0, lr, r4
 8000a7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a80:	fb0e f90c 	mul.w	r9, lr, ip
 8000a84:	45a1      	cmp	r9, r4
 8000a86:	fa02 f201 	lsl.w	r2, r2, r1
 8000a8a:	d90a      	bls.n	8000aa2 <__udivmoddi4+0x1a6>
 8000a8c:	193c      	adds	r4, r7, r4
 8000a8e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000a92:	f080 8084 	bcs.w	8000b9e <__udivmoddi4+0x2a2>
 8000a96:	45a1      	cmp	r9, r4
 8000a98:	f240 8081 	bls.w	8000b9e <__udivmoddi4+0x2a2>
 8000a9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000aa0:	443c      	add	r4, r7
 8000aa2:	eba4 0409 	sub.w	r4, r4, r9
 8000aa6:	fa1f f983 	uxth.w	r9, r3
 8000aaa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000aae:	fb00 4413 	mls	r4, r0, r3, r4
 8000ab2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ab6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aba:	45a4      	cmp	ip, r4
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x1d2>
 8000abe:	193c      	adds	r4, r7, r4
 8000ac0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ac4:	d267      	bcs.n	8000b96 <__udivmoddi4+0x29a>
 8000ac6:	45a4      	cmp	ip, r4
 8000ac8:	d965      	bls.n	8000b96 <__udivmoddi4+0x29a>
 8000aca:	3b02      	subs	r3, #2
 8000acc:	443c      	add	r4, r7
 8000ace:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ad2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ad6:	eba4 040c 	sub.w	r4, r4, ip
 8000ada:	429c      	cmp	r4, r3
 8000adc:	46ce      	mov	lr, r9
 8000ade:	469c      	mov	ip, r3
 8000ae0:	d351      	bcc.n	8000b86 <__udivmoddi4+0x28a>
 8000ae2:	d04e      	beq.n	8000b82 <__udivmoddi4+0x286>
 8000ae4:	b155      	cbz	r5, 8000afc <__udivmoddi4+0x200>
 8000ae6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aea:	eb64 040c 	sbc.w	r4, r4, ip
 8000aee:	fa04 f606 	lsl.w	r6, r4, r6
 8000af2:	40cb      	lsrs	r3, r1
 8000af4:	431e      	orrs	r6, r3
 8000af6:	40cc      	lsrs	r4, r1
 8000af8:	e9c5 6400 	strd	r6, r4, [r5]
 8000afc:	2100      	movs	r1, #0
 8000afe:	e750      	b.n	80009a2 <__udivmoddi4+0xa6>
 8000b00:	f1c2 0320 	rsb	r3, r2, #32
 8000b04:	fa20 f103 	lsr.w	r1, r0, r3
 8000b08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b10:	4094      	lsls	r4, r2
 8000b12:	430c      	orrs	r4, r1
 8000b14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1c:	fa1f f78c 	uxth.w	r7, ip
 8000b20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b24:	fb08 3110 	mls	r1, r8, r0, r3
 8000b28:	0c23      	lsrs	r3, r4, #16
 8000b2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b2e:	fb00 f107 	mul.w	r1, r0, r7
 8000b32:	4299      	cmp	r1, r3
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x24c>
 8000b36:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000b3e:	d22c      	bcs.n	8000b9a <__udivmoddi4+0x29e>
 8000b40:	4299      	cmp	r1, r3
 8000b42:	d92a      	bls.n	8000b9a <__udivmoddi4+0x29e>
 8000b44:	3802      	subs	r0, #2
 8000b46:	4463      	add	r3, ip
 8000b48:	1a5b      	subs	r3, r3, r1
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b50:	fb08 3311 	mls	r3, r8, r1, r3
 8000b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b58:	fb01 f307 	mul.w	r3, r1, r7
 8000b5c:	42a3      	cmp	r3, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x276>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b68:	d213      	bcs.n	8000b92 <__udivmoddi4+0x296>
 8000b6a:	42a3      	cmp	r3, r4
 8000b6c:	d911      	bls.n	8000b92 <__udivmoddi4+0x296>
 8000b6e:	3902      	subs	r1, #2
 8000b70:	4464      	add	r4, ip
 8000b72:	1ae4      	subs	r4, r4, r3
 8000b74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b78:	e739      	b.n	80009ee <__udivmoddi4+0xf2>
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	e6f0      	b.n	8000960 <__udivmoddi4+0x64>
 8000b7e:	4608      	mov	r0, r1
 8000b80:	e706      	b.n	8000990 <__udivmoddi4+0x94>
 8000b82:	45c8      	cmp	r8, r9
 8000b84:	d2ae      	bcs.n	8000ae4 <__udivmoddi4+0x1e8>
 8000b86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b8e:	3801      	subs	r0, #1
 8000b90:	e7a8      	b.n	8000ae4 <__udivmoddi4+0x1e8>
 8000b92:	4631      	mov	r1, r6
 8000b94:	e7ed      	b.n	8000b72 <__udivmoddi4+0x276>
 8000b96:	4603      	mov	r3, r0
 8000b98:	e799      	b.n	8000ace <__udivmoddi4+0x1d2>
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	e7d4      	b.n	8000b48 <__udivmoddi4+0x24c>
 8000b9e:	46d6      	mov	lr, sl
 8000ba0:	e77f      	b.n	8000aa2 <__udivmoddi4+0x1a6>
 8000ba2:	4463      	add	r3, ip
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	e74d      	b.n	8000a44 <__udivmoddi4+0x148>
 8000ba8:	4606      	mov	r6, r0
 8000baa:	4623      	mov	r3, r4
 8000bac:	4608      	mov	r0, r1
 8000bae:	e70f      	b.n	80009d0 <__udivmoddi4+0xd4>
 8000bb0:	3e02      	subs	r6, #2
 8000bb2:	4463      	add	r3, ip
 8000bb4:	e730      	b.n	8000a18 <__udivmoddi4+0x11c>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_idiv0>:
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <UART_Print>:
static void MX_USART2_UART_Init(void);
static void MX_SDIO_SD_Init(void);
/* USER CODE BEGIN PFP */
static void SDIO_SDCard_Test(void);
static void UART_Print(char* str)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) str, strlen(str), 100);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff fb23 	bl	8000210 <strlen>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	2364      	movs	r3, #100	@ 0x64
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	4803      	ldr	r0, [pc, #12]	@ (8000be0 <UART_Print+0x24>)
 8000bd4:	f003 fb43 	bl	800425e <HAL_UART_Transmit>
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200000fc 	.word	0x200000fc

08000be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be8:	f000 fd22 	bl	8001630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bec:	f000 f812 	bl	8000c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf0:	f000 f8c8 	bl	8000d84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bf4:	f000 f89c 	bl	8000d30 <MX_USART2_UART_Init>
  MX_SDIO_SD_Init();
 8000bf8:	f000 f878 	bl	8000cec <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000bfc:	f004 fc5e 	bl	80054bc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  SDIO_SDCard_Test();
 8000c00:	f000 f93c 	bl	8000e7c <SDIO_SDCard_Test>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8000c04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c08:	f000 fd84 	bl	8001714 <HAL_Delay>
	  SDIO_SDCard_Test();
 8000c0c:	f000 f936 	bl	8000e7c <SDIO_SDCard_Test>
	  HAL_Delay(1000);
 8000c10:	bf00      	nop
 8000c12:	e7f7      	b.n	8000c04 <main+0x20>

08000c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b094      	sub	sp, #80	@ 0x50
 8000c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	2234      	movs	r2, #52	@ 0x34
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f008 fa4c 	bl	80090c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	4b29      	ldr	r3, [pc, #164]	@ (8000ce4 <SystemClock_Config+0xd0>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c40:	4a28      	ldr	r2, [pc, #160]	@ (8000ce4 <SystemClock_Config+0xd0>)
 8000c42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c46:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c48:	4b26      	ldr	r3, [pc, #152]	@ (8000ce4 <SystemClock_Config+0xd0>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c54:	2300      	movs	r3, #0
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	4b23      	ldr	r3, [pc, #140]	@ (8000ce8 <SystemClock_Config+0xd4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c60:	4a21      	ldr	r2, [pc, #132]	@ (8000ce8 <SystemClock_Config+0xd4>)
 8000c62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce8 <SystemClock_Config+0xd4>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c74:	2301      	movs	r3, #1
 8000c76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c7c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c82:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c86:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c88:	2304      	movs	r3, #4
 8000c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000c8c:	2332      	movs	r3, #50	@ 0x32
 8000c8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c90:	2302      	movs	r3, #2
 8000c92:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000c94:	230f      	movs	r3, #15
 8000c96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f001 fe63 	bl	800296c <HAL_RCC_OscConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000cac:	f000 fb02 	bl	80012b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	2101      	movs	r1, #1
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 ffd9 	bl	8001c84 <HAL_RCC_ClockConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000cd8:	f000 faec 	bl	80012b4 <Error_Handler>
  }
}
 8000cdc:	bf00      	nop
 8000cde:	3750      	adds	r7, #80	@ 0x50
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40007000 	.word	0x40007000

08000cec <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8000d28 <MX_SDIO_SD_Init+0x3c>)
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	@ (8000d2c <MX_SDIO_SD_Init+0x40>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <MX_SDIO_SD_Init+0x3c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <MX_SDIO_SD_Init+0x3c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000d02:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <MX_SDIO_SD_Init+0x3c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000d08:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <MX_SDIO_SD_Init+0x3c>)
 8000d0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d0e:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d10:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <MX_SDIO_SD_Init+0x3c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000d16:	4b04      	ldr	r3, [pc, #16]	@ (8000d28 <MX_SDIO_SD_Init+0x3c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000078 	.word	0x20000078
 8000d2c:	40012c00 	.word	0x40012c00

08000d30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d34:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	@ (8000d80 <MX_USART2_UART_Init+0x50>)
 8000d38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d3a:	4b10      	ldr	r3, [pc, #64]	@ (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d54:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d56:	220c      	movs	r2, #12
 8000d58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d66:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d68:	f003 fa29 	bl	80041be <HAL_UART_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d72:	f000 fa9f 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200000fc 	.word	0x200000fc
 8000d80:	40004400 	.word	0x40004400

08000d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	@ 0x28
 8000d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b34      	ldr	r3, [pc, #208]	@ (8000e70 <MX_GPIO_Init+0xec>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	4a33      	ldr	r2, [pc, #204]	@ (8000e70 <MX_GPIO_Init+0xec>)
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000daa:	4b31      	ldr	r3, [pc, #196]	@ (8000e70 <MX_GPIO_Init+0xec>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b2d      	ldr	r3, [pc, #180]	@ (8000e70 <MX_GPIO_Init+0xec>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a2c      	ldr	r2, [pc, #176]	@ (8000e70 <MX_GPIO_Init+0xec>)
 8000dc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e70 <MX_GPIO_Init+0xec>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	4b26      	ldr	r3, [pc, #152]	@ (8000e70 <MX_GPIO_Init+0xec>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a25      	ldr	r2, [pc, #148]	@ (8000e70 <MX_GPIO_Init+0xec>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b23      	ldr	r3, [pc, #140]	@ (8000e70 <MX_GPIO_Init+0xec>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e70 <MX_GPIO_Init+0xec>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	4a1e      	ldr	r2, [pc, #120]	@ (8000e70 <MX_GPIO_Init+0xec>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e70 <MX_GPIO_Init+0xec>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <MX_GPIO_Init+0xec>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a17      	ldr	r2, [pc, #92]	@ (8000e70 <MX_GPIO_Init+0xec>)
 8000e14:	f043 0308 	orr.w	r3, r3, #8
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <MX_GPIO_Init+0xec>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f003 0308 	and.w	r3, r3, #8
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2120      	movs	r1, #32
 8000e2a:	4812      	ldr	r0, [pc, #72]	@ (8000e74 <MX_GPIO_Init+0xf0>)
 8000e2c:	f000 ff10 	bl	8001c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e36:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	480c      	ldr	r0, [pc, #48]	@ (8000e78 <MX_GPIO_Init+0xf4>)
 8000e48:	f000 fd6e 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e4c:	2320      	movs	r3, #32
 8000e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	4804      	ldr	r0, [pc, #16]	@ (8000e74 <MX_GPIO_Init+0xf0>)
 8000e64:	f000 fd60 	bl	8001928 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e68:	bf00      	nop
 8000e6a:	3728      	adds	r7, #40	@ 0x28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020000 	.word	0x40020000
 8000e78:	40020800 	.word	0x40020800

08000e7c <SDIO_SDCard_Test>:

/* USER CODE BEGIN 4 */
static void SDIO_SDCard_Test(void)
{
 8000e7c:	b5b0      	push	{r4, r5, r7, lr}
 8000e7e:	f5ad 5d05 	sub.w	sp, sp, #8512	@ 0x2140
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
  uint32_t TotalSize, FreeSpace;
  char RW_Buffer[200];
  do
  {
    //------------------[ Mount The SD Card ]--------------------
    FR_Status = f_mount(&FatFs, SDPath, 1);
 8000e86:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 8000e8a:	f103 0310 	add.w	r3, r3, #16
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	2201      	movs	r2, #1
 8000e92:	49b4      	ldr	r1, [pc, #720]	@ (8001164 <SDIO_SDCard_Test+0x2e8>)
 8000e94:	4618      	mov	r0, r3
 8000e96:	f006 fe75 	bl	8007b84 <f_mount>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000ea0:	f102 020f 	add.w	r2, r2, #15
 8000ea4:	7013      	strb	r3, [r2, #0]
    if (FR_Status != FR_OK)
 8000ea6:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000eaa:	f103 030f 	add.w	r3, r3, #15
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d00d      	beq.n	8000ed0 <SDIO_SDCard_Test+0x54>
    {
      sprintf(TxBuffer, "Error! While Mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 8000eb4:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000eb8:	f103 030f 	add.w	r3, r3, #15
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	49a9      	ldr	r1, [pc, #676]	@ (8001168 <SDIO_SDCard_Test+0x2ec>)
 8000ec2:	48aa      	ldr	r0, [pc, #680]	@ (800116c <SDIO_SDCard_Test+0x2f0>)
 8000ec4:	f008 f8dc 	bl	8009080 <siprintf>
      UART_Print(TxBuffer);
 8000ec8:	48a8      	ldr	r0, [pc, #672]	@ (800116c <SDIO_SDCard_Test+0x2f0>)
 8000eca:	f7ff fe77 	bl	8000bbc <UART_Print>
      break;
 8000ece:	e1b6      	b.n	800123e <SDIO_SDCard_Test+0x3c2>
    }
    sprintf(TxBuffer, "SD Card Mounted Successfully! \r\n\n");
 8000ed0:	49a7      	ldr	r1, [pc, #668]	@ (8001170 <SDIO_SDCard_Test+0x2f4>)
 8000ed2:	48a6      	ldr	r0, [pc, #664]	@ (800116c <SDIO_SDCard_Test+0x2f0>)
 8000ed4:	f008 f8d4 	bl	8009080 <siprintf>
    UART_Print(TxBuffer);
 8000ed8:	48a4      	ldr	r0, [pc, #656]	@ (800116c <SDIO_SDCard_Test+0x2f0>)
 8000eda:	f7ff fe6f 	bl	8000bbc <UART_Print>
    //------------------[ Get & Print The SD Card Size & Free Space ]--------------------
    f_getfree("", &FreeClusters, &FS_Ptr);
 8000ede:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000ee2:	3a38      	subs	r2, #56	@ 0x38
 8000ee4:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000ee8:	3b04      	subs	r3, #4
 8000eea:	4619      	mov	r1, r3
 8000eec:	48a1      	ldr	r0, [pc, #644]	@ (8001174 <SDIO_SDCard_Test+0x2f8>)
 8000eee:	f007 fe16 	bl	8008b1e <f_getfree>
    TotalSize = (uint32_t)((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
 8000ef2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000ef6:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8000efa:	69db      	ldr	r3, [r3, #28]
 8000efc:	3b02      	subs	r3, #2
 8000efe:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8000f02:	f852 2c78 	ldr.w	r2, [r2, #-120]
 8000f06:	8952      	ldrh	r2, [r2, #10]
 8000f08:	fb02 f303 	mul.w	r3, r2, r3
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fc43 	bl	8000798 <__aeabi_ui2d>
 8000f12:	f04f 0200 	mov.w	r2, #0
 8000f16:	4b98      	ldr	r3, [pc, #608]	@ (8001178 <SDIO_SDCard_Test+0x2fc>)
 8000f18:	f7ff f9d2 	bl	80002c0 <__aeabi_dmul>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	f7ff fcb2 	bl	800088c <__aeabi_d2uiz>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000f2e:	f102 0208 	add.w	r2, r2, #8
 8000f32:	6013      	str	r3, [r2, #0]
    FreeSpace = (uint32_t)(FreeClusters * FS_Ptr->csize * 0.5);
 8000f34:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000f38:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8000f3c:	895b      	ldrh	r3, [r3, #10]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000f44:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8000f48:	fb02 f303 	mul.w	r3, r2, r3
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fc23 	bl	8000798 <__aeabi_ui2d>
 8000f52:	f04f 0200 	mov.w	r2, #0
 8000f56:	4b88      	ldr	r3, [pc, #544]	@ (8001178 <SDIO_SDCard_Test+0x2fc>)
 8000f58:	f7ff f9b2 	bl	80002c0 <__aeabi_dmul>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	f7ff fc92 	bl	800088c <__aeabi_d2uiz>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000f6e:	f102 0204 	add.w	r2, r2, #4
 8000f72:	6013      	str	r3, [r2, #0]
    sprintf(TxBuffer, "Total SD Card Size: %lu Bytes\r\n", TotalSize);
 8000f74:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000f78:	f103 0308 	add.w	r3, r3, #8
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	497f      	ldr	r1, [pc, #508]	@ (800117c <SDIO_SDCard_Test+0x300>)
 8000f80:	487a      	ldr	r0, [pc, #488]	@ (800116c <SDIO_SDCard_Test+0x2f0>)
 8000f82:	f008 f87d 	bl	8009080 <siprintf>
    UART_Print(TxBuffer);
 8000f86:	4879      	ldr	r0, [pc, #484]	@ (800116c <SDIO_SDCard_Test+0x2f0>)
 8000f88:	f7ff fe18 	bl	8000bbc <UART_Print>
    sprintf(TxBuffer, "Free SD Card Space: %lu Bytes\r\n\n", FreeSpace);
 8000f8c:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000f90:	f103 0304 	add.w	r3, r3, #4
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	497a      	ldr	r1, [pc, #488]	@ (8001180 <SDIO_SDCard_Test+0x304>)
 8000f98:	4874      	ldr	r0, [pc, #464]	@ (800116c <SDIO_SDCard_Test+0x2f0>)
 8000f9a:	f008 f871 	bl	8009080 <siprintf>
    UART_Print(TxBuffer);
 8000f9e:	4873      	ldr	r0, [pc, #460]	@ (800116c <SDIO_SDCard_Test+0x2f0>)
 8000fa0:	f7ff fe0c 	bl	8000bbc <UART_Print>
    //------------------[ Open A Text File For Write & Write Data ]--------------------
    //Open the file
    FR_Status = f_open(&Fil, "My4SDIOFile.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8000fa4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fa8:	3b34      	subs	r3, #52	@ 0x34
 8000faa:	220b      	movs	r2, #11
 8000fac:	4975      	ldr	r1, [pc, #468]	@ (8001184 <SDIO_SDCard_Test+0x308>)
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f006 fe2e 	bl	8007c10 <f_open>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 8000fba:	f102 020f 	add.w	r2, r2, #15
 8000fbe:	7013      	strb	r3, [r2, #0]
    if(FR_Status != FR_OK)
 8000fc0:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000fc4:	f103 030f 	add.w	r3, r3, #15
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00d      	beq.n	8000fea <SDIO_SDCard_Test+0x16e>
    {
      sprintf(TxBuffer, "Error! While Creating/Opening A New Text File, Error Code: (%i)\r\n", FR_Status);
 8000fce:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8000fd2:	f103 030f 	add.w	r3, r3, #15
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	496b      	ldr	r1, [pc, #428]	@ (8001188 <SDIO_SDCard_Test+0x30c>)
 8000fdc:	4863      	ldr	r0, [pc, #396]	@ (800116c <SDIO_SDCard_Test+0x2f0>)
 8000fde:	f008 f84f 	bl	8009080 <siprintf>
      UART_Print(TxBuffer);
 8000fe2:	4862      	ldr	r0, [pc, #392]	@ (800116c <SDIO_SDCard_Test+0x2f0>)
 8000fe4:	f7ff fdea 	bl	8000bbc <UART_Print>
      break;
 8000fe8:	e129      	b.n	800123e <SDIO_SDCard_Test+0x3c2>
    }
    sprintf(TxBuffer, "Text File Created & Opened! Writing Data To The Text File..\r\n\n");
 8000fea:	4968      	ldr	r1, [pc, #416]	@ (800118c <SDIO_SDCard_Test+0x310>)
 8000fec:	485f      	ldr	r0, [pc, #380]	@ (800116c <SDIO_SDCard_Test+0x2f0>)
 8000fee:	f008 f847 	bl	8009080 <siprintf>
    UART_Print(TxBuffer);
 8000ff2:	485e      	ldr	r0, [pc, #376]	@ (800116c <SDIO_SDCard_Test+0x2f0>)
 8000ff4:	f7ff fde2 	bl	8000bbc <UART_Print>
    // (1) Write Data To The Text File [ Using f_puts() Function ]
    f_puts("Hello! From STM32 To SD Card Over SDIO, Using f_puts()\n", &Fil);
 8000ff8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ffc:	3b34      	subs	r3, #52	@ 0x34
 8000ffe:	4619      	mov	r1, r3
 8001000:	4863      	ldr	r0, [pc, #396]	@ (8001190 <SDIO_SDCard_Test+0x314>)
 8001002:	f007 fef6 	bl	8008df2 <f_puts>
    // (2) Write Data To The Text File [ Using f_write() Function ]
    strcpy(RW_Buffer, "Hello! From STM32 To SD Card Over SDIO, Using f_write()\r\n");
 8001006:	f107 0310 	add.w	r3, r7, #16
 800100a:	3b0c      	subs	r3, #12
 800100c:	4a61      	ldr	r2, [pc, #388]	@ (8001194 <SDIO_SDCard_Test+0x318>)
 800100e:	461c      	mov	r4, r3
 8001010:	4615      	mov	r5, r2
 8001012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001018:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800101a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800101c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800101e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001022:	c403      	stmia	r4!, {r0, r1}
 8001024:	8022      	strh	r2, [r4, #0]
    f_write(&Fil, RW_Buffer, strlen(RW_Buffer), &WWC);
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	3b0c      	subs	r3, #12
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff f8ef 	bl	8000210 <strlen>
 8001032:	4602      	mov	r2, r0
 8001034:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001038:	f107 0110 	add.w	r1, r7, #16
 800103c:	390c      	subs	r1, #12
 800103e:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8001042:	3834      	subs	r0, #52	@ 0x34
 8001044:	f007 f90b 	bl	800825e <f_write>
    // Close The File
    f_close(&Fil);
 8001048:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800104c:	3b34      	subs	r3, #52	@ 0x34
 800104e:	4618      	mov	r0, r3
 8001050:	f007 fb17 	bl	8008682 <f_close>
    //------------------[ Open A Text File For Read & Read Its Data ]--------------------
    // Open The File
    FR_Status = f_open(&Fil, "My4SDIOFile.txt", FA_READ);
 8001054:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001058:	3b34      	subs	r3, #52	@ 0x34
 800105a:	2201      	movs	r2, #1
 800105c:	4949      	ldr	r1, [pc, #292]	@ (8001184 <SDIO_SDCard_Test+0x308>)
 800105e:	4618      	mov	r0, r3
 8001060:	f006 fdd6 	bl	8007c10 <f_open>
 8001064:	4603      	mov	r3, r0
 8001066:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 800106a:	f102 020f 	add.w	r2, r2, #15
 800106e:	7013      	strb	r3, [r2, #0]
    if(FR_Status != FR_OK)
 8001070:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8001074:	f103 030f 	add.w	r3, r3, #15
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d007      	beq.n	800108e <SDIO_SDCard_Test+0x212>
    {
      sprintf(TxBuffer, "Error! While Opening (My4SDIOFile.txt) File For Read.. \r\n");
 800107e:	4946      	ldr	r1, [pc, #280]	@ (8001198 <SDIO_SDCard_Test+0x31c>)
 8001080:	483a      	ldr	r0, [pc, #232]	@ (800116c <SDIO_SDCard_Test+0x2f0>)
 8001082:	f007 fffd 	bl	8009080 <siprintf>
      UART_Print(TxBuffer);
 8001086:	4839      	ldr	r0, [pc, #228]	@ (800116c <SDIO_SDCard_Test+0x2f0>)
 8001088:	f7ff fd98 	bl	8000bbc <UART_Print>
      break;
 800108c:	e0d7      	b.n	800123e <SDIO_SDCard_Test+0x3c2>
    }
    // (1) Read The Text File's Data [ Using f_gets() Function ]
    f_gets(RW_Buffer, sizeof(RW_Buffer), &Fil);
 800108e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001092:	3a34      	subs	r2, #52	@ 0x34
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	3b0c      	subs	r3, #12
 800109a:	21c8      	movs	r1, #200	@ 0xc8
 800109c:	4618      	mov	r0, r3
 800109e:	f007 fdf3 	bl	8008c88 <f_gets>
    sprintf(TxBuffer, "Data Read From (My4SDIOFile.txt) Using f_gets():%s", RW_Buffer);
 80010a2:	f107 0310 	add.w	r3, r7, #16
 80010a6:	3b0c      	subs	r3, #12
 80010a8:	461a      	mov	r2, r3
 80010aa:	493c      	ldr	r1, [pc, #240]	@ (800119c <SDIO_SDCard_Test+0x320>)
 80010ac:	482f      	ldr	r0, [pc, #188]	@ (800116c <SDIO_SDCard_Test+0x2f0>)
 80010ae:	f007 ffe7 	bl	8009080 <siprintf>
    UART_Print(TxBuffer);
 80010b2:	482e      	ldr	r0, [pc, #184]	@ (800116c <SDIO_SDCard_Test+0x2f0>)
 80010b4:	f7ff fd82 	bl	8000bbc <UART_Print>
    // (2) Read The Text File's Data [ Using f_read() Function ]
    f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 80010b8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80010bc:	f853 2c68 	ldr.w	r2, [r3, #-104]
 80010c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010c4:	3b3c      	subs	r3, #60	@ 0x3c
 80010c6:	f107 0110 	add.w	r1, r7, #16
 80010ca:	390c      	subs	r1, #12
 80010cc:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80010d0:	3834      	subs	r0, #52	@ 0x34
 80010d2:	f006 ff65 	bl	8007fa0 <f_read>
    sprintf(TxBuffer, "Data Read From (My4SDIOFile.txt) Using f_read():%s", RW_Buffer);
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	3b0c      	subs	r3, #12
 80010dc:	461a      	mov	r2, r3
 80010de:	4930      	ldr	r1, [pc, #192]	@ (80011a0 <SDIO_SDCard_Test+0x324>)
 80010e0:	4822      	ldr	r0, [pc, #136]	@ (800116c <SDIO_SDCard_Test+0x2f0>)
 80010e2:	f007 ffcd 	bl	8009080 <siprintf>
    UART_Print(TxBuffer);
 80010e6:	4821      	ldr	r0, [pc, #132]	@ (800116c <SDIO_SDCard_Test+0x2f0>)
 80010e8:	f7ff fd68 	bl	8000bbc <UART_Print>
    // Close The File
    f_close(&Fil);
 80010ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010f0:	3b34      	subs	r3, #52	@ 0x34
 80010f2:	4618      	mov	r0, r3
 80010f4:	f007 fac5 	bl	8008682 <f_close>
    sprintf(TxBuffer, "File Closed! \r\n\n");
 80010f8:	492a      	ldr	r1, [pc, #168]	@ (80011a4 <SDIO_SDCard_Test+0x328>)
 80010fa:	481c      	ldr	r0, [pc, #112]	@ (800116c <SDIO_SDCard_Test+0x2f0>)
 80010fc:	f007 ffc0 	bl	8009080 <siprintf>
    UART_Print(TxBuffer);
 8001100:	481a      	ldr	r0, [pc, #104]	@ (800116c <SDIO_SDCard_Test+0x2f0>)
 8001102:	f7ff fd5b 	bl	8000bbc <UART_Print>
    //------------------[ Open An Existing Text File, Update Its Content, Read It Back ]--------------------
    // (1) Open The Existing File For Write (Update)
    FR_Status = f_open(&Fil, "My4SDIOFile.txt", FA_OPEN_EXISTING | FA_WRITE);
 8001106:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800110a:	3b34      	subs	r3, #52	@ 0x34
 800110c:	2202      	movs	r2, #2
 800110e:	491d      	ldr	r1, [pc, #116]	@ (8001184 <SDIO_SDCard_Test+0x308>)
 8001110:	4618      	mov	r0, r3
 8001112:	f006 fd7d 	bl	8007c10 <f_open>
 8001116:	4603      	mov	r3, r0
 8001118:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 800111c:	f102 020f 	add.w	r2, r2, #15
 8001120:	7013      	strb	r3, [r2, #0]
    FR_Status = f_lseek(&Fil, f_size(&Fil)); // Move The File Pointer To The EOF (End-Of-File)
 8001122:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001126:	f853 2c68 	ldr.w	r2, [r3, #-104]
 800112a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800112e:	3b34      	subs	r3, #52	@ 0x34
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f007 facf 	bl	80086d6 <f_lseek>
 8001138:	4603      	mov	r3, r0
 800113a:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 800113e:	f102 020f 	add.w	r2, r2, #15
 8001142:	7013      	strb	r3, [r2, #0]
    if(FR_Status != FR_OK)
 8001144:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8001148:	f103 030f 	add.w	r3, r3, #15
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d02c      	beq.n	80011ac <SDIO_SDCard_Test+0x330>
    {
      sprintf(TxBuffer, "Error! While Opening (My4SDIOFile.txt) File For Update.. \r\n");
 8001152:	4915      	ldr	r1, [pc, #84]	@ (80011a8 <SDIO_SDCard_Test+0x32c>)
 8001154:	4805      	ldr	r0, [pc, #20]	@ (800116c <SDIO_SDCard_Test+0x2f0>)
 8001156:	f007 ff93 	bl	8009080 <siprintf>
      UART_Print(TxBuffer);
 800115a:	4804      	ldr	r0, [pc, #16]	@ (800116c <SDIO_SDCard_Test+0x2f0>)
 800115c:	f7ff fd2e 	bl	8000bbc <UART_Print>
      break;
 8001160:	e06d      	b.n	800123e <SDIO_SDCard_Test+0x3c2>
 8001162:	bf00      	nop
 8001164:	2000024c 	.word	0x2000024c
 8001168:	080099d8 	.word	0x080099d8
 800116c:	20000144 	.word	0x20000144
 8001170:	08009a0c 	.word	0x08009a0c
 8001174:	08009a30 	.word	0x08009a30
 8001178:	3fe00000 	.word	0x3fe00000
 800117c:	08009a34 	.word	0x08009a34
 8001180:	08009a54 	.word	0x08009a54
 8001184:	08009a78 	.word	0x08009a78
 8001188:	08009a88 	.word	0x08009a88
 800118c:	08009acc 	.word	0x08009acc
 8001190:	08009b0c 	.word	0x08009b0c
 8001194:	08009b44 	.word	0x08009b44
 8001198:	08009b80 	.word	0x08009b80
 800119c:	08009bbc 	.word	0x08009bbc
 80011a0:	08009bf0 	.word	0x08009bf0
 80011a4:	08009c24 	.word	0x08009c24
 80011a8:	08009c38 	.word	0x08009c38
    }
    // (2) Write New Line of Text Data To The File
    FR_Status = f_puts("This New Line Was Added During File Update!\r\n", &Fil);
 80011ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011b0:	3b34      	subs	r3, #52	@ 0x34
 80011b2:	4619      	mov	r1, r3
 80011b4:	4838      	ldr	r0, [pc, #224]	@ (8001298 <SDIO_SDCard_Test+0x41c>)
 80011b6:	f007 fe1c 	bl	8008df2 <f_puts>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 80011c0:	f102 020f 	add.w	r2, r2, #15
 80011c4:	7013      	strb	r3, [r2, #0]
    f_close(&Fil);
 80011c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011ca:	3b34      	subs	r3, #52	@ 0x34
 80011cc:	4618      	mov	r0, r3
 80011ce:	f007 fa58 	bl	8008682 <f_close>
    memset(RW_Buffer,'\0',sizeof(RW_Buffer)); // Clear The Buffer
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	3b0c      	subs	r3, #12
 80011d8:	22c8      	movs	r2, #200	@ 0xc8
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f007 ff6f 	bl	80090c0 <memset>
    // (3) Read The Contents of The Text File After The Update
    FR_Status = f_open(&Fil, "My4SDIOFile.txt", FA_READ); // Open The File For Read
 80011e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011e6:	3b34      	subs	r3, #52	@ 0x34
 80011e8:	2201      	movs	r2, #1
 80011ea:	492c      	ldr	r1, [pc, #176]	@ (800129c <SDIO_SDCard_Test+0x420>)
 80011ec:	4618      	mov	r0, r3
 80011ee:	f006 fd0f 	bl	8007c10 <f_open>
 80011f2:	4603      	mov	r3, r0
 80011f4:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 80011f8:	f102 020f 	add.w	r2, r2, #15
 80011fc:	7013      	strb	r3, [r2, #0]
    f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 80011fe:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001202:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8001206:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800120a:	3b3c      	subs	r3, #60	@ 0x3c
 800120c:	f107 0110 	add.w	r1, r7, #16
 8001210:	390c      	subs	r1, #12
 8001212:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8001216:	3834      	subs	r0, #52	@ 0x34
 8001218:	f006 fec2 	bl	8007fa0 <f_read>
    sprintf(TxBuffer, "Data Read From (My4SDIOFile.txt) After Update:\r\n%s", RW_Buffer);
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	3b0c      	subs	r3, #12
 8001222:	461a      	mov	r2, r3
 8001224:	491e      	ldr	r1, [pc, #120]	@ (80012a0 <SDIO_SDCard_Test+0x424>)
 8001226:	481f      	ldr	r0, [pc, #124]	@ (80012a4 <SDIO_SDCard_Test+0x428>)
 8001228:	f007 ff2a 	bl	8009080 <siprintf>
    UART_Print(TxBuffer);
 800122c:	481d      	ldr	r0, [pc, #116]	@ (80012a4 <SDIO_SDCard_Test+0x428>)
 800122e:	f7ff fcc5 	bl	8000bbc <UART_Print>
    f_close(&Fil);
 8001232:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001236:	3b34      	subs	r3, #52	@ 0x34
 8001238:	4618      	mov	r0, r3
 800123a:	f007 fa22 	bl	8008682 <f_close>
        USC_CDC_Print(TxBuffer);
    }
    */
  } while(0);
  //------------------[ Test Complete! Unmount The SD Card ]--------------------
  FR_Status = f_mount(NULL, "", 0);
 800123e:	2200      	movs	r2, #0
 8001240:	4919      	ldr	r1, [pc, #100]	@ (80012a8 <SDIO_SDCard_Test+0x42c>)
 8001242:	2000      	movs	r0, #0
 8001244:	f006 fc9e 	bl	8007b84 <f_mount>
 8001248:	4603      	mov	r3, r0
 800124a:	f507 5205 	add.w	r2, r7, #8512	@ 0x2140
 800124e:	f102 020f 	add.w	r2, r2, #15
 8001252:	7013      	strb	r3, [r2, #0]
  if (FR_Status != FR_OK)
 8001254:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8001258:	f103 030f 	add.w	r3, r3, #15
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00d      	beq.n	800127e <SDIO_SDCard_Test+0x402>
  {
      sprintf(TxBuffer, "\r\nError! While Un-mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 8001262:	f507 5305 	add.w	r3, r7, #8512	@ 0x2140
 8001266:	f103 030f 	add.w	r3, r3, #15
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	490f      	ldr	r1, [pc, #60]	@ (80012ac <SDIO_SDCard_Test+0x430>)
 8001270:	480c      	ldr	r0, [pc, #48]	@ (80012a4 <SDIO_SDCard_Test+0x428>)
 8001272:	f007 ff05 	bl	8009080 <siprintf>
      UART_Print(TxBuffer);
 8001276:	480b      	ldr	r0, [pc, #44]	@ (80012a4 <SDIO_SDCard_Test+0x428>)
 8001278:	f7ff fca0 	bl	8000bbc <UART_Print>
  } else{
      sprintf(TxBuffer, "\r\nSD Card Un-mounted Successfully! \r\n");
      UART_Print(TxBuffer);
  }
}
 800127c:	e006      	b.n	800128c <SDIO_SDCard_Test+0x410>
      sprintf(TxBuffer, "\r\nSD Card Un-mounted Successfully! \r\n");
 800127e:	490c      	ldr	r1, [pc, #48]	@ (80012b0 <SDIO_SDCard_Test+0x434>)
 8001280:	4808      	ldr	r0, [pc, #32]	@ (80012a4 <SDIO_SDCard_Test+0x428>)
 8001282:	f007 fefd 	bl	8009080 <siprintf>
      UART_Print(TxBuffer);
 8001286:	4807      	ldr	r0, [pc, #28]	@ (80012a4 <SDIO_SDCard_Test+0x428>)
 8001288:	f7ff fc98 	bl	8000bbc <UART_Print>
}
 800128c:	bf00      	nop
 800128e:	f507 5705 	add.w	r7, r7, #8512	@ 0x2140
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bdb0      	pop	{r4, r5, r7, pc}
 8001298:	08009c74 	.word	0x08009c74
 800129c:	08009a78 	.word	0x08009a78
 80012a0:	08009ca4 	.word	0x08009ca4
 80012a4:	20000144 	.word	0x20000144
 80012a8:	08009a30 	.word	0x08009a30
 80012ac:	08009cd8 	.word	0x08009cd8
 80012b0:	08009d10 	.word	0x08009d10

080012b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b8:	b672      	cpsid	i
}
 80012ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <Error_Handler+0x8>

080012c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b10      	ldr	r3, [pc, #64]	@ (800130c <HAL_MspInit+0x4c>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ce:	4a0f      	ldr	r2, [pc, #60]	@ (800130c <HAL_MspInit+0x4c>)
 80012d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d6:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <HAL_MspInit+0x4c>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <HAL_MspInit+0x4c>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	4a08      	ldr	r2, [pc, #32]	@ (800130c <HAL_MspInit+0x4c>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f2:	4b06      	ldr	r3, [pc, #24]	@ (800130c <HAL_MspInit+0x4c>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012fe:	2007      	movs	r0, #7
 8001300:	f000 fade 	bl	80018c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800

08001310 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b0a2      	sub	sp, #136	@ 0x88
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001328:	f107 0318 	add.w	r3, r7, #24
 800132c:	225c      	movs	r2, #92	@ 0x5c
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f007 fec5 	bl	80090c0 <memset>
  if(hsd->Instance==SDIO)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a43      	ldr	r2, [pc, #268]	@ (8001448 <HAL_SD_MspInit+0x138>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d17f      	bne.n	8001440 <HAL_SD_MspInit+0x130>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001340:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001344:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001346:	2300      	movs	r3, #0
 8001348:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800134a:	2300      	movs	r3, #0
 800134c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800134e:	f107 0318 	add.w	r3, r7, #24
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fdb0 	bl	8001eb8 <HAL_RCCEx_PeriphCLKConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 800135e:	f7ff ffa9 	bl	80012b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	4b39      	ldr	r3, [pc, #228]	@ (800144c <HAL_SD_MspInit+0x13c>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136a:	4a38      	ldr	r2, [pc, #224]	@ (800144c <HAL_SD_MspInit+0x13c>)
 800136c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001370:	6453      	str	r3, [r2, #68]	@ 0x44
 8001372:	4b36      	ldr	r3, [pc, #216]	@ (800144c <HAL_SD_MspInit+0x13c>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001376:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	4b32      	ldr	r3, [pc, #200]	@ (800144c <HAL_SD_MspInit+0x13c>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a31      	ldr	r2, [pc, #196]	@ (800144c <HAL_SD_MspInit+0x13c>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b2f      	ldr	r3, [pc, #188]	@ (800144c <HAL_SD_MspInit+0x13c>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b2b      	ldr	r3, [pc, #172]	@ (800144c <HAL_SD_MspInit+0x13c>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	4a2a      	ldr	r2, [pc, #168]	@ (800144c <HAL_SD_MspInit+0x13c>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013aa:	4b28      	ldr	r3, [pc, #160]	@ (800144c <HAL_SD_MspInit+0x13c>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	4b24      	ldr	r3, [pc, #144]	@ (800144c <HAL_SD_MspInit+0x13c>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a23      	ldr	r2, [pc, #140]	@ (800144c <HAL_SD_MspInit+0x13c>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b21      	ldr	r3, [pc, #132]	@ (800144c <HAL_SD_MspInit+0x13c>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PC11     ------> SDIO_D3
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80013d2:	2307      	movs	r3, #7
 80013d4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80013e4:	230c      	movs	r3, #12
 80013e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ea:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80013ee:	4619      	mov	r1, r3
 80013f0:	4817      	ldr	r0, [pc, #92]	@ (8001450 <HAL_SD_MspInit+0x140>)
 80013f2:	f000 fa99 	bl	8001928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80013f6:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80013fa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800140a:	230c      	movs	r3, #12
 800140c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001410:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001414:	4619      	mov	r1, r3
 8001416:	480f      	ldr	r0, [pc, #60]	@ (8001454 <HAL_SD_MspInit+0x144>)
 8001418:	f000 fa86 	bl	8001928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800141c:	2304      	movs	r3, #4
 800141e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800142e:	230c      	movs	r3, #12
 8001430:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001434:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001438:	4619      	mov	r1, r3
 800143a:	4807      	ldr	r0, [pc, #28]	@ (8001458 <HAL_SD_MspInit+0x148>)
 800143c:	f000 fa74 	bl	8001928 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001440:	bf00      	nop
 8001442:	3788      	adds	r7, #136	@ 0x88
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40012c00 	.word	0x40012c00
 800144c:	40023800 	.word	0x40023800
 8001450:	40020400 	.word	0x40020400
 8001454:	40020800 	.word	0x40020800
 8001458:	40020c00 	.word	0x40020c00

0800145c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	@ 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a19      	ldr	r2, [pc, #100]	@ (80014e0 <HAL_UART_MspInit+0x84>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d12b      	bne.n	80014d6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	4b18      	ldr	r3, [pc, #96]	@ (80014e4 <HAL_UART_MspInit+0x88>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	4a17      	ldr	r2, [pc, #92]	@ (80014e4 <HAL_UART_MspInit+0x88>)
 8001488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800148c:	6413      	str	r3, [r2, #64]	@ 0x40
 800148e:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <HAL_UART_MspInit+0x88>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <HAL_UART_MspInit+0x88>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a10      	ldr	r2, [pc, #64]	@ (80014e4 <HAL_UART_MspInit+0x88>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <HAL_UART_MspInit+0x88>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014b6:	230c      	movs	r3, #12
 80014b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c6:	2307      	movs	r3, #7
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <HAL_UART_MspInit+0x8c>)
 80014d2:	f000 fa29 	bl	8001928 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014d6:	bf00      	nop
 80014d8:	3728      	adds	r7, #40	@ 0x28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40004400 	.word	0x40004400
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020000 	.word	0x40020000

080014ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <NMI_Handler+0x4>

080014f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <HardFault_Handler+0x4>

080014fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <MemManage_Handler+0x4>

08001504 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <BusFault_Handler+0x4>

0800150c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <UsageFault_Handler+0x4>

08001514 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001542:	f000 f8c7 	bl	80016d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001554:	4a14      	ldr	r2, [pc, #80]	@ (80015a8 <_sbrk+0x5c>)
 8001556:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <_sbrk+0x60>)
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001560:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <_sbrk+0x64>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d102      	bne.n	800156e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001568:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <_sbrk+0x64>)
 800156a:	4a12      	ldr	r2, [pc, #72]	@ (80015b4 <_sbrk+0x68>)
 800156c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156e:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	429a      	cmp	r2, r3
 800157a:	d207      	bcs.n	800158c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800157c:	f007 fda8 	bl	80090d0 <__errno>
 8001580:	4603      	mov	r3, r0
 8001582:	220c      	movs	r2, #12
 8001584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001586:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800158a:	e009      	b.n	80015a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800158c:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001592:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	4a05      	ldr	r2, [pc, #20]	@ (80015b0 <_sbrk+0x64>)
 800159c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159e:	68fb      	ldr	r3, [r7, #12]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20020000 	.word	0x20020000
 80015ac:	00000400 	.word	0x00000400
 80015b0:	20000240 	.word	0x20000240
 80015b4:	200005d0 	.word	0x200005d0

080015b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <SystemInit+0x20>)
 80015be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015c2:	4a05      	ldr	r2, [pc, #20]	@ (80015d8 <SystemInit+0x20>)
 80015c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001614 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015e0:	f7ff ffea 	bl	80015b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e4:	480c      	ldr	r0, [pc, #48]	@ (8001618 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015e6:	490d      	ldr	r1, [pc, #52]	@ (800161c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001620 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ec:	e002      	b.n	80015f4 <LoopCopyDataInit>

080015ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f2:	3304      	adds	r3, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f8:	d3f9      	bcc.n	80015ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001624 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001628 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001600:	e001      	b.n	8001606 <LoopFillZerobss>

08001602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001604:	3204      	adds	r2, #4

08001606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001608:	d3fb      	bcc.n	8001602 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800160a:	f007 fd67 	bl	80090dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800160e:	f7ff fae9 	bl	8000be4 <main>
  bx  lr    
 8001612:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001614:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800161c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001620:	0800a230 	.word	0x0800a230
  ldr r2, =_sbss
 8001624:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001628:	200005cc 	.word	0x200005cc

0800162c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC_IRQHandler>
	...

08001630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001634:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0d      	ldr	r2, [pc, #52]	@ (8001670 <HAL_Init+0x40>)
 800163a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800163e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001640:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <HAL_Init+0x40>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0a      	ldr	r2, [pc, #40]	@ (8001670 <HAL_Init+0x40>)
 8001646:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800164a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800164c:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <HAL_Init+0x40>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a07      	ldr	r2, [pc, #28]	@ (8001670 <HAL_Init+0x40>)
 8001652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001658:	2003      	movs	r0, #3
 800165a:	f000 f931 	bl	80018c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165e:	2000      	movs	r0, #0
 8001660:	f000 f808 	bl	8001674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001664:	f7ff fe2c 	bl	80012c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023c00 	.word	0x40023c00

08001674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800167c:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <HAL_InitTick+0x54>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <HAL_InitTick+0x58>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4619      	mov	r1, r3
 8001686:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800168a:	fbb3 f3f1 	udiv	r3, r3, r1
 800168e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f000 f93b 	bl	800190e <HAL_SYSTICK_Config>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e00e      	b.n	80016c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b0f      	cmp	r3, #15
 80016a6:	d80a      	bhi.n	80016be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a8:	2200      	movs	r2, #0
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016b0:	f000 f911 	bl	80018d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b4:	4a06      	ldr	r2, [pc, #24]	@ (80016d0 <HAL_InitTick+0x5c>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e000      	b.n	80016c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000000 	.word	0x20000000
 80016cc:	20000008 	.word	0x20000008
 80016d0:	20000004 	.word	0x20000004

080016d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <HAL_IncTick+0x20>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_IncTick+0x24>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	4a04      	ldr	r2, [pc, #16]	@ (80016f8 <HAL_IncTick+0x24>)
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000008 	.word	0x20000008
 80016f8:	20000244 	.word	0x20000244

080016fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001700:	4b03      	ldr	r3, [pc, #12]	@ (8001710 <HAL_GetTick+0x14>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000244 	.word	0x20000244

08001714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff ffee 	bl	80016fc <HAL_GetTick>
 8001720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800172c:	d005      	beq.n	800173a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172e:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <HAL_Delay+0x44>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4413      	add	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800173a:	bf00      	nop
 800173c:	f7ff ffde 	bl	80016fc <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	429a      	cmp	r2, r3
 800174a:	d8f7      	bhi.n	800173c <HAL_Delay+0x28>
  {
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000008 	.word	0x20000008

0800175c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800176c:	4b0c      	ldr	r3, [pc, #48]	@ (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001778:	4013      	ands	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001784:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800178c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178e:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	60d3      	str	r3, [r2, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a8:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <__NVIC_GetPriorityGrouping+0x18>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	f003 0307 	and.w	r3, r3, #7
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	6039      	str	r1, [r7, #0]
 80017ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	db0a      	blt.n	80017ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	490c      	ldr	r1, [pc, #48]	@ (800180c <__NVIC_SetPriority+0x4c>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	0112      	lsls	r2, r2, #4
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	440b      	add	r3, r1
 80017e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e8:	e00a      	b.n	8001800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4908      	ldr	r1, [pc, #32]	@ (8001810 <__NVIC_SetPriority+0x50>)
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	3b04      	subs	r3, #4
 80017f8:	0112      	lsls	r2, r2, #4
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	440b      	add	r3, r1
 80017fe:	761a      	strb	r2, [r3, #24]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000e100 	.word	0xe000e100
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001814:	b480      	push	{r7}
 8001816:	b089      	sub	sp, #36	@ 0x24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f1c3 0307 	rsb	r3, r3, #7
 800182e:	2b04      	cmp	r3, #4
 8001830:	bf28      	it	cs
 8001832:	2304      	movcs	r3, #4
 8001834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3304      	adds	r3, #4
 800183a:	2b06      	cmp	r3, #6
 800183c:	d902      	bls.n	8001844 <NVIC_EncodePriority+0x30>
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3b03      	subs	r3, #3
 8001842:	e000      	b.n	8001846 <NVIC_EncodePriority+0x32>
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43da      	mvns	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	401a      	ands	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800185c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa01 f303 	lsl.w	r3, r1, r3
 8001866:	43d9      	mvns	r1, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	4313      	orrs	r3, r2
         );
}
 800186e:	4618      	mov	r0, r3
 8001870:	3724      	adds	r7, #36	@ 0x24
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3b01      	subs	r3, #1
 8001888:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800188c:	d301      	bcc.n	8001892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800188e:	2301      	movs	r3, #1
 8001890:	e00f      	b.n	80018b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001892:	4a0a      	ldr	r2, [pc, #40]	@ (80018bc <SysTick_Config+0x40>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800189a:	210f      	movs	r1, #15
 800189c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018a0:	f7ff ff8e 	bl	80017c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a4:	4b05      	ldr	r3, [pc, #20]	@ (80018bc <SysTick_Config+0x40>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018aa:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <SysTick_Config+0x40>)
 80018ac:	2207      	movs	r2, #7
 80018ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	e000e010 	.word	0xe000e010

080018c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ff47 	bl	800175c <__NVIC_SetPriorityGrouping>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b086      	sub	sp, #24
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e8:	f7ff ff5c 	bl	80017a4 <__NVIC_GetPriorityGrouping>
 80018ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	68b9      	ldr	r1, [r7, #8]
 80018f2:	6978      	ldr	r0, [r7, #20]
 80018f4:	f7ff ff8e 	bl	8001814 <NVIC_EncodePriority>
 80018f8:	4602      	mov	r2, r0
 80018fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fe:	4611      	mov	r1, r2
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff5d 	bl	80017c0 <__NVIC_SetPriority>
}
 8001906:	bf00      	nop
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ffb0 	bl	800187c <SysTick_Config>
 800191c:	4603      	mov	r3, r0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	@ 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800193a:	2300      	movs	r3, #0
 800193c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
 8001942:	e165      	b.n	8001c10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001944:	2201      	movs	r2, #1
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	429a      	cmp	r2, r3
 800195e:	f040 8154 	bne.w	8001c0a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	2b01      	cmp	r3, #1
 800196c:	d005      	beq.n	800197a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001976:	2b02      	cmp	r3, #2
 8001978:	d130      	bne.n	80019dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	2203      	movs	r2, #3
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4013      	ands	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019b0:	2201      	movs	r2, #1
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	091b      	lsrs	r3, r3, #4
 80019c6:	f003 0201 	and.w	r2, r3, #1
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d017      	beq.n	8001a18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2203      	movs	r2, #3
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d123      	bne.n	8001a6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	08da      	lsrs	r2, r3, #3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3208      	adds	r2, #8
 8001a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	220f      	movs	r2, #15
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	08da      	lsrs	r2, r3, #3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3208      	adds	r2, #8
 8001a66:	69b9      	ldr	r1, [r7, #24]
 8001a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	2203      	movs	r2, #3
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0203 	and.w	r2, r3, #3
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 80ae 	beq.w	8001c0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b5d      	ldr	r3, [pc, #372]	@ (8001c28 <HAL_GPIO_Init+0x300>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab6:	4a5c      	ldr	r2, [pc, #368]	@ (8001c28 <HAL_GPIO_Init+0x300>)
 8001ab8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001abe:	4b5a      	ldr	r3, [pc, #360]	@ (8001c28 <HAL_GPIO_Init+0x300>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aca:	4a58      	ldr	r2, [pc, #352]	@ (8001c2c <HAL_GPIO_Init+0x304>)
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	089b      	lsrs	r3, r3, #2
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	220f      	movs	r2, #15
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a4f      	ldr	r2, [pc, #316]	@ (8001c30 <HAL_GPIO_Init+0x308>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d025      	beq.n	8001b42 <HAL_GPIO_Init+0x21a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4e      	ldr	r2, [pc, #312]	@ (8001c34 <HAL_GPIO_Init+0x30c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d01f      	beq.n	8001b3e <HAL_GPIO_Init+0x216>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a4d      	ldr	r2, [pc, #308]	@ (8001c38 <HAL_GPIO_Init+0x310>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d019      	beq.n	8001b3a <HAL_GPIO_Init+0x212>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a4c      	ldr	r2, [pc, #304]	@ (8001c3c <HAL_GPIO_Init+0x314>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_GPIO_Init+0x20e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4b      	ldr	r2, [pc, #300]	@ (8001c40 <HAL_GPIO_Init+0x318>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d00d      	beq.n	8001b32 <HAL_GPIO_Init+0x20a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4a      	ldr	r2, [pc, #296]	@ (8001c44 <HAL_GPIO_Init+0x31c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d007      	beq.n	8001b2e <HAL_GPIO_Init+0x206>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a49      	ldr	r2, [pc, #292]	@ (8001c48 <HAL_GPIO_Init+0x320>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d101      	bne.n	8001b2a <HAL_GPIO_Init+0x202>
 8001b26:	2306      	movs	r3, #6
 8001b28:	e00c      	b.n	8001b44 <HAL_GPIO_Init+0x21c>
 8001b2a:	2307      	movs	r3, #7
 8001b2c:	e00a      	b.n	8001b44 <HAL_GPIO_Init+0x21c>
 8001b2e:	2305      	movs	r3, #5
 8001b30:	e008      	b.n	8001b44 <HAL_GPIO_Init+0x21c>
 8001b32:	2304      	movs	r3, #4
 8001b34:	e006      	b.n	8001b44 <HAL_GPIO_Init+0x21c>
 8001b36:	2303      	movs	r3, #3
 8001b38:	e004      	b.n	8001b44 <HAL_GPIO_Init+0x21c>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e002      	b.n	8001b44 <HAL_GPIO_Init+0x21c>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <HAL_GPIO_Init+0x21c>
 8001b42:	2300      	movs	r3, #0
 8001b44:	69fa      	ldr	r2, [r7, #28]
 8001b46:	f002 0203 	and.w	r2, r2, #3
 8001b4a:	0092      	lsls	r2, r2, #2
 8001b4c:	4093      	lsls	r3, r2
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b54:	4935      	ldr	r1, [pc, #212]	@ (8001c2c <HAL_GPIO_Init+0x304>)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b62:	4b3a      	ldr	r3, [pc, #232]	@ (8001c4c <HAL_GPIO_Init+0x324>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b86:	4a31      	ldr	r2, [pc, #196]	@ (8001c4c <HAL_GPIO_Init+0x324>)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c4c <HAL_GPIO_Init+0x324>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bb0:	4a26      	ldr	r2, [pc, #152]	@ (8001c4c <HAL_GPIO_Init+0x324>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bb6:	4b25      	ldr	r3, [pc, #148]	@ (8001c4c <HAL_GPIO_Init+0x324>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bda:	4a1c      	ldr	r2, [pc, #112]	@ (8001c4c <HAL_GPIO_Init+0x324>)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001be0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c4c <HAL_GPIO_Init+0x324>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c04:	4a11      	ldr	r2, [pc, #68]	@ (8001c4c <HAL_GPIO_Init+0x324>)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	61fb      	str	r3, [r7, #28]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	2b0f      	cmp	r3, #15
 8001c14:	f67f ae96 	bls.w	8001944 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3724      	adds	r7, #36	@ 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40013800 	.word	0x40013800
 8001c30:	40020000 	.word	0x40020000
 8001c34:	40020400 	.word	0x40020400
 8001c38:	40020800 	.word	0x40020800
 8001c3c:	40020c00 	.word	0x40020c00
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40021400 	.word	0x40021400
 8001c48:	40021800 	.word	0x40021800
 8001c4c:	40013c00 	.word	0x40013c00

08001c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	807b      	strh	r3, [r7, #2]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c60:	787b      	ldrb	r3, [r7, #1]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c66:	887a      	ldrh	r2, [r7, #2]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c6c:	e003      	b.n	8001c76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c6e:	887b      	ldrh	r3, [r7, #2]
 8001c70:	041a      	lsls	r2, r3, #16
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	619a      	str	r2, [r3, #24]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0cc      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c98:	4b68      	ldr	r3, [pc, #416]	@ (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 030f 	and.w	r3, r3, #15
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d90c      	bls.n	8001cc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca6:	4b65      	ldr	r3, [pc, #404]	@ (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cae:	4b63      	ldr	r3, [pc, #396]	@ (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0b8      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d020      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cd8:	4b59      	ldr	r3, [pc, #356]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	4a58      	ldr	r2, [pc, #352]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ce2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cf0:	4b53      	ldr	r3, [pc, #332]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	4a52      	ldr	r2, [pc, #328]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cfc:	4b50      	ldr	r3, [pc, #320]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	494d      	ldr	r1, [pc, #308]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d044      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d107      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	4b47      	ldr	r3, [pc, #284]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d119      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e07f      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d003      	beq.n	8001d42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d107      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d42:	4b3f      	ldr	r3, [pc, #252]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d109      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e06f      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d52:	4b3b      	ldr	r3, [pc, #236]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e067      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d62:	4b37      	ldr	r3, [pc, #220]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f023 0203 	bic.w	r2, r3, #3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	4934      	ldr	r1, [pc, #208]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d74:	f7ff fcc2 	bl	80016fc <HAL_GetTick>
 8001d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d7c:	f7ff fcbe 	bl	80016fc <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e04f      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d92:	4b2b      	ldr	r3, [pc, #172]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 020c 	and.w	r2, r3, #12
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d1eb      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da4:	4b25      	ldr	r3, [pc, #148]	@ (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d20c      	bcs.n	8001dcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b20      	ldr	r3, [pc, #128]	@ (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e032      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd8:	4b19      	ldr	r3, [pc, #100]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	4916      	ldr	r1, [pc, #88]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d009      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001df6:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	490e      	ldr	r1, [pc, #56]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e0a:	f000 fb7f 	bl	800250c <HAL_RCC_GetSysClockFreq>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	490a      	ldr	r1, [pc, #40]	@ (8001e44 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1c:	5ccb      	ldrb	r3, [r1, r3]
 8001e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e22:	4a09      	ldr	r2, [pc, #36]	@ (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e26:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fc22 	bl	8001674 <HAL_InitTick>

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023c00 	.word	0x40023c00
 8001e40:	40023800 	.word	0x40023800
 8001e44:	08009d80 	.word	0x08009d80
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	20000004 	.word	0x20000004

08001e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e54:	4b03      	ldr	r3, [pc, #12]	@ (8001e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	20000000 	.word	0x20000000

08001e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e6c:	f7ff fff0 	bl	8001e50 <HAL_RCC_GetHCLKFreq>
 8001e70:	4602      	mov	r2, r0
 8001e72:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	0a9b      	lsrs	r3, r3, #10
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	4903      	ldr	r1, [pc, #12]	@ (8001e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e7e:	5ccb      	ldrb	r3, [r1, r3]
 8001e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	08009d90 	.word	0x08009d90

08001e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e94:	f7ff ffdc 	bl	8001e50 <HAL_RCC_GetHCLKFreq>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	0b5b      	lsrs	r3, r3, #13
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	4903      	ldr	r1, [pc, #12]	@ (8001eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ea6:	5ccb      	ldrb	r3, [r1, r3]
 8001ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	08009d90 	.word	0x08009d90

08001eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08c      	sub	sp, #48	@ 0x30
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d010      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001ef0:	4b6f      	ldr	r3, [pc, #444]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ef6:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001efe:	496c      	ldr	r1, [pc, #432]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d010      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001f1e:	4b64      	ldr	r3, [pc, #400]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f24:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f2c:	4960      	ldr	r1, [pc, #384]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d017      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f4c:	4b58      	ldr	r3, [pc, #352]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	4955      	ldr	r1, [pc, #340]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f6a:	d101      	bne.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d017      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f88:	4b49      	ldr	r3, [pc, #292]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f8e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f96:	4946      	ldr	r1, [pc, #280]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fa2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fa6:	d101      	bne.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0320 	and.w	r3, r3, #32
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 808a 	beq.w	80020da <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	4b39      	ldr	r3, [pc, #228]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	4a38      	ldr	r2, [pc, #224]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fd6:	4b36      	ldr	r3, [pc, #216]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001fe2:	4b34      	ldr	r3, [pc, #208]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a33      	ldr	r2, [pc, #204]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001fee:	f7ff fb85 	bl	80016fc <HAL_GetTick>
 8001ff2:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ff6:	f7ff fb81 	bl	80016fc <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e278      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002008:	4b2a      	ldr	r3, [pc, #168]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002014:	4b26      	ldr	r3, [pc, #152]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002018:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800201c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d02f      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800202c:	6a3a      	ldr	r2, [r7, #32]
 800202e:	429a      	cmp	r2, r3
 8002030:	d028      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002032:	4b1f      	ldr	r3, [pc, #124]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002036:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800203a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800203c:	4b1e      	ldr	r3, [pc, #120]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800203e:	2201      	movs	r2, #1
 8002040:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002042:	4b1d      	ldr	r3, [pc, #116]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002048:	4a19      	ldr	r2, [pc, #100]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800204e:	4b18      	ldr	r3, [pc, #96]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b01      	cmp	r3, #1
 8002058:	d114      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800205a:	f7ff fb4f 	bl	80016fc <HAL_GetTick>
 800205e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002060:	e00a      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7ff fb4b 	bl	80016fc <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002070:	4293      	cmp	r3, r2
 8002072:	d901      	bls.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e240      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002078:	4b0d      	ldr	r3, [pc, #52]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800207a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0ee      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002088:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800208c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002090:	d114      	bne.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002092:	4b07      	ldr	r3, [pc, #28]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80020a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020a6:	4902      	ldr	r1, [pc, #8]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	608b      	str	r3, [r1, #8]
 80020ac:	e00c      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40007000 	.word	0x40007000
 80020b8:	42470e40 	.word	0x42470e40
 80020bc:	4b4a      	ldr	r3, [pc, #296]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	4a49      	ldr	r2, [pc, #292]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020c2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80020c6:	6093      	str	r3, [r2, #8]
 80020c8:	4b47      	ldr	r3, [pc, #284]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d4:	4944      	ldr	r1, [pc, #272]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d004      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80020ec:	4b3f      	ldr	r3, [pc, #252]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80020ee:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80020fc:	4b3a      	ldr	r3, [pc, #232]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80020fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002102:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210a:	4937      	ldr	r1, [pc, #220]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800211e:	4b32      	ldr	r3, [pc, #200]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002120:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002124:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800212c:	492e      	ldr	r1, [pc, #184]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800213c:	2b00      	cmp	r3, #0
 800213e:	d011      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002140:	4b29      	ldr	r3, [pc, #164]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002142:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002146:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800214e:	4926      	ldr	r1, [pc, #152]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800215a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800215e:	d101      	bne.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002160:	2301      	movs	r3, #1
 8002162:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00a      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002170:	4b1d      	ldr	r3, [pc, #116]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002176:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217e:	491a      	ldr	r1, [pc, #104]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002180:	4313      	orrs	r3, r2
 8002182:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800218e:	2b00      	cmp	r3, #0
 8002190:	d011      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002192:	4b15      	ldr	r3, [pc, #84]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002194:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002198:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021a0:	4911      	ldr	r1, [pc, #68]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021b0:	d101      	bne.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80021b2:	2301      	movs	r3, #1
 80021b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80021b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d005      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021c4:	f040 80ff 	bne.w	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80021c8:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021ce:	f7ff fa95 	bl	80016fc <HAL_GetTick>
 80021d2:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021d4:	e00e      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80021d6:	f7ff fa91 	bl	80016fc <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d907      	bls.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e188      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x642>
 80021e8:	40023800 	.word	0x40023800
 80021ec:	424711e0 	.word	0x424711e0
 80021f0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021f4:	4b7e      	ldr	r3, [pc, #504]	@ (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1ea      	bne.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002210:	2b00      	cmp	r3, #0
 8002212:	d009      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800221c:	2b00      	cmp	r3, #0
 800221e:	d028      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002224:	2b00      	cmp	r3, #0
 8002226:	d124      	bne.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002228:	4b71      	ldr	r3, [pc, #452]	@ (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800222a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800222e:	0c1b      	lsrs	r3, r3, #16
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	3301      	adds	r3, #1
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800223a:	4b6d      	ldr	r3, [pc, #436]	@ (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800223c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002240:	0e1b      	lsrs	r3, r3, #24
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	019b      	lsls	r3, r3, #6
 8002252:	431a      	orrs	r2, r3
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	085b      	lsrs	r3, r3, #1
 8002258:	3b01      	subs	r3, #1
 800225a:	041b      	lsls	r3, r3, #16
 800225c:	431a      	orrs	r2, r3
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	061b      	lsls	r3, r3, #24
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	071b      	lsls	r3, r3, #28
 800226a:	4961      	ldr	r1, [pc, #388]	@ (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002290:	2b00      	cmp	r3, #0
 8002292:	d035      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002298:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800229c:	d130      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800229e:	4b54      	ldr	r3, [pc, #336]	@ (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022a4:	0c1b      	lsrs	r3, r3, #16
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	3301      	adds	r3, #1
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022b0:	4b4f      	ldr	r3, [pc, #316]	@ (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022b6:	0f1b      	lsrs	r3, r3, #28
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	019b      	lsls	r3, r3, #6
 80022c8:	431a      	orrs	r2, r3
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	3b01      	subs	r3, #1
 80022d0:	041b      	lsls	r3, r3, #16
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	061b      	lsls	r3, r3, #24
 80022da:	431a      	orrs	r2, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	071b      	lsls	r3, r3, #28
 80022e0:	4943      	ldr	r1, [pc, #268]	@ (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80022e8:	4b41      	ldr	r3, [pc, #260]	@ (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022ee:	f023 021f 	bic.w	r2, r3, #31
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f6:	3b01      	subs	r3, #1
 80022f8:	493d      	ldr	r1, [pc, #244]	@ (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002308:	2b00      	cmp	r3, #0
 800230a:	d029      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002310:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002314:	d124      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002316:	4b36      	ldr	r3, [pc, #216]	@ (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002318:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800231c:	0c1b      	lsrs	r3, r3, #16
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	3301      	adds	r3, #1
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002328:	4b31      	ldr	r3, [pc, #196]	@ (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800232a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800232e:	0f1b      	lsrs	r3, r3, #28
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	019b      	lsls	r3, r3, #6
 8002340:	431a      	orrs	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	085b      	lsrs	r3, r3, #1
 8002348:	3b01      	subs	r3, #1
 800234a:	041b      	lsls	r3, r3, #16
 800234c:	431a      	orrs	r2, r3
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	061b      	lsls	r3, r3, #24
 8002352:	431a      	orrs	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	071b      	lsls	r3, r3, #28
 8002358:	4925      	ldr	r1, [pc, #148]	@ (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002368:	2b00      	cmp	r3, #0
 800236a:	d016      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	019b      	lsls	r3, r3, #6
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	085b      	lsrs	r3, r3, #1
 800237e:	3b01      	subs	r3, #1
 8002380:	041b      	lsls	r3, r3, #16
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	061b      	lsls	r3, r3, #24
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	071b      	lsls	r3, r3, #28
 8002392:	4917      	ldr	r1, [pc, #92]	@ (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800239a:	4b16      	ldr	r3, [pc, #88]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800239c:	2201      	movs	r2, #1
 800239e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80023a0:	f7ff f9ac 	bl	80016fc <HAL_GetTick>
 80023a4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80023a8:	f7ff f9a8 	bl	80016fc <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e09f      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023ba:	4b0d      	ldr	r3, [pc, #52]	@ (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80023c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	f040 8095 	bne.w	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80023ce:	4b0a      	ldr	r3, [pc, #40]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80023d4:	f7ff f992 	bl	80016fc <HAL_GetTick>
 80023d8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023da:	e00f      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80023dc:	f7ff f98e 	bl	80016fc <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d908      	bls.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e085      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x642>
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800
 80023f4:	42470068 	.word	0x42470068
 80023f8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023fc:	4b41      	ldr	r3, [pc, #260]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002404:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002408:	d0e8      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	2b00      	cmp	r3, #0
 800241c:	d009      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002426:	2b00      	cmp	r3, #0
 8002428:	d02b      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800242e:	2b00      	cmp	r3, #0
 8002430:	d127      	bne.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002432:	4b34      	ldr	r3, [pc, #208]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002438:	0c1b      	lsrs	r3, r3, #16
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	3301      	adds	r3, #1
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699a      	ldr	r2, [r3, #24]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	019b      	lsls	r3, r3, #6
 800244e:	431a      	orrs	r2, r3
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	085b      	lsrs	r3, r3, #1
 8002454:	3b01      	subs	r3, #1
 8002456:	041b      	lsls	r3, r3, #16
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245e:	061b      	lsls	r3, r3, #24
 8002460:	4928      	ldr	r1, [pc, #160]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002468:	4b26      	ldr	r3, [pc, #152]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800246a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800246e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002476:	3b01      	subs	r3, #1
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	4922      	ldr	r1, [pc, #136]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d01d      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x612>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002492:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002496:	d118      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002498:	4b1a      	ldr	r3, [pc, #104]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249e:	0e1b      	lsrs	r3, r3, #24
 80024a0:	f003 030f 	and.w	r3, r3, #15
 80024a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699a      	ldr	r2, [r3, #24]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	019b      	lsls	r3, r3, #6
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	085b      	lsrs	r3, r3, #1
 80024b8:	3b01      	subs	r3, #1
 80024ba:	041b      	lsls	r3, r3, #16
 80024bc:	431a      	orrs	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	061b      	lsls	r3, r3, #24
 80024c2:	4910      	ldr	r1, [pc, #64]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80024ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024d0:	f7ff f914 	bl	80016fc <HAL_GetTick>
 80024d4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80024d8:	f7ff f910 	bl	80016fc <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e007      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024ea:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024f6:	d1ef      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3730      	adds	r7, #48	@ 0x30
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800
 8002508:	42470070 	.word	0x42470070

0800250c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800250c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002510:	b0ae      	sub	sp, #184	@ 0xb8
 8002512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002532:	4bcb      	ldr	r3, [pc, #812]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x354>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b0c      	cmp	r3, #12
 800253c:	f200 8206 	bhi.w	800294c <HAL_RCC_GetSysClockFreq+0x440>
 8002540:	a201      	add	r2, pc, #4	@ (adr r2, 8002548 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002546:	bf00      	nop
 8002548:	0800257d 	.word	0x0800257d
 800254c:	0800294d 	.word	0x0800294d
 8002550:	0800294d 	.word	0x0800294d
 8002554:	0800294d 	.word	0x0800294d
 8002558:	08002585 	.word	0x08002585
 800255c:	0800294d 	.word	0x0800294d
 8002560:	0800294d 	.word	0x0800294d
 8002564:	0800294d 	.word	0x0800294d
 8002568:	0800258d 	.word	0x0800258d
 800256c:	0800294d 	.word	0x0800294d
 8002570:	0800294d 	.word	0x0800294d
 8002574:	0800294d 	.word	0x0800294d
 8002578:	0800277d 	.word	0x0800277d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800257c:	4bb9      	ldr	r3, [pc, #740]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x358>)
 800257e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002582:	e1e7      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002584:	4bb8      	ldr	r3, [pc, #736]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002586:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800258a:	e1e3      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800258c:	4bb4      	ldr	r3, [pc, #720]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x354>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002594:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002598:	4bb1      	ldr	r3, [pc, #708]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x354>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d071      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a4:	4bae      	ldr	r3, [pc, #696]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x354>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	099b      	lsrs	r3, r3, #6
 80025aa:	2200      	movs	r2, #0
 80025ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80025b0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80025b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80025c0:	2300      	movs	r3, #0
 80025c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80025c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80025ca:	4622      	mov	r2, r4
 80025cc:	462b      	mov	r3, r5
 80025ce:	f04f 0000 	mov.w	r0, #0
 80025d2:	f04f 0100 	mov.w	r1, #0
 80025d6:	0159      	lsls	r1, r3, #5
 80025d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025dc:	0150      	lsls	r0, r2, #5
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4621      	mov	r1, r4
 80025e4:	1a51      	subs	r1, r2, r1
 80025e6:	6439      	str	r1, [r7, #64]	@ 0x40
 80025e8:	4629      	mov	r1, r5
 80025ea:	eb63 0301 	sbc.w	r3, r3, r1
 80025ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80025fc:	4649      	mov	r1, r9
 80025fe:	018b      	lsls	r3, r1, #6
 8002600:	4641      	mov	r1, r8
 8002602:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002606:	4641      	mov	r1, r8
 8002608:	018a      	lsls	r2, r1, #6
 800260a:	4641      	mov	r1, r8
 800260c:	1a51      	subs	r1, r2, r1
 800260e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002610:	4649      	mov	r1, r9
 8002612:	eb63 0301 	sbc.w	r3, r3, r1
 8002616:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002624:	4649      	mov	r1, r9
 8002626:	00cb      	lsls	r3, r1, #3
 8002628:	4641      	mov	r1, r8
 800262a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800262e:	4641      	mov	r1, r8
 8002630:	00ca      	lsls	r2, r1, #3
 8002632:	4610      	mov	r0, r2
 8002634:	4619      	mov	r1, r3
 8002636:	4603      	mov	r3, r0
 8002638:	4622      	mov	r2, r4
 800263a:	189b      	adds	r3, r3, r2
 800263c:	633b      	str	r3, [r7, #48]	@ 0x30
 800263e:	462b      	mov	r3, r5
 8002640:	460a      	mov	r2, r1
 8002642:	eb42 0303 	adc.w	r3, r2, r3
 8002646:	637b      	str	r3, [r7, #52]	@ 0x34
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002654:	4629      	mov	r1, r5
 8002656:	024b      	lsls	r3, r1, #9
 8002658:	4621      	mov	r1, r4
 800265a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800265e:	4621      	mov	r1, r4
 8002660:	024a      	lsls	r2, r1, #9
 8002662:	4610      	mov	r0, r2
 8002664:	4619      	mov	r1, r3
 8002666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800266a:	2200      	movs	r2, #0
 800266c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002670:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002674:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002678:	f7fe f928 	bl	80008cc <__aeabi_uldivmod>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4613      	mov	r3, r2
 8002682:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002686:	e067      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002688:	4b75      	ldr	r3, [pc, #468]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x354>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	099b      	lsrs	r3, r3, #6
 800268e:	2200      	movs	r2, #0
 8002690:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002694:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002698:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800269c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026a2:	2300      	movs	r3, #0
 80026a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80026aa:	4622      	mov	r2, r4
 80026ac:	462b      	mov	r3, r5
 80026ae:	f04f 0000 	mov.w	r0, #0
 80026b2:	f04f 0100 	mov.w	r1, #0
 80026b6:	0159      	lsls	r1, r3, #5
 80026b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026bc:	0150      	lsls	r0, r2, #5
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4621      	mov	r1, r4
 80026c4:	1a51      	subs	r1, r2, r1
 80026c6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80026c8:	4629      	mov	r1, r5
 80026ca:	eb63 0301 	sbc.w	r3, r3, r1
 80026ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80026dc:	4649      	mov	r1, r9
 80026de:	018b      	lsls	r3, r1, #6
 80026e0:	4641      	mov	r1, r8
 80026e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026e6:	4641      	mov	r1, r8
 80026e8:	018a      	lsls	r2, r1, #6
 80026ea:	4641      	mov	r1, r8
 80026ec:	ebb2 0a01 	subs.w	sl, r2, r1
 80026f0:	4649      	mov	r1, r9
 80026f2:	eb63 0b01 	sbc.w	fp, r3, r1
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002702:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002706:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800270a:	4692      	mov	sl, r2
 800270c:	469b      	mov	fp, r3
 800270e:	4623      	mov	r3, r4
 8002710:	eb1a 0303 	adds.w	r3, sl, r3
 8002714:	623b      	str	r3, [r7, #32]
 8002716:	462b      	mov	r3, r5
 8002718:	eb4b 0303 	adc.w	r3, fp, r3
 800271c:	627b      	str	r3, [r7, #36]	@ 0x24
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800272a:	4629      	mov	r1, r5
 800272c:	028b      	lsls	r3, r1, #10
 800272e:	4621      	mov	r1, r4
 8002730:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002734:	4621      	mov	r1, r4
 8002736:	028a      	lsls	r2, r1, #10
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002740:	2200      	movs	r2, #0
 8002742:	673b      	str	r3, [r7, #112]	@ 0x70
 8002744:	677a      	str	r2, [r7, #116]	@ 0x74
 8002746:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800274a:	f7fe f8bf 	bl	80008cc <__aeabi_uldivmod>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4613      	mov	r3, r2
 8002754:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002758:	4b41      	ldr	r3, [pc, #260]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x354>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	0c1b      	lsrs	r3, r3, #16
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	3301      	adds	r3, #1
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800276a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800276e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002772:	fbb2 f3f3 	udiv	r3, r2, r3
 8002776:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800277a:	e0eb      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800277c:	4b38      	ldr	r3, [pc, #224]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x354>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002784:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002788:	4b35      	ldr	r3, [pc, #212]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x354>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d06b      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002794:	4b32      	ldr	r3, [pc, #200]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x354>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	099b      	lsrs	r3, r3, #6
 800279a:	2200      	movs	r2, #0
 800279c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800279e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80027a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80027a8:	2300      	movs	r3, #0
 80027aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80027ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80027b0:	4622      	mov	r2, r4
 80027b2:	462b      	mov	r3, r5
 80027b4:	f04f 0000 	mov.w	r0, #0
 80027b8:	f04f 0100 	mov.w	r1, #0
 80027bc:	0159      	lsls	r1, r3, #5
 80027be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027c2:	0150      	lsls	r0, r2, #5
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4621      	mov	r1, r4
 80027ca:	1a51      	subs	r1, r2, r1
 80027cc:	61b9      	str	r1, [r7, #24]
 80027ce:	4629      	mov	r1, r5
 80027d0:	eb63 0301 	sbc.w	r3, r3, r1
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80027e2:	4659      	mov	r1, fp
 80027e4:	018b      	lsls	r3, r1, #6
 80027e6:	4651      	mov	r1, sl
 80027e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ec:	4651      	mov	r1, sl
 80027ee:	018a      	lsls	r2, r1, #6
 80027f0:	4651      	mov	r1, sl
 80027f2:	ebb2 0801 	subs.w	r8, r2, r1
 80027f6:	4659      	mov	r1, fp
 80027f8:	eb63 0901 	sbc.w	r9, r3, r1
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002808:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800280c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002810:	4690      	mov	r8, r2
 8002812:	4699      	mov	r9, r3
 8002814:	4623      	mov	r3, r4
 8002816:	eb18 0303 	adds.w	r3, r8, r3
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	462b      	mov	r3, r5
 800281e:	eb49 0303 	adc.w	r3, r9, r3
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002830:	4629      	mov	r1, r5
 8002832:	024b      	lsls	r3, r1, #9
 8002834:	4621      	mov	r1, r4
 8002836:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800283a:	4621      	mov	r1, r4
 800283c:	024a      	lsls	r2, r1, #9
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002846:	2200      	movs	r2, #0
 8002848:	65bb      	str	r3, [r7, #88]	@ 0x58
 800284a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800284c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002850:	f7fe f83c 	bl	80008cc <__aeabi_uldivmod>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4613      	mov	r3, r2
 800285a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800285e:	e065      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x420>
 8002860:	40023800 	.word	0x40023800
 8002864:	00f42400 	.word	0x00f42400
 8002868:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800286c:	4b3d      	ldr	r3, [pc, #244]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x458>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	099b      	lsrs	r3, r3, #6
 8002872:	2200      	movs	r2, #0
 8002874:	4618      	mov	r0, r3
 8002876:	4611      	mov	r1, r2
 8002878:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800287c:	653b      	str	r3, [r7, #80]	@ 0x50
 800287e:	2300      	movs	r3, #0
 8002880:	657b      	str	r3, [r7, #84]	@ 0x54
 8002882:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002886:	4642      	mov	r2, r8
 8002888:	464b      	mov	r3, r9
 800288a:	f04f 0000 	mov.w	r0, #0
 800288e:	f04f 0100 	mov.w	r1, #0
 8002892:	0159      	lsls	r1, r3, #5
 8002894:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002898:	0150      	lsls	r0, r2, #5
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4641      	mov	r1, r8
 80028a0:	1a51      	subs	r1, r2, r1
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	4649      	mov	r1, r9
 80028a6:	eb63 0301 	sbc.w	r3, r3, r1
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80028b8:	4659      	mov	r1, fp
 80028ba:	018b      	lsls	r3, r1, #6
 80028bc:	4651      	mov	r1, sl
 80028be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028c2:	4651      	mov	r1, sl
 80028c4:	018a      	lsls	r2, r1, #6
 80028c6:	4651      	mov	r1, sl
 80028c8:	1a54      	subs	r4, r2, r1
 80028ca:	4659      	mov	r1, fp
 80028cc:	eb63 0501 	sbc.w	r5, r3, r1
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	00eb      	lsls	r3, r5, #3
 80028da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028de:	00e2      	lsls	r2, r4, #3
 80028e0:	4614      	mov	r4, r2
 80028e2:	461d      	mov	r5, r3
 80028e4:	4643      	mov	r3, r8
 80028e6:	18e3      	adds	r3, r4, r3
 80028e8:	603b      	str	r3, [r7, #0]
 80028ea:	464b      	mov	r3, r9
 80028ec:	eb45 0303 	adc.w	r3, r5, r3
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028fe:	4629      	mov	r1, r5
 8002900:	028b      	lsls	r3, r1, #10
 8002902:	4621      	mov	r1, r4
 8002904:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002908:	4621      	mov	r1, r4
 800290a:	028a      	lsls	r2, r1, #10
 800290c:	4610      	mov	r0, r2
 800290e:	4619      	mov	r1, r3
 8002910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002914:	2200      	movs	r2, #0
 8002916:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002918:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800291a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800291e:	f7fd ffd5 	bl	80008cc <__aeabi_uldivmod>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4613      	mov	r3, r2
 8002928:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800292c:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x458>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	0f1b      	lsrs	r3, r3, #28
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800293a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800293e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002942:	fbb2 f3f3 	udiv	r3, r2, r3
 8002946:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800294a:	e003      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800294c:	4b06      	ldr	r3, [pc, #24]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x45c>)
 800294e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002952:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002954:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002958:	4618      	mov	r0, r3
 800295a:	37b8      	adds	r7, #184	@ 0xb8
 800295c:	46bd      	mov	sp, r7
 800295e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800
 8002968:	00f42400 	.word	0x00f42400

0800296c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e28d      	b.n	8002e9a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 8083 	beq.w	8002a92 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800298c:	4b94      	ldr	r3, [pc, #592]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 030c 	and.w	r3, r3, #12
 8002994:	2b04      	cmp	r3, #4
 8002996:	d019      	beq.n	80029cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002998:	4b91      	ldr	r3, [pc, #580]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d106      	bne.n	80029b2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029a4:	4b8e      	ldr	r3, [pc, #568]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029b0:	d00c      	beq.n	80029cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029b2:	4b8b      	ldr	r3, [pc, #556]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029ba:	2b0c      	cmp	r3, #12
 80029bc:	d112      	bne.n	80029e4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029be:	4b88      	ldr	r3, [pc, #544]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029ca:	d10b      	bne.n	80029e4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029cc:	4b84      	ldr	r3, [pc, #528]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d05b      	beq.n	8002a90 <HAL_RCC_OscConfig+0x124>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d157      	bne.n	8002a90 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e25a      	b.n	8002e9a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029ec:	d106      	bne.n	80029fc <HAL_RCC_OscConfig+0x90>
 80029ee:	4b7c      	ldr	r3, [pc, #496]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a7b      	ldr	r2, [pc, #492]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 80029f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	e01d      	b.n	8002a38 <HAL_RCC_OscConfig+0xcc>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a04:	d10c      	bne.n	8002a20 <HAL_RCC_OscConfig+0xb4>
 8002a06:	4b76      	ldr	r3, [pc, #472]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a75      	ldr	r2, [pc, #468]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002a0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	4b73      	ldr	r3, [pc, #460]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a72      	ldr	r2, [pc, #456]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	e00b      	b.n	8002a38 <HAL_RCC_OscConfig+0xcc>
 8002a20:	4b6f      	ldr	r3, [pc, #444]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a6e      	ldr	r2, [pc, #440]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002a26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	4b6c      	ldr	r3, [pc, #432]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a6b      	ldr	r2, [pc, #428]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002a32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d013      	beq.n	8002a68 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7fe fe5c 	bl	80016fc <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a48:	f7fe fe58 	bl	80016fc <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	@ 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e21f      	b.n	8002e9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5a:	4b61      	ldr	r3, [pc, #388]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0xdc>
 8002a66:	e014      	b.n	8002a92 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a68:	f7fe fe48 	bl	80016fc <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a70:	f7fe fe44 	bl	80016fc <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b64      	cmp	r3, #100	@ 0x64
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e20b      	b.n	8002e9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a82:	4b57      	ldr	r3, [pc, #348]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0x104>
 8002a8e:	e000      	b.n	8002a92 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d06f      	beq.n	8002b7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a9e:	4b50      	ldr	r3, [pc, #320]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d017      	beq.n	8002ada <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002aaa:	4b4d      	ldr	r3, [pc, #308]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d105      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00b      	beq.n	8002ada <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ac2:	4b47      	ldr	r3, [pc, #284]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002aca:	2b0c      	cmp	r3, #12
 8002acc:	d11c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ace:	4b44      	ldr	r3, [pc, #272]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d116      	bne.n	8002b08 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ada:	4b41      	ldr	r3, [pc, #260]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d005      	beq.n	8002af2 <HAL_RCC_OscConfig+0x186>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d001      	beq.n	8002af2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e1d3      	b.n	8002e9a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af2:	4b3b      	ldr	r3, [pc, #236]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4937      	ldr	r1, [pc, #220]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b06:	e03a      	b.n	8002b7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d020      	beq.n	8002b52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b10:	4b34      	ldr	r3, [pc, #208]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b16:	f7fe fdf1 	bl	80016fc <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b1e:	f7fe fded 	bl	80016fc <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e1b4      	b.n	8002e9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b30:	4b2b      	ldr	r3, [pc, #172]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3c:	4b28      	ldr	r3, [pc, #160]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4925      	ldr	r1, [pc, #148]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	600b      	str	r3, [r1, #0]
 8002b50:	e015      	b.n	8002b7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b52:	4b24      	ldr	r3, [pc, #144]	@ (8002be4 <HAL_RCC_OscConfig+0x278>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe fdd0 	bl	80016fc <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b60:	f7fe fdcc 	bl	80016fc <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e193      	b.n	8002e9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b72:	4b1b      	ldr	r3, [pc, #108]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d036      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d016      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b92:	4b15      	ldr	r3, [pc, #84]	@ (8002be8 <HAL_RCC_OscConfig+0x27c>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b98:	f7fe fdb0 	bl	80016fc <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba0:	f7fe fdac 	bl	80016fc <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e173      	b.n	8002e9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <HAL_RCC_OscConfig+0x274>)
 8002bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x234>
 8002bbe:	e01b      	b.n	8002bf8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc0:	4b09      	ldr	r3, [pc, #36]	@ (8002be8 <HAL_RCC_OscConfig+0x27c>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc6:	f7fe fd99 	bl	80016fc <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bcc:	e00e      	b.n	8002bec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bce:	f7fe fd95 	bl	80016fc <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d907      	bls.n	8002bec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e15c      	b.n	8002e9a <HAL_RCC_OscConfig+0x52e>
 8002be0:	40023800 	.word	0x40023800
 8002be4:	42470000 	.word	0x42470000
 8002be8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bec:	4b8a      	ldr	r3, [pc, #552]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1ea      	bne.n	8002bce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 8097 	beq.w	8002d34 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c0a:	4b83      	ldr	r3, [pc, #524]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10f      	bne.n	8002c36 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c26:	4b7c      	ldr	r3, [pc, #496]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c32:	2301      	movs	r3, #1
 8002c34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c36:	4b79      	ldr	r3, [pc, #484]	@ (8002e1c <HAL_RCC_OscConfig+0x4b0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d118      	bne.n	8002c74 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c42:	4b76      	ldr	r3, [pc, #472]	@ (8002e1c <HAL_RCC_OscConfig+0x4b0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a75      	ldr	r2, [pc, #468]	@ (8002e1c <HAL_RCC_OscConfig+0x4b0>)
 8002c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c4e:	f7fe fd55 	bl	80016fc <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c56:	f7fe fd51 	bl	80016fc <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e118      	b.n	8002e9a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c68:	4b6c      	ldr	r3, [pc, #432]	@ (8002e1c <HAL_RCC_OscConfig+0x4b0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f0      	beq.n	8002c56 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d106      	bne.n	8002c8a <HAL_RCC_OscConfig+0x31e>
 8002c7c:	4b66      	ldr	r3, [pc, #408]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c80:	4a65      	ldr	r2, [pc, #404]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c88:	e01c      	b.n	8002cc4 <HAL_RCC_OscConfig+0x358>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2b05      	cmp	r3, #5
 8002c90:	d10c      	bne.n	8002cac <HAL_RCC_OscConfig+0x340>
 8002c92:	4b61      	ldr	r3, [pc, #388]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c96:	4a60      	ldr	r2, [pc, #384]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002c98:	f043 0304 	orr.w	r3, r3, #4
 8002c9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c9e:	4b5e      	ldr	r3, [pc, #376]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca2:	4a5d      	ldr	r2, [pc, #372]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002caa:	e00b      	b.n	8002cc4 <HAL_RCC_OscConfig+0x358>
 8002cac:	4b5a      	ldr	r3, [pc, #360]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb0:	4a59      	ldr	r2, [pc, #356]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002cb2:	f023 0301 	bic.w	r3, r3, #1
 8002cb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb8:	4b57      	ldr	r3, [pc, #348]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cbc:	4a56      	ldr	r2, [pc, #344]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002cbe:	f023 0304 	bic.w	r3, r3, #4
 8002cc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d015      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ccc:	f7fe fd16 	bl	80016fc <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd2:	e00a      	b.n	8002cea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd4:	f7fe fd12 	bl	80016fc <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e0d7      	b.n	8002e9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cea:	4b4b      	ldr	r3, [pc, #300]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0ee      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x368>
 8002cf6:	e014      	b.n	8002d22 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf8:	f7fe fd00 	bl	80016fc <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cfe:	e00a      	b.n	8002d16 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d00:	f7fe fcfc 	bl	80016fc <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e0c1      	b.n	8002e9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d16:	4b40      	ldr	r3, [pc, #256]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1ee      	bne.n	8002d00 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d22:	7dfb      	ldrb	r3, [r7, #23]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d105      	bne.n	8002d34 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d28:	4b3b      	ldr	r3, [pc, #236]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2c:	4a3a      	ldr	r2, [pc, #232]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002d2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 80ad 	beq.w	8002e98 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d3e:	4b36      	ldr	r3, [pc, #216]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 030c 	and.w	r3, r3, #12
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d060      	beq.n	8002e0c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d145      	bne.n	8002dde <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d52:	4b33      	ldr	r3, [pc, #204]	@ (8002e20 <HAL_RCC_OscConfig+0x4b4>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d58:	f7fe fcd0 	bl	80016fc <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d60:	f7fe fccc 	bl	80016fc <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e093      	b.n	8002e9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d72:	4b29      	ldr	r3, [pc, #164]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69da      	ldr	r2, [r3, #28]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	019b      	lsls	r3, r3, #6
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d94:	085b      	lsrs	r3, r3, #1
 8002d96:	3b01      	subs	r3, #1
 8002d98:	041b      	lsls	r3, r3, #16
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da0:	061b      	lsls	r3, r3, #24
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da8:	071b      	lsls	r3, r3, #28
 8002daa:	491b      	ldr	r1, [pc, #108]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e20 <HAL_RCC_OscConfig+0x4b4>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db6:	f7fe fca1 	bl	80016fc <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dbe:	f7fe fc9d 	bl	80016fc <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e064      	b.n	8002e9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd0:	4b11      	ldr	r3, [pc, #68]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0x452>
 8002ddc:	e05c      	b.n	8002e98 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dde:	4b10      	ldr	r3, [pc, #64]	@ (8002e20 <HAL_RCC_OscConfig+0x4b4>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7fe fc8a 	bl	80016fc <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dec:	f7fe fc86 	bl	80016fc <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e04d      	b.n	8002e9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfe:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <HAL_RCC_OscConfig+0x4ac>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x480>
 8002e0a:	e045      	b.n	8002e98 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d107      	bne.n	8002e24 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e040      	b.n	8002e9a <HAL_RCC_OscConfig+0x52e>
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40007000 	.word	0x40007000
 8002e20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e24:	4b1f      	ldr	r3, [pc, #124]	@ (8002ea4 <HAL_RCC_OscConfig+0x538>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d030      	beq.n	8002e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d129      	bne.n	8002e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d122      	bne.n	8002e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e54:	4013      	ands	r3, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d119      	bne.n	8002e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6a:	085b      	lsrs	r3, r3, #1
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d10f      	bne.n	8002e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d107      	bne.n	8002e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800

08002ea8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e022      	b.n	8002f00 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d105      	bne.n	8002ed2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7fe fa1f 	bl	8001310 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f814 	bl	8002f08 <HAL_SD_InitCard>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e00a      	b.n	8002f00 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002f08:	b5b0      	push	{r4, r5, r7, lr}
 8002f0a:	b08e      	sub	sp, #56	@ 0x38
 8002f0c:	af04      	add	r7, sp, #16
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002f24:	2376      	movs	r3, #118	@ 0x76
 8002f26:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681d      	ldr	r5, [r3, #0]
 8002f2c:	466c      	mov	r4, sp
 8002f2e:	f107 0314 	add.w	r3, r7, #20
 8002f32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002f3a:	f107 0308 	add.w	r3, r7, #8
 8002f3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f40:	4628      	mov	r0, r5
 8002f42:	f001 fd47 	bl	80049d4 <SDIO_Init>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8002f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e04f      	b.n	8002ff8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002f58:	4b29      	ldr	r3, [pc, #164]	@ (8003000 <HAL_SD_InitCard+0xf8>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f001 fd7f 	bl	8004a66 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002f68:	4b25      	ldr	r3, [pc, #148]	@ (8003000 <HAL_SD_InitCard+0xf8>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002f6e:	2002      	movs	r0, #2
 8002f70:	f7fe fbd0 	bl	8001714 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 ff03 	bl	8003d80 <SD_PowerON>
 8002f7a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00b      	beq.n	8002f9a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e02e      	b.n	8002ff8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fe22 	bl	8003be4 <SD_InitCard>
 8002fa0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00b      	beq.n	8002fc0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e01b      	b.n	8002ff8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f001 fdde 	bl	8004b8a <SDMMC_CmdBlockLength>
 8002fce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00f      	beq.n	8002ff6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a0a      	ldr	r2, [pc, #40]	@ (8003004 <HAL_SD_InitCard+0xfc>)
 8002fdc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3728      	adds	r7, #40	@ 0x28
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8003000:	422580a0 	.word	0x422580a0
 8003004:	004005ff 	.word	0x004005ff

08003008 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b092      	sub	sp, #72	@ 0x48
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003016:	f7fe fb71 	bl	80016fc <HAL_GetTick>
 800301a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d107      	bne.n	800303a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800302e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e1bd      	b.n	80033b6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b01      	cmp	r3, #1
 8003044:	f040 81b0 	bne.w	80033a8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800304e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	441a      	add	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003058:	429a      	cmp	r2, r3
 800305a:	d907      	bls.n	800306c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003060:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e1a4      	b.n	80033b6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2203      	movs	r2, #3
 8003070:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2200      	movs	r2, #0
 800307a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003080:	2b01      	cmp	r3, #1
 8003082:	d002      	beq.n	800308a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003086:	025b      	lsls	r3, r3, #9
 8003088:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800308a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800308e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	025b      	lsls	r3, r3, #9
 8003094:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003096:	2390      	movs	r3, #144	@ 0x90
 8003098:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800309a:	2302      	movs	r3, #2
 800309c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800309e:	2300      	movs	r3, #0
 80030a0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80030a2:	2301      	movs	r3, #1
 80030a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f107 0214 	add.w	r2, r7, #20
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f001 fd3e 	bl	8004b32 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d90a      	bls.n	80030d2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2202      	movs	r2, #2
 80030c0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030c8:	4618      	mov	r0, r3
 80030ca:	f001 fda2 	bl	8004c12 <SDMMC_CmdReadMultiBlock>
 80030ce:	6478      	str	r0, [r7, #68]	@ 0x44
 80030d0:	e009      	b.n	80030e6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030de:	4618      	mov	r0, r3
 80030e0:	f001 fd75 	bl	8004bce <SDMMC_CmdReadSingleBlock>
 80030e4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80030e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d012      	beq.n	8003112 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a7a      	ldr	r2, [pc, #488]	@ (80032dc <HAL_SD_ReadBlocks+0x2d4>)
 80030f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030fa:	431a      	orrs	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e151      	b.n	80033b6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003116:	e061      	b.n	80031dc <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800311e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d03c      	beq.n	80031a0 <HAL_SD_ReadBlocks+0x198>
 8003126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d039      	beq.n	80031a0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800312c:	2300      	movs	r3, #0
 800312e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003130:	e033      	b.n	800319a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f001 fc77 	bl	8004a2a <SDIO_ReadFIFO>
 800313c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800313e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003140:	b2da      	uxtb	r2, r3
 8003142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003144:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003148:	3301      	adds	r3, #1
 800314a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800314c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800314e:	3b01      	subs	r3, #1
 8003150:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003154:	0a1b      	lsrs	r3, r3, #8
 8003156:	b2da      	uxtb	r2, r3
 8003158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800315a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800315c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800315e:	3301      	adds	r3, #1
 8003160:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003164:	3b01      	subs	r3, #1
 8003166:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800316a:	0c1b      	lsrs	r3, r3, #16
 800316c:	b2da      	uxtb	r2, r3
 800316e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003170:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003174:	3301      	adds	r3, #1
 8003176:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800317a:	3b01      	subs	r3, #1
 800317c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800317e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003180:	0e1b      	lsrs	r3, r3, #24
 8003182:	b2da      	uxtb	r2, r3
 8003184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003186:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800318a:	3301      	adds	r3, #1
 800318c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800318e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003190:	3b01      	subs	r3, #1
 8003192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8003194:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003196:	3301      	adds	r3, #1
 8003198:	643b      	str	r3, [r7, #64]	@ 0x40
 800319a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800319c:	2b07      	cmp	r3, #7
 800319e:	d9c8      	bls.n	8003132 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80031a0:	f7fe faac 	bl	80016fc <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d902      	bls.n	80031b6 <HAL_SD_ReadBlocks+0x1ae>
 80031b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d112      	bne.n	80031dc <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a48      	ldr	r2, [pc, #288]	@ (80032dc <HAL_SD_ReadBlocks+0x2d4>)
 80031bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e0ec      	b.n	80033b6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031e2:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d096      	beq.n	8003118 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d022      	beq.n	800323e <HAL_SD_ReadBlocks+0x236>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d91f      	bls.n	800323e <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003202:	2b03      	cmp	r3, #3
 8003204:	d01b      	beq.n	800323e <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f001 fd68 	bl	8004ce0 <SDMMC_CmdStopTransfer>
 8003210:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003212:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003214:	2b00      	cmp	r3, #0
 8003216:	d012      	beq.n	800323e <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a2f      	ldr	r2, [pc, #188]	@ (80032dc <HAL_SD_ReadBlocks+0x2d4>)
 800321e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003224:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003226:	431a      	orrs	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e0bb      	b.n	80033b6 <HAL_SD_ReadBlocks+0x3ae>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d012      	beq.n	8003272 <HAL_SD_ReadBlocks+0x26a>
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a22      	ldr	r2, [pc, #136]	@ (80032dc <HAL_SD_ReadBlocks+0x2d4>)
 8003252:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003258:	f043 0208 	orr.w	r2, r3, #8
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e0a1      	b.n	80033b6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d012      	beq.n	80032a6 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a15      	ldr	r2, [pc, #84]	@ (80032dc <HAL_SD_ReadBlocks+0x2d4>)
 8003286:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328c:	f043 0202 	orr.w	r2, r3, #2
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e087      	b.n	80033b6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d064      	beq.n	800337e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a08      	ldr	r2, [pc, #32]	@ (80032dc <HAL_SD_ReadBlocks+0x2d4>)
 80032ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c0:	f043 0220 	orr.w	r2, r3, #32
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e06d      	b.n	80033b6 <HAL_SD_ReadBlocks+0x3ae>
 80032da:	bf00      	nop
 80032dc:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f001 fba0 	bl	8004a2a <SDIO_ReadFIFO>
 80032ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80032ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032f2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80032f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032f6:	3301      	adds	r3, #1
 80032f8:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80032fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032fc:	3b01      	subs	r3, #1
 80032fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003302:	0a1b      	lsrs	r3, r3, #8
 8003304:	b2da      	uxtb	r2, r3
 8003306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003308:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800330a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330c:	3301      	adds	r3, #1
 800330e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003312:	3b01      	subs	r3, #1
 8003314:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003318:	0c1b      	lsrs	r3, r3, #16
 800331a:	b2da      	uxtb	r2, r3
 800331c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800331e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003322:	3301      	adds	r3, #1
 8003324:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003328:	3b01      	subs	r3, #1
 800332a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800332c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800332e:	0e1b      	lsrs	r3, r3, #24
 8003330:	b2da      	uxtb	r2, r3
 8003332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003334:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003338:	3301      	adds	r3, #1
 800333a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800333c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800333e:	3b01      	subs	r3, #1
 8003340:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003342:	f7fe f9db 	bl	80016fc <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800334e:	429a      	cmp	r2, r3
 8003350:	d902      	bls.n	8003358 <HAL_SD_ReadBlocks+0x350>
 8003352:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003354:	2b00      	cmp	r3, #0
 8003356:	d112      	bne.n	800337e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a18      	ldr	r2, [pc, #96]	@ (80033c0 <HAL_SD_ReadBlocks+0x3b8>)
 800335e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003364:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e01b      	b.n	80033b6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003384:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <HAL_SD_ReadBlocks+0x38a>
 800338c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1a6      	bne.n	80032e0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f240 523a 	movw	r2, #1338	@ 0x53a
 800339a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	e006      	b.n	80033b6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
  }
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3748      	adds	r7, #72	@ 0x48
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	004005ff 	.word	0x004005ff

080033c4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b092      	sub	sp, #72	@ 0x48
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80033d2:	f7fe f993 	bl	80016fc <HAL_GetTick>
 80033d6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d107      	bne.n	80033f6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ea:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e165      	b.n	80036c2 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b01      	cmp	r3, #1
 8003400:	f040 8158 	bne.w	80036b4 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800340a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	441a      	add	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003414:	429a      	cmp	r2, r3
 8003416:	d907      	bls.n	8003428 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e14c      	b.n	80036c2 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2203      	movs	r2, #3
 800342c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2200      	movs	r2, #0
 8003436:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343c:	2b01      	cmp	r3, #1
 800343e:	d002      	beq.n	8003446 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003442:	025b      	lsls	r3, r3, #9
 8003444:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003446:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800344a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	025b      	lsls	r3, r3, #9
 8003450:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003452:	2390      	movs	r3, #144	@ 0x90
 8003454:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003456:	2300      	movs	r3, #0
 8003458:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800345a:	2300      	movs	r3, #0
 800345c:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800345e:	2301      	movs	r3, #1
 8003460:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f107 0218 	add.w	r2, r7, #24
 800346a:	4611      	mov	r1, r2
 800346c:	4618      	mov	r0, r3
 800346e:	f001 fb60 	bl	8004b32 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d90a      	bls.n	800348e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2220      	movs	r2, #32
 800347c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003484:	4618      	mov	r0, r3
 8003486:	f001 fc08 	bl	8004c9a <SDMMC_CmdWriteMultiBlock>
 800348a:	6478      	str	r0, [r7, #68]	@ 0x44
 800348c:	e009      	b.n	80034a2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2210      	movs	r2, #16
 8003492:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800349a:	4618      	mov	r0, r3
 800349c:	f001 fbdb 	bl	8004c56 <SDMMC_CmdWriteSingleBlock>
 80034a0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80034a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d012      	beq.n	80034ce <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a87      	ldr	r2, [pc, #540]	@ (80036cc <HAL_SD_WriteBlocks+0x308>)
 80034ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034b6:	431a      	orrs	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e0f9      	b.n	80036c2 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80034d2:	e065      	b.n	80035a0 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d040      	beq.n	8003564 <HAL_SD_WriteBlocks+0x1a0>
 80034e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d03d      	beq.n	8003564 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80034e8:	2300      	movs	r3, #0
 80034ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80034ec:	e037      	b.n	800355e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80034ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80034f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f6:	3301      	adds	r3, #1
 80034f8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80034fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034fc:	3b01      	subs	r3, #1
 80034fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	021a      	lsls	r2, r3, #8
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	4313      	orrs	r3, r2
 800350a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800350c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800350e:	3301      	adds	r3, #1
 8003510:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003514:	3b01      	subs	r3, #1
 8003516:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	041a      	lsls	r2, r3, #16
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	4313      	orrs	r3, r2
 8003522:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003526:	3301      	adds	r3, #1
 8003528:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800352a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800352c:	3b01      	subs	r3, #1
 800352e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	061a      	lsls	r2, r3, #24
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800353c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800353e:	3301      	adds	r3, #1
 8003540:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003544:	3b01      	subs	r3, #1
 8003546:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f107 0214 	add.w	r2, r7, #20
 8003550:	4611      	mov	r1, r2
 8003552:	4618      	mov	r0, r3
 8003554:	f001 fa76 	bl	8004a44 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003558:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800355a:	3301      	adds	r3, #1
 800355c:	643b      	str	r3, [r7, #64]	@ 0x40
 800355e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003560:	2b07      	cmp	r3, #7
 8003562:	d9c4      	bls.n	80034ee <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003564:	f7fe f8ca 	bl	80016fc <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003570:	429a      	cmp	r2, r3
 8003572:	d902      	bls.n	800357a <HAL_SD_WriteBlocks+0x1b6>
 8003574:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003576:	2b00      	cmp	r3, #0
 8003578:	d112      	bne.n	80035a0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a53      	ldr	r2, [pc, #332]	@ (80036cc <HAL_SD_WriteBlocks+0x308>)
 8003580:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003586:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003588:	431a      	orrs	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e090      	b.n	80036c2 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a6:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d092      	beq.n	80034d4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d022      	beq.n	8003602 <HAL_SD_WriteBlocks+0x23e>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d91f      	bls.n	8003602 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d01b      	beq.n	8003602 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f001 fb86 	bl	8004ce0 <SDMMC_CmdStopTransfer>
 80035d4:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80035d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d012      	beq.n	8003602 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a3a      	ldr	r2, [pc, #232]	@ (80036cc <HAL_SD_WriteBlocks+0x308>)
 80035e2:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035ea:	431a      	orrs	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e05f      	b.n	80036c2 <HAL_SD_WriteBlocks+0x2fe>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d012      	beq.n	8003636 <HAL_SD_WriteBlocks+0x272>
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a2d      	ldr	r2, [pc, #180]	@ (80036cc <HAL_SD_WriteBlocks+0x308>)
 8003616:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361c:	f043 0208 	orr.w	r2, r3, #8
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e045      	b.n	80036c2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d012      	beq.n	800366a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a20      	ldr	r2, [pc, #128]	@ (80036cc <HAL_SD_WriteBlocks+0x308>)
 800364a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003650:	f043 0202 	orr.w	r2, r3, #2
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e02b      	b.n	80036c2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b00      	cmp	r3, #0
 8003676:	d012      	beq.n	800369e <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a13      	ldr	r2, [pc, #76]	@ (80036cc <HAL_SD_WriteBlocks+0x308>)
 800367e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003684:	f043 0210 	orr.w	r2, r3, #16
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e011      	b.n	80036c2 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80036a6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	e006      	b.n	80036c2 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
  }
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3748      	adds	r7, #72	@ 0x48
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	004005ff 	.word	0x004005ff

080036d0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036de:	0f9b      	lsrs	r3, r3, #30
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036ea:	0e9b      	lsrs	r3, r3, #26
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036fc:	0e1b      	lsrs	r3, r3, #24
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	b2da      	uxtb	r2, r3
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800370e:	0c1b      	lsrs	r3, r3, #16
 8003710:	b2da      	uxtb	r2, r3
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800371a:	0a1b      	lsrs	r3, r3, #8
 800371c:	b2da      	uxtb	r2, r3
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003726:	b2da      	uxtb	r2, r3
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003730:	0d1b      	lsrs	r3, r3, #20
 8003732:	b29a      	uxth	r2, r3
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	b2db      	uxtb	r3, r3
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	b2da      	uxtb	r2, r3
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800374e:	0bdb      	lsrs	r3, r3, #15
 8003750:	b2db      	uxtb	r3, r3
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	b2da      	uxtb	r2, r3
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003760:	0b9b      	lsrs	r3, r3, #14
 8003762:	b2db      	uxtb	r3, r3
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	b2da      	uxtb	r2, r3
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003772:	0b5b      	lsrs	r3, r3, #13
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	b2da      	uxtb	r2, r3
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003784:	0b1b      	lsrs	r3, r3, #12
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	b2da      	uxtb	r2, r3
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2200      	movs	r2, #0
 8003796:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379c:	2b00      	cmp	r3, #0
 800379e:	d163      	bne.n	8003868 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037a4:	009a      	lsls	r2, r3, #2
 80037a6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037aa:	4013      	ands	r3, r2
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80037b0:	0f92      	lsrs	r2, r2, #30
 80037b2:	431a      	orrs	r2, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037bc:	0edb      	lsrs	r3, r3, #27
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037ce:	0e1b      	lsrs	r3, r3, #24
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037e0:	0d5b      	lsrs	r3, r3, #21
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037f2:	0c9b      	lsrs	r3, r3, #18
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003804:	0bdb      	lsrs	r3, r3, #15
 8003806:	b2db      	uxtb	r3, r3
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	b2da      	uxtb	r2, r3
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	7e1b      	ldrb	r3, [r3, #24]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	3302      	adds	r3, #2
 8003828:	2201      	movs	r2, #1
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003832:	fb03 f202 	mul.w	r2, r3, r2
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	7a1b      	ldrb	r3, [r3, #8]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	f003 030f 	and.w	r3, r3, #15
 8003844:	2201      	movs	r2, #1
 8003846:	409a      	lsls	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003854:	0a52      	lsrs	r2, r2, #9
 8003856:	fb03 f202 	mul.w	r2, r3, r2
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003864:	661a      	str	r2, [r3, #96]	@ 0x60
 8003866:	e031      	b.n	80038cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386c:	2b01      	cmp	r3, #1
 800386e:	d11d      	bne.n	80038ac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003874:	041b      	lsls	r3, r3, #16
 8003876:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800387e:	0c1b      	lsrs	r3, r3, #16
 8003880:	431a      	orrs	r2, r3
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	3301      	adds	r3, #1
 800388c:	029a      	lsls	r2, r3, #10
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038a0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	661a      	str	r2, [r3, #96]	@ 0x60
 80038aa:	e00f      	b.n	80038cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a58      	ldr	r2, [pc, #352]	@ (8003a14 <HAL_SD_GetCardCSD+0x344>)
 80038b2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e09d      	b.n	8003a08 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038d0:	0b9b      	lsrs	r3, r3, #14
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038e2:	09db      	lsrs	r3, r3, #7
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003904:	0fdb      	lsrs	r3, r3, #31
 8003906:	b2da      	uxtb	r2, r3
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003910:	0f5b      	lsrs	r3, r3, #29
 8003912:	b2db      	uxtb	r3, r3
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	b2da      	uxtb	r2, r3
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003922:	0e9b      	lsrs	r3, r3, #26
 8003924:	b2db      	uxtb	r3, r3
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	b2da      	uxtb	r2, r3
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003934:	0d9b      	lsrs	r3, r3, #22
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	b2da      	uxtb	r2, r3
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003946:	0d5b      	lsrs	r3, r3, #21
 8003948:	b2db      	uxtb	r3, r3
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	b2da      	uxtb	r2, r3
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003962:	0c1b      	lsrs	r3, r3, #16
 8003964:	b2db      	uxtb	r3, r3
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	b2da      	uxtb	r2, r3
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003976:	0bdb      	lsrs	r3, r3, #15
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	b2da      	uxtb	r2, r3
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398a:	0b9b      	lsrs	r3, r3, #14
 800398c:	b2db      	uxtb	r3, r3
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	b2da      	uxtb	r2, r3
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800399e:	0b5b      	lsrs	r3, r3, #13
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b2:	0b1b      	lsrs	r3, r3, #12
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c6:	0a9b      	lsrs	r3, r3, #10
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039da:	0a1b      	lsrs	r3, r3, #8
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ee:	085b      	lsrs	r3, r3, #1
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	004005ff 	.word	0x004005ff

08003a18 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003a70:	b5b0      	push	{r4, r5, r7, lr}
 8003a72:	b08e      	sub	sp, #56	@ 0x38
 8003a74:	af04      	add	r7, sp, #16
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2203      	movs	r2, #3
 8003a84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d02e      	beq.n	8003aee <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a96:	d106      	bne.n	8003aa6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	639a      	str	r2, [r3, #56]	@ 0x38
 8003aa4:	e029      	b.n	8003afa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aac:	d10a      	bne.n	8003ac4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fa1c 	bl	8003eec <SD_WideBus_Enable>
 8003ab4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ac2:	e01a      	b.n	8003afa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10a      	bne.n	8003ae0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fa59 	bl	8003f82 <SD_WideBus_Disable>
 8003ad0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ade:	e00c      	b.n	8003afa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	639a      	str	r2, [r3, #56]	@ 0x38
 8003aec:	e005      	b.n	8003afa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00b      	beq.n	8003b1a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a26      	ldr	r2, [pc, #152]	@ (8003ba0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003b08:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003b18:	e01f      	b.n	8003b5a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681d      	ldr	r5, [r3, #0]
 8003b40:	466c      	mov	r4, sp
 8003b42:	f107 0314 	add.w	r3, r7, #20
 8003b46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003b4e:	f107 0308 	add.w	r3, r7, #8
 8003b52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b54:	4628      	mov	r0, r5
 8003b56:	f000 ff3d 	bl	80049d4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003b62:	4618      	mov	r0, r3
 8003b64:	f001 f811 	bl	8004b8a <SDMMC_CmdBlockLength>
 8003b68:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00c      	beq.n	8003b8a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003b76:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8003b92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3728      	adds	r7, #40	@ 0x28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	004005ff 	.word	0x004005ff

08003ba4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003bb0:	f107 030c 	add.w	r3, r7, #12
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f970 	bl	8003e9c <SD_SendStatus>
 8003bbc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	0a5b      	lsrs	r3, r3, #9
 8003bd4:	f003 030f 	and.w	r3, r3, #15
 8003bd8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003bda:	693b      	ldr	r3, [r7, #16]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003be4:	b5b0      	push	{r4, r5, r7, lr}
 8003be6:	b094      	sub	sp, #80	@ 0x50
 8003be8:	af04      	add	r7, sp, #16
 8003bea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003bec:	2301      	movs	r3, #1
 8003bee:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 ff44 	bl	8004a82 <SDIO_GetPowerState>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d102      	bne.n	8003c06 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003c00:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003c04:	e0b8      	b.n	8003d78 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d02f      	beq.n	8003c6e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f001 f96e 	bl	8004ef4 <SDMMC_CmdSendCID>
 8003c18:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <SD_InitCard+0x40>
    {
      return errorstate;
 8003c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c22:	e0a9      	b.n	8003d78 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2100      	movs	r1, #0
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 ff6e 	bl	8004b0c <SDIO_GetResponse>
 8003c30:	4602      	mov	r2, r0
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2104      	movs	r1, #4
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 ff65 	bl	8004b0c <SDIO_GetResponse>
 8003c42:	4602      	mov	r2, r0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2108      	movs	r1, #8
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 ff5c 	bl	8004b0c <SDIO_GetResponse>
 8003c54:	4602      	mov	r2, r0
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	210c      	movs	r1, #12
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 ff53 	bl	8004b0c <SDIO_GetResponse>
 8003c66:	4602      	mov	r2, r0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d00d      	beq.n	8003c92 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f107 020e 	add.w	r2, r7, #14
 8003c7e:	4611      	mov	r1, r2
 8003c80:	4618      	mov	r0, r3
 8003c82:	f001 f974 	bl	8004f6e <SDMMC_CmdSetRelAdd>
 8003c86:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <SD_InitCard+0xae>
    {
      return errorstate;
 8003c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c90:	e072      	b.n	8003d78 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d036      	beq.n	8003d08 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003c9a:	89fb      	ldrh	r3, [r7, #14]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003caa:	041b      	lsls	r3, r3, #16
 8003cac:	4619      	mov	r1, r3
 8003cae:	4610      	mov	r0, r2
 8003cb0:	f001 f93e 	bl	8004f30 <SDMMC_CmdSendCSD>
 8003cb4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cbe:	e05b      	b.n	8003d78 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 ff20 	bl	8004b0c <SDIO_GetResponse>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2104      	movs	r1, #4
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 ff17 	bl	8004b0c <SDIO_GetResponse>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2108      	movs	r1, #8
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 ff0e 	bl	8004b0c <SDIO_GetResponse>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	210c      	movs	r1, #12
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 ff05 	bl	8004b0c <SDIO_GetResponse>
 8003d02:	4602      	mov	r2, r0
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2104      	movs	r1, #4
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fefc 	bl	8004b0c <SDIO_GetResponse>
 8003d14:	4603      	mov	r3, r0
 8003d16:	0d1a      	lsrs	r2, r3, #20
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003d1c:	f107 0310 	add.w	r3, r7, #16
 8003d20:	4619      	mov	r1, r3
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff fcd4 	bl	80036d0 <HAL_SD_GetCardCSD>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d2e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003d32:	e021      	b.n	8003d78 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6819      	ldr	r1, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d3c:	041b      	lsls	r3, r3, #16
 8003d3e:	2200      	movs	r2, #0
 8003d40:	461c      	mov	r4, r3
 8003d42:	4615      	mov	r5, r2
 8003d44:	4622      	mov	r2, r4
 8003d46:	462b      	mov	r3, r5
 8003d48:	4608      	mov	r0, r1
 8003d4a:	f000 ffeb 	bl	8004d24 <SDMMC_CmdSelDesel>
 8003d4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <SD_InitCard+0x176>
  {
    return errorstate;
 8003d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d58:	e00e      	b.n	8003d78 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681d      	ldr	r5, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	466c      	mov	r4, sp
 8003d62:	f103 0210 	add.w	r2, r3, #16
 8003d66:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d70:	4628      	mov	r0, r5
 8003d72:	f000 fe2f 	bl	80049d4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3740      	adds	r7, #64	@ 0x40
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bdb0      	pop	{r4, r5, r7, pc}

08003d80 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	2300      	movs	r3, #0
 8003d92:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 ffe6 	bl	8004d6a <SDMMC_CmdGoIdleState>
 8003d9e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <SD_PowerON+0x2a>
  {
    return errorstate;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	e072      	b.n	8003e90 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fff9 	bl	8004da6 <SDMMC_CmdOperCond>
 8003db4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00d      	beq.n	8003dd8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 ffcf 	bl	8004d6a <SDMMC_CmdGoIdleState>
 8003dcc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d004      	beq.n	8003dde <SD_PowerON+0x5e>
    {
      return errorstate;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	e05b      	b.n	8003e90 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d137      	bne.n	8003e56 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2100      	movs	r1, #0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fff9 	bl	8004de4 <SDMMC_CmdAppCommand>
 8003df2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d02d      	beq.n	8003e56 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003dfa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003dfe:	e047      	b.n	8003e90 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2100      	movs	r1, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 ffec 	bl	8004de4 <SDMMC_CmdAppCommand>
 8003e0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <SD_PowerON+0x98>
    {
      return errorstate;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	e03b      	b.n	8003e90 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	491e      	ldr	r1, [pc, #120]	@ (8003e98 <SD_PowerON+0x118>)
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f001 f802 	bl	8004e28 <SDMMC_CmdAppOperCommand>
 8003e24:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e2c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003e30:	e02e      	b.n	8003e90 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2100      	movs	r1, #0
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 fe67 	bl	8004b0c <SDIO_GetResponse>
 8003e3e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	0fdb      	lsrs	r3, r3, #31
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <SD_PowerON+0xcc>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <SD_PowerON+0xce>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	613b      	str	r3, [r7, #16]

    count++;
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	3301      	adds	r3, #1
 8003e54:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d802      	bhi.n	8003e66 <SD_PowerON+0xe6>
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0cc      	beq.n	8003e00 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d902      	bls.n	8003e76 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003e70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e74:	e00c      	b.n	8003e90 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	645a      	str	r2, [r3, #68]	@ 0x44
 8003e86:	e002      	b.n	8003e8e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	c1100000 	.word	0xc1100000

08003e9c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d102      	bne.n	8003eb2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003eac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003eb0:	e018      	b.n	8003ee4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eba:	041b      	lsls	r3, r3, #16
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	f001 f876 	bl	8004fb0 <SDMMC_CmdSendStatus>
 8003ec4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	e009      	b.n	8003ee4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fe18 	bl	8004b0c <SDIO_GetResponse>
 8003edc:	4602      	mov	r2, r0
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	2300      	movs	r3, #0
 8003efa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2100      	movs	r1, #0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fe02 	bl	8004b0c <SDIO_GetResponse>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f12:	d102      	bne.n	8003f1a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003f14:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f18:	e02f      	b.n	8003f7a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003f1a:	f107 030c 	add.w	r3, r7, #12
 8003f1e:	4619      	mov	r1, r3
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f879 	bl	8004018 <SD_FindSCR>
 8003f26:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	e023      	b.n	8003f7a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d01c      	beq.n	8003f76 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f44:	041b      	lsls	r3, r3, #16
 8003f46:	4619      	mov	r1, r3
 8003f48:	4610      	mov	r0, r2
 8003f4a:	f000 ff4b 	bl	8004de4 <SDMMC_CmdAppCommand>
 8003f4e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	e00f      	b.n	8003f7a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2102      	movs	r1, #2
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 ff84 	bl	8004e6e <SDMMC_CmdBusWidth>
 8003f66:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	e003      	b.n	8003f7a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003f72:	2300      	movs	r3, #0
 8003f74:	e001      	b.n	8003f7a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003f76:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b086      	sub	sp, #24
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2100      	movs	r1, #0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 fdb7 	bl	8004b0c <SDIO_GetResponse>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fa8:	d102      	bne.n	8003fb0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003faa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003fae:	e02f      	b.n	8004010 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003fb0:	f107 030c 	add.w	r3, r7, #12
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f82e 	bl	8004018 <SD_FindSCR>
 8003fbc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	e023      	b.n	8004010 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d01c      	beq.n	800400c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fda:	041b      	lsls	r3, r3, #16
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4610      	mov	r0, r2
 8003fe0:	f000 ff00 	bl	8004de4 <SDMMC_CmdAppCommand>
 8003fe4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	e00f      	b.n	8004010 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 ff39 	bl	8004e6e <SDMMC_CmdBusWidth>
 8003ffc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	e003      	b.n	8004010 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004008:	2300      	movs	r3, #0
 800400a:	e001      	b.n	8004010 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800400c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004018:	b590      	push	{r4, r7, lr}
 800401a:	b08f      	sub	sp, #60	@ 0x3c
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004022:	f7fd fb6b 	bl	80016fc <HAL_GetTick>
 8004026:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800402c:	2300      	movs	r3, #0
 800402e:	60bb      	str	r3, [r7, #8]
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2108      	movs	r1, #8
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fda3 	bl	8004b8a <SDMMC_CmdBlockLength>
 8004044:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <SD_FindSCR+0x38>
  {
    return errorstate;
 800404c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404e:	e0b2      	b.n	80041b6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004058:	041b      	lsls	r3, r3, #16
 800405a:	4619      	mov	r1, r3
 800405c:	4610      	mov	r0, r2
 800405e:	f000 fec1 	bl	8004de4 <SDMMC_CmdAppCommand>
 8004062:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <SD_FindSCR+0x56>
  {
    return errorstate;
 800406a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406c:	e0a3      	b.n	80041b6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800406e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004072:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004074:	2308      	movs	r3, #8
 8004076:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004078:	2330      	movs	r3, #48	@ 0x30
 800407a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800407c:	2302      	movs	r3, #2
 800407e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004080:	2300      	movs	r3, #0
 8004082:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004084:	2301      	movs	r3, #1
 8004086:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f107 0210 	add.w	r2, r7, #16
 8004090:	4611      	mov	r1, r2
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fd4d 	bl	8004b32 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f000 ff08 	bl	8004eb2 <SDMMC_CmdSendSCR>
 80040a2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80040a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d02a      	beq.n	8004100 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80040aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ac:	e083      	b.n	80041b6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00f      	beq.n	80040dc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6819      	ldr	r1, [r3, #0]
 80040c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	f107 0208 	add.w	r2, r7, #8
 80040c8:	18d4      	adds	r4, r2, r3
 80040ca:	4608      	mov	r0, r1
 80040cc:	f000 fcad 	bl	8004a2a <SDIO_ReadFIFO>
 80040d0:	4603      	mov	r3, r0
 80040d2:	6023      	str	r3, [r4, #0]
      index++;
 80040d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d6:	3301      	adds	r3, #1
 80040d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80040da:	e006      	b.n	80040ea <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d012      	beq.n	8004110 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80040ea:	f7fd fb07 	bl	80016fc <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040f8:	d102      	bne.n	8004100 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80040fa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80040fe:	e05a      	b.n	80041b6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004106:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0cf      	beq.n	80040ae <SD_FindSCR+0x96>
 800410e:	e000      	b.n	8004112 <SD_FindSCR+0xfa>
      break;
 8004110:	bf00      	nop
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <SD_FindSCR+0x114>
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2208      	movs	r2, #8
 8004126:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004128:	2308      	movs	r3, #8
 800412a:	e044      	b.n	80041b6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d005      	beq.n	8004146 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2202      	movs	r2, #2
 8004140:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004142:	2302      	movs	r3, #2
 8004144:	e037      	b.n	80041b6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2220      	movs	r2, #32
 800415a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800415c:	2320      	movs	r3, #32
 800415e:	e02a      	b.n	80041b6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004168:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	061a      	lsls	r2, r3, #24
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	021b      	lsls	r3, r3, #8
 8004172:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004176:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	0a1b      	lsrs	r3, r3, #8
 800417c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004180:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	0e1b      	lsrs	r3, r3, #24
 8004186:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800418a:	601a      	str	r2, [r3, #0]
    scr++;
 800418c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800418e:	3304      	adds	r3, #4
 8004190:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	061a      	lsls	r2, r3, #24
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	021b      	lsls	r3, r3, #8
 800419a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800419e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	0a1b      	lsrs	r3, r3, #8
 80041a4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80041a8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	0e1b      	lsrs	r3, r3, #24
 80041ae:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80041b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	373c      	adds	r7, #60	@ 0x3c
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd90      	pop	{r4, r7, pc}

080041be <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b082      	sub	sp, #8
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e042      	b.n	8004256 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d106      	bne.n	80041ea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7fd f939 	bl	800145c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2224      	movs	r2, #36	@ 0x24
 80041ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004200:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f972 	bl	80044ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004216:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695a      	ldr	r2, [r3, #20]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004226:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004236:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b08a      	sub	sp, #40	@ 0x28
 8004262:	af02      	add	r7, sp, #8
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	603b      	str	r3, [r7, #0]
 800426a:	4613      	mov	r3, r2
 800426c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b20      	cmp	r3, #32
 800427c:	d175      	bne.n	800436a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_UART_Transmit+0x2c>
 8004284:	88fb      	ldrh	r3, [r7, #6]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e06e      	b.n	800436c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2221      	movs	r2, #33	@ 0x21
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800429c:	f7fd fa2e 	bl	80016fc <HAL_GetTick>
 80042a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	88fa      	ldrh	r2, [r7, #6]
 80042a6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	88fa      	ldrh	r2, [r7, #6]
 80042ac:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042b6:	d108      	bne.n	80042ca <HAL_UART_Transmit+0x6c>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d104      	bne.n	80042ca <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042c0:	2300      	movs	r3, #0
 80042c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	61bb      	str	r3, [r7, #24]
 80042c8:	e003      	b.n	80042d2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042ce:	2300      	movs	r3, #0
 80042d0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042d2:	e02e      	b.n	8004332 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2200      	movs	r2, #0
 80042dc:	2180      	movs	r1, #128	@ 0x80
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f848 	bl	8004374 <UART_WaitOnFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d005      	beq.n	80042f6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e03a      	b.n	800436c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10b      	bne.n	8004314 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800430a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	3302      	adds	r3, #2
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	e007      	b.n	8004324 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	781a      	ldrb	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	3301      	adds	r3, #1
 8004322:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1cb      	bne.n	80042d4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2200      	movs	r2, #0
 8004344:	2140      	movs	r1, #64	@ 0x40
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 f814 	bl	8004374 <UART_WaitOnFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d005      	beq.n	800435e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e006      	b.n	800436c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	e000      	b.n	800436c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800436a:	2302      	movs	r3, #2
  }
}
 800436c:	4618      	mov	r0, r3
 800436e:	3720      	adds	r7, #32
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004384:	e03b      	b.n	80043fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800438c:	d037      	beq.n	80043fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438e:	f7fd f9b5 	bl	80016fc <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	6a3a      	ldr	r2, [r7, #32]
 800439a:	429a      	cmp	r2, r3
 800439c:	d302      	bcc.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e03a      	b.n	800441e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d023      	beq.n	80043fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b80      	cmp	r3, #128	@ 0x80
 80043ba:	d020      	beq.n	80043fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b40      	cmp	r3, #64	@ 0x40
 80043c0:	d01d      	beq.n	80043fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d116      	bne.n	80043fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f81d 	bl	8004426 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2208      	movs	r2, #8
 80043f0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e00f      	b.n	800441e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4013      	ands	r3, r2
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	429a      	cmp	r2, r3
 800440c:	bf0c      	ite	eq
 800440e:	2301      	moveq	r3, #1
 8004410:	2300      	movne	r3, #0
 8004412:	b2db      	uxtb	r3, r3
 8004414:	461a      	mov	r2, r3
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	429a      	cmp	r2, r3
 800441a:	d0b4      	beq.n	8004386 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004426:	b480      	push	{r7}
 8004428:	b095      	sub	sp, #84	@ 0x54
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	330c      	adds	r3, #12
 8004434:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004438:	e853 3f00 	ldrex	r3, [r3]
 800443c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800443e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004440:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004444:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	330c      	adds	r3, #12
 800444c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800444e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004450:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004454:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800445c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e5      	bne.n	800442e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3314      	adds	r3, #20
 8004468:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	e853 3f00 	ldrex	r3, [r3]
 8004470:	61fb      	str	r3, [r7, #28]
   return(result);
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	f023 0301 	bic.w	r3, r3, #1
 8004478:	64bb      	str	r3, [r7, #72]	@ 0x48
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3314      	adds	r3, #20
 8004480:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004482:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004484:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004486:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004488:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800448a:	e841 2300 	strex	r3, r2, [r1]
 800448e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1e5      	bne.n	8004462 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449a:	2b01      	cmp	r3, #1
 800449c:	d119      	bne.n	80044d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	330c      	adds	r3, #12
 80044a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	e853 3f00 	ldrex	r3, [r3]
 80044ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f023 0310 	bic.w	r3, r3, #16
 80044b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	330c      	adds	r3, #12
 80044bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044be:	61ba      	str	r2, [r7, #24]
 80044c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c2:	6979      	ldr	r1, [r7, #20]
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	e841 2300 	strex	r3, r2, [r1]
 80044ca:	613b      	str	r3, [r7, #16]
   return(result);
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1e5      	bne.n	800449e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044e0:	bf00      	nop
 80044e2:	3754      	adds	r7, #84	@ 0x54
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044f0:	b0c0      	sub	sp, #256	@ 0x100
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004508:	68d9      	ldr	r1, [r3, #12]
 800450a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	ea40 0301 	orr.w	r3, r0, r1
 8004514:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	431a      	orrs	r2, r3
 8004524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	431a      	orrs	r2, r3
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004544:	f021 010c 	bic.w	r1, r1, #12
 8004548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004552:	430b      	orrs	r3, r1
 8004554:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004566:	6999      	ldr	r1, [r3, #24]
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	ea40 0301 	orr.w	r3, r0, r1
 8004572:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	4b8f      	ldr	r3, [pc, #572]	@ (80047b8 <UART_SetConfig+0x2cc>)
 800457c:	429a      	cmp	r2, r3
 800457e:	d005      	beq.n	800458c <UART_SetConfig+0xa0>
 8004580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	4b8d      	ldr	r3, [pc, #564]	@ (80047bc <UART_SetConfig+0x2d0>)
 8004588:	429a      	cmp	r2, r3
 800458a:	d104      	bne.n	8004596 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800458c:	f7fd fc80 	bl	8001e90 <HAL_RCC_GetPCLK2Freq>
 8004590:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004594:	e003      	b.n	800459e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004596:	f7fd fc67 	bl	8001e68 <HAL_RCC_GetPCLK1Freq>
 800459a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800459e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045a8:	f040 810c 	bne.w	80047c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045b0:	2200      	movs	r2, #0
 80045b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80045be:	4622      	mov	r2, r4
 80045c0:	462b      	mov	r3, r5
 80045c2:	1891      	adds	r1, r2, r2
 80045c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80045c6:	415b      	adcs	r3, r3
 80045c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045ce:	4621      	mov	r1, r4
 80045d0:	eb12 0801 	adds.w	r8, r2, r1
 80045d4:	4629      	mov	r1, r5
 80045d6:	eb43 0901 	adc.w	r9, r3, r1
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045ee:	4690      	mov	r8, r2
 80045f0:	4699      	mov	r9, r3
 80045f2:	4623      	mov	r3, r4
 80045f4:	eb18 0303 	adds.w	r3, r8, r3
 80045f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045fc:	462b      	mov	r3, r5
 80045fe:	eb49 0303 	adc.w	r3, r9, r3
 8004602:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004612:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004616:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800461a:	460b      	mov	r3, r1
 800461c:	18db      	adds	r3, r3, r3
 800461e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004620:	4613      	mov	r3, r2
 8004622:	eb42 0303 	adc.w	r3, r2, r3
 8004626:	657b      	str	r3, [r7, #84]	@ 0x54
 8004628:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800462c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004630:	f7fc f94c 	bl	80008cc <__aeabi_uldivmod>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4b61      	ldr	r3, [pc, #388]	@ (80047c0 <UART_SetConfig+0x2d4>)
 800463a:	fba3 2302 	umull	r2, r3, r3, r2
 800463e:	095b      	lsrs	r3, r3, #5
 8004640:	011c      	lsls	r4, r3, #4
 8004642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004646:	2200      	movs	r2, #0
 8004648:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800464c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004650:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004654:	4642      	mov	r2, r8
 8004656:	464b      	mov	r3, r9
 8004658:	1891      	adds	r1, r2, r2
 800465a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800465c:	415b      	adcs	r3, r3
 800465e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004660:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004664:	4641      	mov	r1, r8
 8004666:	eb12 0a01 	adds.w	sl, r2, r1
 800466a:	4649      	mov	r1, r9
 800466c:	eb43 0b01 	adc.w	fp, r3, r1
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800467c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004680:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004684:	4692      	mov	sl, r2
 8004686:	469b      	mov	fp, r3
 8004688:	4643      	mov	r3, r8
 800468a:	eb1a 0303 	adds.w	r3, sl, r3
 800468e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004692:	464b      	mov	r3, r9
 8004694:	eb4b 0303 	adc.w	r3, fp, r3
 8004698:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800469c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80046ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046b0:	460b      	mov	r3, r1
 80046b2:	18db      	adds	r3, r3, r3
 80046b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80046b6:	4613      	mov	r3, r2
 80046b8:	eb42 0303 	adc.w	r3, r2, r3
 80046bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80046be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80046c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80046c6:	f7fc f901 	bl	80008cc <__aeabi_uldivmod>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4611      	mov	r1, r2
 80046d0:	4b3b      	ldr	r3, [pc, #236]	@ (80047c0 <UART_SetConfig+0x2d4>)
 80046d2:	fba3 2301 	umull	r2, r3, r3, r1
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	2264      	movs	r2, #100	@ 0x64
 80046da:	fb02 f303 	mul.w	r3, r2, r3
 80046de:	1acb      	subs	r3, r1, r3
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80046e6:	4b36      	ldr	r3, [pc, #216]	@ (80047c0 <UART_SetConfig+0x2d4>)
 80046e8:	fba3 2302 	umull	r2, r3, r3, r2
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80046f4:	441c      	add	r4, r3
 80046f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004700:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004704:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004708:	4642      	mov	r2, r8
 800470a:	464b      	mov	r3, r9
 800470c:	1891      	adds	r1, r2, r2
 800470e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004710:	415b      	adcs	r3, r3
 8004712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004714:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004718:	4641      	mov	r1, r8
 800471a:	1851      	adds	r1, r2, r1
 800471c:	6339      	str	r1, [r7, #48]	@ 0x30
 800471e:	4649      	mov	r1, r9
 8004720:	414b      	adcs	r3, r1
 8004722:	637b      	str	r3, [r7, #52]	@ 0x34
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004730:	4659      	mov	r1, fp
 8004732:	00cb      	lsls	r3, r1, #3
 8004734:	4651      	mov	r1, sl
 8004736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800473a:	4651      	mov	r1, sl
 800473c:	00ca      	lsls	r2, r1, #3
 800473e:	4610      	mov	r0, r2
 8004740:	4619      	mov	r1, r3
 8004742:	4603      	mov	r3, r0
 8004744:	4642      	mov	r2, r8
 8004746:	189b      	adds	r3, r3, r2
 8004748:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800474c:	464b      	mov	r3, r9
 800474e:	460a      	mov	r2, r1
 8004750:	eb42 0303 	adc.w	r3, r2, r3
 8004754:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004764:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004768:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800476c:	460b      	mov	r3, r1
 800476e:	18db      	adds	r3, r3, r3
 8004770:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004772:	4613      	mov	r3, r2
 8004774:	eb42 0303 	adc.w	r3, r2, r3
 8004778:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800477a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800477e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004782:	f7fc f8a3 	bl	80008cc <__aeabi_uldivmod>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4b0d      	ldr	r3, [pc, #52]	@ (80047c0 <UART_SetConfig+0x2d4>)
 800478c:	fba3 1302 	umull	r1, r3, r3, r2
 8004790:	095b      	lsrs	r3, r3, #5
 8004792:	2164      	movs	r1, #100	@ 0x64
 8004794:	fb01 f303 	mul.w	r3, r1, r3
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	3332      	adds	r3, #50	@ 0x32
 800479e:	4a08      	ldr	r2, [pc, #32]	@ (80047c0 <UART_SetConfig+0x2d4>)
 80047a0:	fba2 2303 	umull	r2, r3, r2, r3
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	f003 0207 	and.w	r2, r3, #7
 80047aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4422      	add	r2, r4
 80047b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047b4:	e106      	b.n	80049c4 <UART_SetConfig+0x4d8>
 80047b6:	bf00      	nop
 80047b8:	40011000 	.word	0x40011000
 80047bc:	40011400 	.word	0x40011400
 80047c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047c8:	2200      	movs	r2, #0
 80047ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80047d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80047d6:	4642      	mov	r2, r8
 80047d8:	464b      	mov	r3, r9
 80047da:	1891      	adds	r1, r2, r2
 80047dc:	6239      	str	r1, [r7, #32]
 80047de:	415b      	adcs	r3, r3
 80047e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80047e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047e6:	4641      	mov	r1, r8
 80047e8:	1854      	adds	r4, r2, r1
 80047ea:	4649      	mov	r1, r9
 80047ec:	eb43 0501 	adc.w	r5, r3, r1
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	00eb      	lsls	r3, r5, #3
 80047fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047fe:	00e2      	lsls	r2, r4, #3
 8004800:	4614      	mov	r4, r2
 8004802:	461d      	mov	r5, r3
 8004804:	4643      	mov	r3, r8
 8004806:	18e3      	adds	r3, r4, r3
 8004808:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800480c:	464b      	mov	r3, r9
 800480e:	eb45 0303 	adc.w	r3, r5, r3
 8004812:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004822:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004832:	4629      	mov	r1, r5
 8004834:	008b      	lsls	r3, r1, #2
 8004836:	4621      	mov	r1, r4
 8004838:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800483c:	4621      	mov	r1, r4
 800483e:	008a      	lsls	r2, r1, #2
 8004840:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004844:	f7fc f842 	bl	80008cc <__aeabi_uldivmod>
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	4b60      	ldr	r3, [pc, #384]	@ (80049d0 <UART_SetConfig+0x4e4>)
 800484e:	fba3 2302 	umull	r2, r3, r3, r2
 8004852:	095b      	lsrs	r3, r3, #5
 8004854:	011c      	lsls	r4, r3, #4
 8004856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800485a:	2200      	movs	r2, #0
 800485c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004860:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004864:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004868:	4642      	mov	r2, r8
 800486a:	464b      	mov	r3, r9
 800486c:	1891      	adds	r1, r2, r2
 800486e:	61b9      	str	r1, [r7, #24]
 8004870:	415b      	adcs	r3, r3
 8004872:	61fb      	str	r3, [r7, #28]
 8004874:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004878:	4641      	mov	r1, r8
 800487a:	1851      	adds	r1, r2, r1
 800487c:	6139      	str	r1, [r7, #16]
 800487e:	4649      	mov	r1, r9
 8004880:	414b      	adcs	r3, r1
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004890:	4659      	mov	r1, fp
 8004892:	00cb      	lsls	r3, r1, #3
 8004894:	4651      	mov	r1, sl
 8004896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800489a:	4651      	mov	r1, sl
 800489c:	00ca      	lsls	r2, r1, #3
 800489e:	4610      	mov	r0, r2
 80048a0:	4619      	mov	r1, r3
 80048a2:	4603      	mov	r3, r0
 80048a4:	4642      	mov	r2, r8
 80048a6:	189b      	adds	r3, r3, r2
 80048a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048ac:	464b      	mov	r3, r9
 80048ae:	460a      	mov	r2, r1
 80048b0:	eb42 0303 	adc.w	r3, r2, r3
 80048b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80048d0:	4649      	mov	r1, r9
 80048d2:	008b      	lsls	r3, r1, #2
 80048d4:	4641      	mov	r1, r8
 80048d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048da:	4641      	mov	r1, r8
 80048dc:	008a      	lsls	r2, r1, #2
 80048de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80048e2:	f7fb fff3 	bl	80008cc <__aeabi_uldivmod>
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	4611      	mov	r1, r2
 80048ec:	4b38      	ldr	r3, [pc, #224]	@ (80049d0 <UART_SetConfig+0x4e4>)
 80048ee:	fba3 2301 	umull	r2, r3, r3, r1
 80048f2:	095b      	lsrs	r3, r3, #5
 80048f4:	2264      	movs	r2, #100	@ 0x64
 80048f6:	fb02 f303 	mul.w	r3, r2, r3
 80048fa:	1acb      	subs	r3, r1, r3
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	3332      	adds	r3, #50	@ 0x32
 8004900:	4a33      	ldr	r2, [pc, #204]	@ (80049d0 <UART_SetConfig+0x4e4>)
 8004902:	fba2 2303 	umull	r2, r3, r2, r3
 8004906:	095b      	lsrs	r3, r3, #5
 8004908:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800490c:	441c      	add	r4, r3
 800490e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004912:	2200      	movs	r2, #0
 8004914:	673b      	str	r3, [r7, #112]	@ 0x70
 8004916:	677a      	str	r2, [r7, #116]	@ 0x74
 8004918:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800491c:	4642      	mov	r2, r8
 800491e:	464b      	mov	r3, r9
 8004920:	1891      	adds	r1, r2, r2
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	415b      	adcs	r3, r3
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800492c:	4641      	mov	r1, r8
 800492e:	1851      	adds	r1, r2, r1
 8004930:	6039      	str	r1, [r7, #0]
 8004932:	4649      	mov	r1, r9
 8004934:	414b      	adcs	r3, r1
 8004936:	607b      	str	r3, [r7, #4]
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004944:	4659      	mov	r1, fp
 8004946:	00cb      	lsls	r3, r1, #3
 8004948:	4651      	mov	r1, sl
 800494a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800494e:	4651      	mov	r1, sl
 8004950:	00ca      	lsls	r2, r1, #3
 8004952:	4610      	mov	r0, r2
 8004954:	4619      	mov	r1, r3
 8004956:	4603      	mov	r3, r0
 8004958:	4642      	mov	r2, r8
 800495a:	189b      	adds	r3, r3, r2
 800495c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800495e:	464b      	mov	r3, r9
 8004960:	460a      	mov	r2, r1
 8004962:	eb42 0303 	adc.w	r3, r2, r3
 8004966:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	663b      	str	r3, [r7, #96]	@ 0x60
 8004972:	667a      	str	r2, [r7, #100]	@ 0x64
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	f04f 0300 	mov.w	r3, #0
 800497c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004980:	4649      	mov	r1, r9
 8004982:	008b      	lsls	r3, r1, #2
 8004984:	4641      	mov	r1, r8
 8004986:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800498a:	4641      	mov	r1, r8
 800498c:	008a      	lsls	r2, r1, #2
 800498e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004992:	f7fb ff9b 	bl	80008cc <__aeabi_uldivmod>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4b0d      	ldr	r3, [pc, #52]	@ (80049d0 <UART_SetConfig+0x4e4>)
 800499c:	fba3 1302 	umull	r1, r3, r3, r2
 80049a0:	095b      	lsrs	r3, r3, #5
 80049a2:	2164      	movs	r1, #100	@ 0x64
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	3332      	adds	r3, #50	@ 0x32
 80049ae:	4a08      	ldr	r2, [pc, #32]	@ (80049d0 <UART_SetConfig+0x4e4>)
 80049b0:	fba2 2303 	umull	r2, r3, r2, r3
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	f003 020f 	and.w	r2, r3, #15
 80049ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4422      	add	r2, r4
 80049c2:	609a      	str	r2, [r3, #8]
}
 80049c4:	bf00      	nop
 80049c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80049ca:	46bd      	mov	sp, r7
 80049cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049d0:	51eb851f 	.word	0x51eb851f

080049d4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80049d4:	b084      	sub	sp, #16
 80049d6:	b480      	push	{r7}
 80049d8:	b085      	sub	sp, #20
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	f107 001c 	add.w	r0, r7, #28
 80049e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80049ea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80049ec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80049ee:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80049f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80049f2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80049f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80049f6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80049f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80049fa:	431a      	orrs	r2, r3
             Init.ClockDiv
 80049fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80049fe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8004a0e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	431a      	orrs	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	b004      	add	sp, #16
 8004a28:	4770      	bx	lr

08004a2a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2203      	movs	r2, #3
 8004a72:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0303 	and.w	r3, r3, #3
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004abc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004ac2:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004ac8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004ad8:	f023 030f 	bic.w	r3, r3, #15
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	b2db      	uxtb	r3, r3
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3314      	adds	r3, #20
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	4413      	add	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
}  
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b085      	sub	sp, #20
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004b58:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004b5e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004b64:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b70:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0

}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b088      	sub	sp, #32
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004b98:	2310      	movs	r3, #16
 8004b9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b9c:	2340      	movs	r3, #64	@ 0x40
 8004b9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ba4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ba8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004baa:	f107 0308 	add.w	r3, r7, #8
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff ff74 	bl	8004a9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bba:	2110      	movs	r1, #16
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fa19 	bl	8004ff4 <SDMMC_GetCmdResp1>
 8004bc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bc4:	69fb      	ldr	r3, [r7, #28]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3720      	adds	r7, #32
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b088      	sub	sp, #32
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004bdc:	2311      	movs	r3, #17
 8004bde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004be0:	2340      	movs	r3, #64	@ 0x40
 8004be2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004be4:	2300      	movs	r3, #0
 8004be6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004be8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bee:	f107 0308 	add.w	r3, r7, #8
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff ff52 	bl	8004a9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bfe:	2111      	movs	r1, #17
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f9f7 	bl	8004ff4 <SDMMC_GetCmdResp1>
 8004c06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c08:	69fb      	ldr	r3, [r7, #28]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3720      	adds	r7, #32
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b088      	sub	sp, #32
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004c20:	2312      	movs	r3, #18
 8004c22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c24:	2340      	movs	r3, #64	@ 0x40
 8004c26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c32:	f107 0308 	add.w	r3, r7, #8
 8004c36:	4619      	mov	r1, r3
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7ff ff30 	bl	8004a9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c42:	2112      	movs	r1, #18
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f9d5 	bl	8004ff4 <SDMMC_GetCmdResp1>
 8004c4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c4c:	69fb      	ldr	r3, [r7, #28]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3720      	adds	r7, #32
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b088      	sub	sp, #32
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004c64:	2318      	movs	r3, #24
 8004c66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c68:	2340      	movs	r3, #64	@ 0x40
 8004c6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c76:	f107 0308 	add.w	r3, r7, #8
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7ff ff0e 	bl	8004a9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c86:	2118      	movs	r1, #24
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f9b3 	bl	8004ff4 <SDMMC_GetCmdResp1>
 8004c8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c90:	69fb      	ldr	r3, [r7, #28]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3720      	adds	r7, #32
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b088      	sub	sp, #32
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
 8004ca2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004ca8:	2319      	movs	r3, #25
 8004caa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cac:	2340      	movs	r3, #64	@ 0x40
 8004cae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cb8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cba:	f107 0308 	add.w	r3, r7, #8
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff feec 	bl	8004a9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cca:	2119      	movs	r1, #25
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f991 	bl	8004ff4 <SDMMC_GetCmdResp1>
 8004cd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cd4:	69fb      	ldr	r3, [r7, #28]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3720      	adds	r7, #32
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
	...

08004ce0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004cec:	230c      	movs	r3, #12
 8004cee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cf0:	2340      	movs	r3, #64	@ 0x40
 8004cf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cf8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cfc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cfe:	f107 0308 	add.w	r3, r7, #8
 8004d02:	4619      	mov	r1, r3
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff feca 	bl	8004a9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004d0a:	4a05      	ldr	r2, [pc, #20]	@ (8004d20 <SDMMC_CmdStopTransfer+0x40>)
 8004d0c:	210c      	movs	r1, #12
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f970 	bl	8004ff4 <SDMMC_GetCmdResp1>
 8004d14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d16:	69fb      	ldr	r3, [r7, #28]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3720      	adds	r7, #32
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	05f5e100 	.word	0x05f5e100

08004d24 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08a      	sub	sp, #40	@ 0x28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004d34:	2307      	movs	r3, #7
 8004d36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d38:	2340      	movs	r3, #64	@ 0x40
 8004d3a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d44:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d46:	f107 0310 	add.w	r3, r7, #16
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f7ff fea6 	bl	8004a9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d56:	2107      	movs	r1, #7
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 f94b 	bl	8004ff4 <SDMMC_GetCmdResp1>
 8004d5e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3728      	adds	r7, #40	@ 0x28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b088      	sub	sp, #32
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d88:	f107 0308 	add.w	r3, r7, #8
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7ff fe85 	bl	8004a9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 fb65 	bl	8005464 <SDMMC_GetCmdError>
 8004d9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d9c:	69fb      	ldr	r3, [r7, #28]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3720      	adds	r7, #32
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b088      	sub	sp, #32
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004dae:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8004db2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004db4:	2308      	movs	r3, #8
 8004db6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004db8:	2340      	movs	r3, #64	@ 0x40
 8004dba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004dc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dc6:	f107 0308 	add.w	r3, r7, #8
 8004dca:	4619      	mov	r1, r3
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff fe66 	bl	8004a9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 faf8 	bl	80053c8 <SDMMC_GetCmdResp7>
 8004dd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dda:	69fb      	ldr	r3, [r7, #28]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3720      	adds	r7, #32
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004df2:	2337      	movs	r3, #55	@ 0x37
 8004df4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004df6:	2340      	movs	r3, #64	@ 0x40
 8004df8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e04:	f107 0308 	add.w	r3, r7, #8
 8004e08:	4619      	mov	r1, r3
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7ff fe47 	bl	8004a9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e14:	2137      	movs	r1, #55	@ 0x37
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f8ec 	bl	8004ff4 <SDMMC_GetCmdResp1>
 8004e1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e1e:	69fb      	ldr	r3, [r7, #28]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3720      	adds	r7, #32
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b088      	sub	sp, #32
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004e38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004e3e:	2329      	movs	r3, #41	@ 0x29
 8004e40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e42:	2340      	movs	r3, #64	@ 0x40
 8004e44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e46:	2300      	movs	r3, #0
 8004e48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e50:	f107 0308 	add.w	r3, r7, #8
 8004e54:	4619      	mov	r1, r3
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7ff fe21 	bl	8004a9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f9ff 	bl	8005260 <SDMMC_GetCmdResp3>
 8004e62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e64:	69fb      	ldr	r3, [r7, #28]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3720      	adds	r7, #32
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b088      	sub	sp, #32
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004e7c:	2306      	movs	r3, #6
 8004e7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e80:	2340      	movs	r3, #64	@ 0x40
 8004e82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e84:	2300      	movs	r3, #0
 8004e86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e8e:	f107 0308 	add.w	r3, r7, #8
 8004e92:	4619      	mov	r1, r3
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff fe02 	bl	8004a9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e9e:	2106      	movs	r1, #6
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f8a7 	bl	8004ff4 <SDMMC_GetCmdResp1>
 8004ea6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ea8:	69fb      	ldr	r3, [r7, #28]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3720      	adds	r7, #32
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b088      	sub	sp, #32
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004ebe:	2333      	movs	r3, #51	@ 0x33
 8004ec0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ec2:	2340      	movs	r3, #64	@ 0x40
 8004ec4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004eca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ece:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ed0:	f107 0308 	add.w	r3, r7, #8
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7ff fde1 	bl	8004a9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004edc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ee0:	2133      	movs	r1, #51	@ 0x33
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f886 	bl	8004ff4 <SDMMC_GetCmdResp1>
 8004ee8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004eea:	69fb      	ldr	r3, [r7, #28]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3720      	adds	r7, #32
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004f00:	2302      	movs	r3, #2
 8004f02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004f04:	23c0      	movs	r3, #192	@ 0xc0
 8004f06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f12:	f107 0308 	add.w	r3, r7, #8
 8004f16:	4619      	mov	r1, r3
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7ff fdc0 	bl	8004a9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f956 	bl	80051d0 <SDMMC_GetCmdResp2>
 8004f24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f26:	69fb      	ldr	r3, [r7, #28]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3720      	adds	r7, #32
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b088      	sub	sp, #32
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004f3e:	2309      	movs	r3, #9
 8004f40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004f42:	23c0      	movs	r3, #192	@ 0xc0
 8004f44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f50:	f107 0308 	add.w	r3, r7, #8
 8004f54:	4619      	mov	r1, r3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff fda1 	bl	8004a9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f937 	bl	80051d0 <SDMMC_GetCmdResp2>
 8004f62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f64:	69fb      	ldr	r3, [r7, #28]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3720      	adds	r7, #32
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b088      	sub	sp, #32
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f80:	2340      	movs	r3, #64	@ 0x40
 8004f82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f8e:	f107 0308 	add.w	r3, r7, #8
 8004f92:	4619      	mov	r1, r3
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff fd82 	bl	8004a9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	2103      	movs	r1, #3
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f99c 	bl	80052dc <SDMMC_GetCmdResp6>
 8004fa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fa6:	69fb      	ldr	r3, [r7, #28]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3720      	adds	r7, #32
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b088      	sub	sp, #32
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004fbe:	230d      	movs	r3, #13
 8004fc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fc2:	2340      	movs	r3, #64	@ 0x40
 8004fc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fd0:	f107 0308 	add.w	r3, r7, #8
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7ff fd61 	bl	8004a9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004fdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fe0:	210d      	movs	r1, #13
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f806 	bl	8004ff4 <SDMMC_GetCmdResp1>
 8004fe8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fea:	69fb      	ldr	r3, [r7, #28]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3720      	adds	r7, #32
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005002:	4b70      	ldr	r3, [pc, #448]	@ (80051c4 <SDMMC_GetCmdResp1+0x1d0>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a70      	ldr	r2, [pc, #448]	@ (80051c8 <SDMMC_GetCmdResp1+0x1d4>)
 8005008:	fba2 2303 	umull	r2, r3, r2, r3
 800500c:	0a5a      	lsrs	r2, r3, #9
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	fb02 f303 	mul.w	r3, r2, r3
 8005014:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	1e5a      	subs	r2, r3, #1
 800501a:	61fa      	str	r2, [r7, #28]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d102      	bne.n	8005026 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005020:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005024:	e0c9      	b.n	80051ba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800502a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0ef      	beq.n	8005016 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1ea      	bne.n	8005016 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	d004      	beq.n	8005056 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2204      	movs	r2, #4
 8005050:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005052:	2304      	movs	r3, #4
 8005054:	e0b1      	b.n	80051ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d004      	beq.n	800506c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005068:	2301      	movs	r3, #1
 800506a:	e0a6      	b.n	80051ba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	22c5      	movs	r2, #197	@ 0xc5
 8005070:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f7ff fd3d 	bl	8004af2 <SDIO_GetCommandResponse>
 8005078:	4603      	mov	r3, r0
 800507a:	461a      	mov	r2, r3
 800507c:	7afb      	ldrb	r3, [r7, #11]
 800507e:	4293      	cmp	r3, r2
 8005080:	d001      	beq.n	8005086 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005082:	2301      	movs	r3, #1
 8005084:	e099      	b.n	80051ba <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005086:	2100      	movs	r1, #0
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f7ff fd3f 	bl	8004b0c <SDIO_GetResponse>
 800508e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	4b4e      	ldr	r3, [pc, #312]	@ (80051cc <SDMMC_GetCmdResp1+0x1d8>)
 8005094:	4013      	ands	r3, r2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800509a:	2300      	movs	r3, #0
 800509c:	e08d      	b.n	80051ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	da02      	bge.n	80050aa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80050a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050a8:	e087      	b.n	80051ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80050b4:	2340      	movs	r3, #64	@ 0x40
 80050b6:	e080      	b.n	80051ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80050c2:	2380      	movs	r3, #128	@ 0x80
 80050c4:	e079      	b.n	80051ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80050d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050d4:	e071      	b.n	80051ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80050e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80050e4:	e069      	b.n	80051ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80050f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050f4:	e061      	b.n	80051ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005100:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005104:	e059      	b.n	80051ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005110:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005114:	e051      	b.n	80051ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005120:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005124:	e049      	b.n	80051ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005130:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005134:	e041      	b.n	80051ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005140:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005144:	e039      	b.n	80051ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005150:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005154:	e031      	b.n	80051ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005160:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005164:	e029      	b.n	80051ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005170:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005174:	e021      	b.n	80051ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005180:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005184:	e019      	b.n	80051ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005190:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005194:	e011      	b.n	80051ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80051a0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80051a4:	e009      	b.n	80051ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80051b0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80051b4:	e001      	b.n	80051ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80051b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3720      	adds	r7, #32
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20000000 	.word	0x20000000
 80051c8:	10624dd3 	.word	0x10624dd3
 80051cc:	fdffe008 	.word	0xfdffe008

080051d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80051d8:	4b1f      	ldr	r3, [pc, #124]	@ (8005258 <SDMMC_GetCmdResp2+0x88>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a1f      	ldr	r2, [pc, #124]	@ (800525c <SDMMC_GetCmdResp2+0x8c>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	0a5b      	lsrs	r3, r3, #9
 80051e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051e8:	fb02 f303 	mul.w	r3, r2, r3
 80051ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	1e5a      	subs	r2, r3, #1
 80051f2:	60fa      	str	r2, [r7, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d102      	bne.n	80051fe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80051f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80051fc:	e026      	b.n	800524c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005202:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0ef      	beq.n	80051ee <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1ea      	bne.n	80051ee <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	d004      	beq.n	800522e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2204      	movs	r2, #4
 8005228:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800522a:	2304      	movs	r3, #4
 800522c:	e00e      	b.n	800524c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d004      	beq.n	8005244 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005240:	2301      	movs	r3, #1
 8005242:	e003      	b.n	800524c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	22c5      	movs	r2, #197	@ 0xc5
 8005248:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	20000000 	.word	0x20000000
 800525c:	10624dd3 	.word	0x10624dd3

08005260 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005268:	4b1a      	ldr	r3, [pc, #104]	@ (80052d4 <SDMMC_GetCmdResp3+0x74>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a1a      	ldr	r2, [pc, #104]	@ (80052d8 <SDMMC_GetCmdResp3+0x78>)
 800526e:	fba2 2303 	umull	r2, r3, r2, r3
 8005272:	0a5b      	lsrs	r3, r3, #9
 8005274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005278:	fb02 f303 	mul.w	r3, r2, r3
 800527c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	1e5a      	subs	r2, r3, #1
 8005282:	60fa      	str	r2, [r7, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d102      	bne.n	800528e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005288:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800528c:	e01b      	b.n	80052c6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005292:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0ef      	beq.n	800527e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1ea      	bne.n	800527e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d004      	beq.n	80052be <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2204      	movs	r2, #4
 80052b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80052ba:	2304      	movs	r3, #4
 80052bc:	e003      	b.n	80052c6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	22c5      	movs	r2, #197	@ 0xc5
 80052c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20000000 	.word	0x20000000
 80052d8:	10624dd3 	.word	0x10624dd3

080052dc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	460b      	mov	r3, r1
 80052e6:	607a      	str	r2, [r7, #4]
 80052e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80052ea:	4b35      	ldr	r3, [pc, #212]	@ (80053c0 <SDMMC_GetCmdResp6+0xe4>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a35      	ldr	r2, [pc, #212]	@ (80053c4 <SDMMC_GetCmdResp6+0xe8>)
 80052f0:	fba2 2303 	umull	r2, r3, r2, r3
 80052f4:	0a5b      	lsrs	r3, r3, #9
 80052f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052fa:	fb02 f303 	mul.w	r3, r2, r3
 80052fe:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	1e5a      	subs	r2, r3, #1
 8005304:	61fa      	str	r2, [r7, #28]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d102      	bne.n	8005310 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800530a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800530e:	e052      	b.n	80053b6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005314:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0ef      	beq.n	8005300 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1ea      	bne.n	8005300 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800532e:	f003 0304 	and.w	r3, r3, #4
 8005332:	2b00      	cmp	r3, #0
 8005334:	d004      	beq.n	8005340 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2204      	movs	r2, #4
 800533a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800533c:	2304      	movs	r3, #4
 800533e:	e03a      	b.n	80053b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d004      	beq.n	8005356 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2201      	movs	r2, #1
 8005350:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005352:	2301      	movs	r3, #1
 8005354:	e02f      	b.n	80053b6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f7ff fbcb 	bl	8004af2 <SDIO_GetCommandResponse>
 800535c:	4603      	mov	r3, r0
 800535e:	461a      	mov	r2, r3
 8005360:	7afb      	ldrb	r3, [r7, #11]
 8005362:	4293      	cmp	r3, r2
 8005364:	d001      	beq.n	800536a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005366:	2301      	movs	r3, #1
 8005368:	e025      	b.n	80053b6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	22c5      	movs	r2, #197	@ 0xc5
 800536e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005370:	2100      	movs	r1, #0
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f7ff fbca 	bl	8004b0c <SDIO_GetResponse>
 8005378:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d106      	bne.n	8005392 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	0c1b      	lsrs	r3, r3, #16
 8005388:	b29a      	uxth	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800538e:	2300      	movs	r3, #0
 8005390:	e011      	b.n	80053b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800539c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80053a0:	e009      	b.n	80053b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d002      	beq.n	80053b2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80053ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053b0:	e001      	b.n	80053b6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80053b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3720      	adds	r7, #32
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	20000000 	.word	0x20000000
 80053c4:	10624dd3 	.word	0x10624dd3

080053c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80053d0:	4b22      	ldr	r3, [pc, #136]	@ (800545c <SDMMC_GetCmdResp7+0x94>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a22      	ldr	r2, [pc, #136]	@ (8005460 <SDMMC_GetCmdResp7+0x98>)
 80053d6:	fba2 2303 	umull	r2, r3, r2, r3
 80053da:	0a5b      	lsrs	r3, r3, #9
 80053dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053e0:	fb02 f303 	mul.w	r3, r2, r3
 80053e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	1e5a      	subs	r2, r3, #1
 80053ea:	60fa      	str	r2, [r7, #12]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d102      	bne.n	80053f6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80053f4:	e02c      	b.n	8005450 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0ef      	beq.n	80053e6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1ea      	bne.n	80053e6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	d004      	beq.n	8005426 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2204      	movs	r2, #4
 8005420:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005422:	2304      	movs	r3, #4
 8005424:	e014      	b.n	8005450 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d004      	beq.n	800543c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005438:	2301      	movs	r3, #1
 800543a:	e009      	b.n	8005450 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2240      	movs	r2, #64	@ 0x40
 800544c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800544e:	2300      	movs	r3, #0
  
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	20000000 	.word	0x20000000
 8005460:	10624dd3 	.word	0x10624dd3

08005464 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800546c:	4b11      	ldr	r3, [pc, #68]	@ (80054b4 <SDMMC_GetCmdError+0x50>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a11      	ldr	r2, [pc, #68]	@ (80054b8 <SDMMC_GetCmdError+0x54>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	0a5b      	lsrs	r3, r3, #9
 8005478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800547c:	fb02 f303 	mul.w	r3, r2, r3
 8005480:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1e5a      	subs	r2, r3, #1
 8005486:	60fa      	str	r2, [r7, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d102      	bne.n	8005492 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800548c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005490:	e009      	b.n	80054a6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0f1      	beq.n	8005482 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	22c5      	movs	r2, #197	@ 0xc5
 80054a2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	20000000 	.word	0x20000000
 80054b8:	10624dd3 	.word	0x10624dd3

080054bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80054c0:	4904      	ldr	r1, [pc, #16]	@ (80054d4 <MX_FATFS_Init+0x18>)
 80054c2:	4805      	ldr	r0, [pc, #20]	@ (80054d8 <MX_FATFS_Init+0x1c>)
 80054c4:	f003 fd06 	bl	8008ed4 <FATFS_LinkDriver>
 80054c8:	4603      	mov	r3, r0
 80054ca:	461a      	mov	r2, r3
 80054cc:	4b03      	ldr	r3, [pc, #12]	@ (80054dc <MX_FATFS_Init+0x20>)
 80054ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80054d0:	bf00      	nop
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	2000024c 	.word	0x2000024c
 80054d8:	08009d98 	.word	0x08009d98
 80054dc:	20000248 	.word	0x20000248

080054e0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80054e4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80054fa:	f000 f879 	bl	80055f0 <BSP_SD_IsDetected>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b01      	cmp	r3, #1
 8005502:	d001      	beq.n	8005508 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e012      	b.n	800552e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005508:	480b      	ldr	r0, [pc, #44]	@ (8005538 <BSP_SD_Init+0x48>)
 800550a:	f7fd fccd 	bl	8002ea8 <HAL_SD_Init>
 800550e:	4603      	mov	r3, r0
 8005510:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005512:	79fb      	ldrb	r3, [r7, #7]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d109      	bne.n	800552c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005518:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800551c:	4806      	ldr	r0, [pc, #24]	@ (8005538 <BSP_SD_Init+0x48>)
 800551e:	f7fe faa7 	bl	8003a70 <HAL_SD_ConfigWideBusOperation>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800552c:	79fb      	ldrb	r3, [r7, #7]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20000078 	.word	0x20000078

0800553c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af02      	add	r7, sp, #8
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	68f9      	ldr	r1, [r7, #12]
 8005558:	4806      	ldr	r0, [pc, #24]	@ (8005574 <BSP_SD_ReadBlocks+0x38>)
 800555a:	f7fd fd55 	bl	8003008 <HAL_SD_ReadBlocks>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005568:	7dfb      	ldrb	r3, [r7, #23]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20000078 	.word	0x20000078

08005578 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b088      	sub	sp, #32
 800557c:	af02      	add	r7, sp, #8
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	68f9      	ldr	r1, [r7, #12]
 8005594:	4806      	ldr	r0, [pc, #24]	@ (80055b0 <BSP_SD_WriteBlocks+0x38>)
 8005596:	f7fd ff15 	bl	80033c4 <HAL_SD_WriteBlocks>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80055a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000078 	.word	0x20000078

080055b4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80055b8:	4805      	ldr	r0, [pc, #20]	@ (80055d0 <BSP_SD_GetCardState+0x1c>)
 80055ba:	f7fe faf3 	bl	8003ba4 <HAL_SD_GetCardState>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b04      	cmp	r3, #4
 80055c2:	bf14      	ite	ne
 80055c4:	2301      	movne	r3, #1
 80055c6:	2300      	moveq	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20000078 	.word	0x20000078

080055d4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80055dc:	6879      	ldr	r1, [r7, #4]
 80055de:	4803      	ldr	r0, [pc, #12]	@ (80055ec <BSP_SD_GetCardInfo+0x18>)
 80055e0:	f7fe fa1a 	bl	8003a18 <HAL_SD_GetCardInfo>
}
 80055e4:	bf00      	nop
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	20000078 	.word	0x20000078

080055f0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80055f6:	2301      	movs	r3, #1
 80055f8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80055fa:	79fb      	ldrb	r3, [r7, #7]
 80055fc:	b2db      	uxtb	r3, r3
}
 80055fe:	4618      	mov	r0, r3
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
	...

0800560c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	4603      	mov	r3, r0
 8005614:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005616:	4b0b      	ldr	r3, [pc, #44]	@ (8005644 <SD_CheckStatus+0x38>)
 8005618:	2201      	movs	r2, #1
 800561a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800561c:	f7ff ffca 	bl	80055b4 <BSP_SD_GetCardState>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d107      	bne.n	8005636 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005626:	4b07      	ldr	r3, [pc, #28]	@ (8005644 <SD_CheckStatus+0x38>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	b2db      	uxtb	r3, r3
 800562c:	f023 0301 	bic.w	r3, r3, #1
 8005630:	b2da      	uxtb	r2, r3
 8005632:	4b04      	ldr	r3, [pc, #16]	@ (8005644 <SD_CheckStatus+0x38>)
 8005634:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005636:	4b03      	ldr	r3, [pc, #12]	@ (8005644 <SD_CheckStatus+0x38>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	b2db      	uxtb	r3, r3
}
 800563c:	4618      	mov	r0, r3
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	20000009 	.word	0x20000009

08005648 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	4603      	mov	r3, r0
 8005650:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005652:	4b0b      	ldr	r3, [pc, #44]	@ (8005680 <SD_initialize+0x38>)
 8005654:	2201      	movs	r2, #1
 8005656:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005658:	f7ff ff4a 	bl	80054f0 <BSP_SD_Init>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d107      	bne.n	8005672 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005662:	79fb      	ldrb	r3, [r7, #7]
 8005664:	4618      	mov	r0, r3
 8005666:	f7ff ffd1 	bl	800560c <SD_CheckStatus>
 800566a:	4603      	mov	r3, r0
 800566c:	461a      	mov	r2, r3
 800566e:	4b04      	ldr	r3, [pc, #16]	@ (8005680 <SD_initialize+0x38>)
 8005670:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005672:	4b03      	ldr	r3, [pc, #12]	@ (8005680 <SD_initialize+0x38>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	b2db      	uxtb	r3, r3
}
 8005678:	4618      	mov	r0, r3
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	20000009 	.word	0x20000009

08005684 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	4603      	mov	r3, r0
 800568c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800568e:	79fb      	ldrb	r3, [r7, #7]
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff ffbb 	bl	800560c <SD_CheckStatus>
 8005696:	4603      	mov	r3, r0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	607a      	str	r2, [r7, #4]
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	4603      	mov	r3, r0
 80056ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80056b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	68b8      	ldr	r0, [r7, #8]
 80056be:	f7ff ff3d 	bl	800553c <BSP_SD_ReadBlocks>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d107      	bne.n	80056d8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80056c8:	bf00      	nop
 80056ca:	f7ff ff73 	bl	80055b4 <BSP_SD_GetCardState>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1fa      	bne.n	80056ca <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b086      	sub	sp, #24
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	603b      	str	r3, [r7, #0]
 80056ee:	4603      	mov	r3, r0
 80056f0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80056f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	68b8      	ldr	r0, [r7, #8]
 8005700:	f7ff ff3a 	bl	8005578 <BSP_SD_WriteBlocks>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d107      	bne.n	800571a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800570a:	bf00      	nop
 800570c:	f7ff ff52 	bl	80055b4 <BSP_SD_GetCardState>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1fa      	bne.n	800570c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800571a:	7dfb      	ldrb	r3, [r7, #23]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08c      	sub	sp, #48	@ 0x30
 8005728:	af00      	add	r7, sp, #0
 800572a:	4603      	mov	r3, r0
 800572c:	603a      	str	r2, [r7, #0]
 800572e:	71fb      	strb	r3, [r7, #7]
 8005730:	460b      	mov	r3, r1
 8005732:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800573a:	4b25      	ldr	r3, [pc, #148]	@ (80057d0 <SD_ioctl+0xac>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	b2db      	uxtb	r3, r3
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <SD_ioctl+0x28>
 8005748:	2303      	movs	r3, #3
 800574a:	e03c      	b.n	80057c6 <SD_ioctl+0xa2>

  switch (cmd)
 800574c:	79bb      	ldrb	r3, [r7, #6]
 800574e:	2b03      	cmp	r3, #3
 8005750:	d834      	bhi.n	80057bc <SD_ioctl+0x98>
 8005752:	a201      	add	r2, pc, #4	@ (adr r2, 8005758 <SD_ioctl+0x34>)
 8005754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005758:	08005769 	.word	0x08005769
 800575c:	08005771 	.word	0x08005771
 8005760:	08005789 	.word	0x08005789
 8005764:	080057a3 	.word	0x080057a3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800576e:	e028      	b.n	80057c2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005770:	f107 030c 	add.w	r3, r7, #12
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff ff2d 	bl	80055d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800577a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005786:	e01c      	b.n	80057c2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005788:	f107 030c 	add.w	r3, r7, #12
 800578c:	4618      	mov	r0, r3
 800578e:	f7ff ff21 	bl	80055d4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005794:	b29a      	uxth	r2, r3
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80057a0:	e00f      	b.n	80057c2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80057a2:	f107 030c 	add.w	r3, r7, #12
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff ff14 	bl	80055d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80057ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ae:	0a5a      	lsrs	r2, r3, #9
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80057b4:	2300      	movs	r3, #0
 80057b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80057ba:	e002      	b.n	80057c2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80057bc:	2304      	movs	r3, #4
 80057be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80057c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3730      	adds	r7, #48	@ 0x30
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	20000009 	.word	0x20000009

080057d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	4603      	mov	r3, r0
 80057dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	4a08      	ldr	r2, [pc, #32]	@ (8005804 <disk_status+0x30>)
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	79fa      	ldrb	r2, [r7, #7]
 80057ec:	4905      	ldr	r1, [pc, #20]	@ (8005804 <disk_status+0x30>)
 80057ee:	440a      	add	r2, r1
 80057f0:	7a12      	ldrb	r2, [r2, #8]
 80057f2:	4610      	mov	r0, r2
 80057f4:	4798      	blx	r3
 80057f6:	4603      	mov	r3, r0
 80057f8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	20000478 	.word	0x20000478

08005808 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	4603      	mov	r3, r0
 8005810:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005816:	79fb      	ldrb	r3, [r7, #7]
 8005818:	4a0e      	ldr	r2, [pc, #56]	@ (8005854 <disk_initialize+0x4c>)
 800581a:	5cd3      	ldrb	r3, [r2, r3]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d114      	bne.n	800584a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	4a0c      	ldr	r2, [pc, #48]	@ (8005854 <disk_initialize+0x4c>)
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	79fa      	ldrb	r2, [r7, #7]
 800582e:	4909      	ldr	r1, [pc, #36]	@ (8005854 <disk_initialize+0x4c>)
 8005830:	440a      	add	r2, r1
 8005832:	7a12      	ldrb	r2, [r2, #8]
 8005834:	4610      	mov	r0, r2
 8005836:	4798      	blx	r3
 8005838:	4603      	mov	r3, r0
 800583a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800583c:	7bfb      	ldrb	r3, [r7, #15]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d103      	bne.n	800584a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	4a03      	ldr	r2, [pc, #12]	@ (8005854 <disk_initialize+0x4c>)
 8005846:	2101      	movs	r1, #1
 8005848:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800584a:	7bfb      	ldrb	r3, [r7, #15]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20000478 	.word	0x20000478

08005858 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005858:	b590      	push	{r4, r7, lr}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	607a      	str	r2, [r7, #4]
 8005862:	603b      	str	r3, [r7, #0]
 8005864:	4603      	mov	r3, r0
 8005866:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005868:	7bfb      	ldrb	r3, [r7, #15]
 800586a:	4a0a      	ldr	r2, [pc, #40]	@ (8005894 <disk_read+0x3c>)
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	689c      	ldr	r4, [r3, #8]
 8005874:	7bfb      	ldrb	r3, [r7, #15]
 8005876:	4a07      	ldr	r2, [pc, #28]	@ (8005894 <disk_read+0x3c>)
 8005878:	4413      	add	r3, r2
 800587a:	7a18      	ldrb	r0, [r3, #8]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	68b9      	ldr	r1, [r7, #8]
 8005882:	47a0      	blx	r4
 8005884:	4603      	mov	r3, r0
 8005886:	75fb      	strb	r3, [r7, #23]
  return res;
 8005888:	7dfb      	ldrb	r3, [r7, #23]
}
 800588a:	4618      	mov	r0, r3
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	bd90      	pop	{r4, r7, pc}
 8005892:	bf00      	nop
 8005894:	20000478 	.word	0x20000478

08005898 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005898:	b590      	push	{r4, r7, lr}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	60b9      	str	r1, [r7, #8]
 80058a0:	607a      	str	r2, [r7, #4]
 80058a2:	603b      	str	r3, [r7, #0]
 80058a4:	4603      	mov	r3, r0
 80058a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
 80058aa:	4a0a      	ldr	r2, [pc, #40]	@ (80058d4 <disk_write+0x3c>)
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	68dc      	ldr	r4, [r3, #12]
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	4a07      	ldr	r2, [pc, #28]	@ (80058d4 <disk_write+0x3c>)
 80058b8:	4413      	add	r3, r2
 80058ba:	7a18      	ldrb	r0, [r3, #8]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	47a0      	blx	r4
 80058c4:	4603      	mov	r3, r0
 80058c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80058c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	371c      	adds	r7, #28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd90      	pop	{r4, r7, pc}
 80058d2:	bf00      	nop
 80058d4:	20000478 	.word	0x20000478

080058d8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	4603      	mov	r3, r0
 80058e0:	603a      	str	r2, [r7, #0]
 80058e2:	71fb      	strb	r3, [r7, #7]
 80058e4:	460b      	mov	r3, r1
 80058e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	4a09      	ldr	r2, [pc, #36]	@ (8005910 <disk_ioctl+0x38>)
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	79fa      	ldrb	r2, [r7, #7]
 80058f6:	4906      	ldr	r1, [pc, #24]	@ (8005910 <disk_ioctl+0x38>)
 80058f8:	440a      	add	r2, r1
 80058fa:	7a10      	ldrb	r0, [r2, #8]
 80058fc:	79b9      	ldrb	r1, [r7, #6]
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	4798      	blx	r3
 8005902:	4603      	mov	r3, r0
 8005904:	73fb      	strb	r3, [r7, #15]
  return res;
 8005906:	7bfb      	ldrb	r3, [r7, #15]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20000478 	.word	0x20000478

08005914 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3301      	adds	r3, #1
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005924:	89fb      	ldrh	r3, [r7, #14]
 8005926:	021b      	lsls	r3, r3, #8
 8005928:	b21a      	sxth	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	b21b      	sxth	r3, r3
 8005930:	4313      	orrs	r3, r2
 8005932:	b21b      	sxth	r3, r3
 8005934:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005936:	89fb      	ldrh	r3, [r7, #14]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3303      	adds	r3, #3
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	021b      	lsls	r3, r3, #8
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	3202      	adds	r2, #2
 800595c:	7812      	ldrb	r2, [r2, #0]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	021b      	lsls	r3, r3, #8
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	3201      	adds	r2, #1
 800596a:	7812      	ldrb	r2, [r2, #0]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	021b      	lsls	r3, r3, #8
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	7812      	ldrb	r2, [r2, #0]
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
	return rv;
 800597c:	68fb      	ldr	r3, [r7, #12]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	460b      	mov	r3, r1
 8005994:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	887a      	ldrh	r2, [r7, #2]
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	701a      	strb	r2, [r3, #0]
 80059a2:	887b      	ldrh	r3, [r7, #2]
 80059a4:	0a1b      	lsrs	r3, r3, #8
 80059a6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	607a      	str	r2, [r7, #4]
 80059ae:	887a      	ldrh	r2, [r7, #2]
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	701a      	strb	r2, [r3, #0]
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	b2d2      	uxtb	r2, r2
 80059d4:	701a      	strb	r2, [r3, #0]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	0a1b      	lsrs	r3, r3, #8
 80059da:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	607a      	str	r2, [r7, #4]
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	701a      	strb	r2, [r3, #0]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	0a1b      	lsrs	r3, r3, #8
 80059ec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	607a      	str	r2, [r7, #4]
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	701a      	strb	r2, [r3, #0]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	0a1b      	lsrs	r3, r3, #8
 80059fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	607a      	str	r2, [r7, #4]
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	701a      	strb	r2, [r3, #0]
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005a18:	b480      	push	{r7}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00d      	beq.n	8005a4e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	1c53      	adds	r3, r2, #1
 8005a36:	613b      	str	r3, [r7, #16]
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	1c59      	adds	r1, r3, #1
 8005a3c:	6179      	str	r1, [r7, #20]
 8005a3e:	7812      	ldrb	r2, [r2, #0]
 8005a40:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	607b      	str	r3, [r7, #4]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1f1      	bne.n	8005a32 <mem_cpy+0x1a>
	}
}
 8005a4e:	bf00      	nop
 8005a50:	371c      	adds	r7, #28
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005a5a:	b480      	push	{r7}
 8005a5c:	b087      	sub	sp, #28
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	60f8      	str	r0, [r7, #12]
 8005a62:	60b9      	str	r1, [r7, #8]
 8005a64:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	617a      	str	r2, [r7, #20]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	607b      	str	r3, [r7, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1f3      	bne.n	8005a6a <mem_set+0x10>
}
 8005a82:	bf00      	nop
 8005a84:	bf00      	nop
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005a90:	b480      	push	{r7}
 8005a92:	b089      	sub	sp, #36	@ 0x24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	61fb      	str	r3, [r7, #28]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	61fa      	str	r2, [r7, #28]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	61ba      	str	r2, [r7, #24]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	1acb      	subs	r3, r1, r3
 8005abc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	607b      	str	r3, [r7, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <mem_cmp+0x40>
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d0eb      	beq.n	8005aa8 <mem_cmp+0x18>

	return r;
 8005ad0:	697b      	ldr	r3, [r7, #20]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3724      	adds	r7, #36	@ 0x24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005ae8:	e002      	b.n	8005af0 <chk_chr+0x12>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	3301      	adds	r3, #1
 8005aee:	607b      	str	r3, [r7, #4]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d005      	beq.n	8005b04 <chk_chr+0x26>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d1f2      	bne.n	8005aea <chk_chr+0xc>
	return *str;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	781b      	ldrb	r3, [r3, #0]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60bb      	str	r3, [r7, #8]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	e029      	b.n	8005b7c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005b28:	4a27      	ldr	r2, [pc, #156]	@ (8005bc8 <chk_lock+0xb4>)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	4413      	add	r3, r2
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d01d      	beq.n	8005b72 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005b36:	4a24      	ldr	r2, [pc, #144]	@ (8005bc8 <chk_lock+0xb4>)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	4413      	add	r3, r2
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d116      	bne.n	8005b76 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005b48:	4a1f      	ldr	r2, [pc, #124]	@ (8005bc8 <chk_lock+0xb4>)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	011b      	lsls	r3, r3, #4
 8005b4e:	4413      	add	r3, r2
 8005b50:	3304      	adds	r3, #4
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d10c      	bne.n	8005b76 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005b5c:	4a1a      	ldr	r2, [pc, #104]	@ (8005bc8 <chk_lock+0xb4>)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	011b      	lsls	r3, r3, #4
 8005b62:	4413      	add	r3, r2
 8005b64:	3308      	adds	r3, #8
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d102      	bne.n	8005b76 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005b70:	e007      	b.n	8005b82 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005b72:	2301      	movs	r3, #1
 8005b74:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	60fb      	str	r3, [r7, #12]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d9d2      	bls.n	8005b28 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d109      	bne.n	8005b9c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d102      	bne.n	8005b94 <chk_lock+0x80>
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d101      	bne.n	8005b98 <chk_lock+0x84>
 8005b94:	2300      	movs	r3, #0
 8005b96:	e010      	b.n	8005bba <chk_lock+0xa6>
 8005b98:	2312      	movs	r3, #18
 8005b9a:	e00e      	b.n	8005bba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d108      	bne.n	8005bb4 <chk_lock+0xa0>
 8005ba2:	4a09      	ldr	r2, [pc, #36]	@ (8005bc8 <chk_lock+0xb4>)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	4413      	add	r3, r2
 8005baa:	330c      	adds	r3, #12
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bb2:	d101      	bne.n	8005bb8 <chk_lock+0xa4>
 8005bb4:	2310      	movs	r3, #16
 8005bb6:	e000      	b.n	8005bba <chk_lock+0xa6>
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	20000258 	.word	0x20000258

08005bcc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	607b      	str	r3, [r7, #4]
 8005bd6:	e002      	b.n	8005bde <enq_lock+0x12>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	607b      	str	r3, [r7, #4]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d806      	bhi.n	8005bf2 <enq_lock+0x26>
 8005be4:	4a09      	ldr	r2, [pc, #36]	@ (8005c0c <enq_lock+0x40>)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	011b      	lsls	r3, r3, #4
 8005bea:	4413      	add	r3, r2
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1f2      	bne.n	8005bd8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	bf14      	ite	ne
 8005bf8:	2301      	movne	r3, #1
 8005bfa:	2300      	moveq	r3, #0
 8005bfc:	b2db      	uxtb	r3, r3
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	20000258 	.word	0x20000258

08005c10 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	e01f      	b.n	8005c60 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005c20:	4a41      	ldr	r2, [pc, #260]	@ (8005d28 <inc_lock+0x118>)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	4413      	add	r3, r2
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d113      	bne.n	8005c5a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005c32:	4a3d      	ldr	r2, [pc, #244]	@ (8005d28 <inc_lock+0x118>)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	011b      	lsls	r3, r3, #4
 8005c38:	4413      	add	r3, r2
 8005c3a:	3304      	adds	r3, #4
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d109      	bne.n	8005c5a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005c46:	4a38      	ldr	r2, [pc, #224]	@ (8005d28 <inc_lock+0x118>)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	4413      	add	r3, r2
 8005c4e:	3308      	adds	r3, #8
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d006      	beq.n	8005c68 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d9dc      	bls.n	8005c20 <inc_lock+0x10>
 8005c66:	e000      	b.n	8005c6a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005c68:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d132      	bne.n	8005cd6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005c70:	2300      	movs	r3, #0
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	e002      	b.n	8005c7c <inc_lock+0x6c>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d806      	bhi.n	8005c90 <inc_lock+0x80>
 8005c82:	4a29      	ldr	r2, [pc, #164]	@ (8005d28 <inc_lock+0x118>)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	4413      	add	r3, r2
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1f2      	bne.n	8005c76 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d101      	bne.n	8005c9a <inc_lock+0x8a>
 8005c96:	2300      	movs	r3, #0
 8005c98:	e040      	b.n	8005d1c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	4922      	ldr	r1, [pc, #136]	@ (8005d28 <inc_lock+0x118>)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	440b      	add	r3, r1
 8005ca6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	491e      	ldr	r1, [pc, #120]	@ (8005d28 <inc_lock+0x118>)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	011b      	lsls	r3, r3, #4
 8005cb2:	440b      	add	r3, r1
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	695a      	ldr	r2, [r3, #20]
 8005cbc:	491a      	ldr	r1, [pc, #104]	@ (8005d28 <inc_lock+0x118>)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	011b      	lsls	r3, r3, #4
 8005cc2:	440b      	add	r3, r1
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005cc8:	4a17      	ldr	r2, [pc, #92]	@ (8005d28 <inc_lock+0x118>)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	4413      	add	r3, r2
 8005cd0:	330c      	adds	r3, #12
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d009      	beq.n	8005cf0 <inc_lock+0xe0>
 8005cdc:	4a12      	ldr	r2, [pc, #72]	@ (8005d28 <inc_lock+0x118>)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	011b      	lsls	r3, r3, #4
 8005ce2:	4413      	add	r3, r2
 8005ce4:	330c      	adds	r3, #12
 8005ce6:	881b      	ldrh	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <inc_lock+0xe0>
 8005cec:	2300      	movs	r3, #0
 8005cee:	e015      	b.n	8005d1c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d108      	bne.n	8005d08 <inc_lock+0xf8>
 8005cf6:	4a0c      	ldr	r2, [pc, #48]	@ (8005d28 <inc_lock+0x118>)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	4413      	add	r3, r2
 8005cfe:	330c      	adds	r3, #12
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	3301      	adds	r3, #1
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	e001      	b.n	8005d0c <inc_lock+0xfc>
 8005d08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d0c:	4906      	ldr	r1, [pc, #24]	@ (8005d28 <inc_lock+0x118>)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	440b      	add	r3, r1
 8005d14:	330c      	adds	r3, #12
 8005d16:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3301      	adds	r3, #1
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	20000258 	.word	0x20000258

08005d2c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	607b      	str	r3, [r7, #4]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d825      	bhi.n	8005d8c <dec_lock+0x60>
		n = Files[i].ctr;
 8005d40:	4a17      	ldr	r2, [pc, #92]	@ (8005da0 <dec_lock+0x74>)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	011b      	lsls	r3, r3, #4
 8005d46:	4413      	add	r3, r2
 8005d48:	330c      	adds	r3, #12
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005d4e:	89fb      	ldrh	r3, [r7, #14]
 8005d50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d54:	d101      	bne.n	8005d5a <dec_lock+0x2e>
 8005d56:	2300      	movs	r3, #0
 8005d58:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005d5a:	89fb      	ldrh	r3, [r7, #14]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <dec_lock+0x3a>
 8005d60:	89fb      	ldrh	r3, [r7, #14]
 8005d62:	3b01      	subs	r3, #1
 8005d64:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005d66:	4a0e      	ldr	r2, [pc, #56]	@ (8005da0 <dec_lock+0x74>)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	011b      	lsls	r3, r3, #4
 8005d6c:	4413      	add	r3, r2
 8005d6e:	330c      	adds	r3, #12
 8005d70:	89fa      	ldrh	r2, [r7, #14]
 8005d72:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005d74:	89fb      	ldrh	r3, [r7, #14]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d105      	bne.n	8005d86 <dec_lock+0x5a>
 8005d7a:	4a09      	ldr	r2, [pc, #36]	@ (8005da0 <dec_lock+0x74>)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	4413      	add	r3, r2
 8005d82:	2200      	movs	r2, #0
 8005d84:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	737b      	strb	r3, [r7, #13]
 8005d8a:	e001      	b.n	8005d90 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005d90:	7b7b      	ldrb	r3, [r7, #13]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	20000258 	.word	0x20000258

08005da4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005dac:	2300      	movs	r3, #0
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	e010      	b.n	8005dd4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005db2:	4a0d      	ldr	r2, [pc, #52]	@ (8005de8 <clear_lock+0x44>)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	011b      	lsls	r3, r3, #4
 8005db8:	4413      	add	r3, r2
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d105      	bne.n	8005dce <clear_lock+0x2a>
 8005dc2:	4a09      	ldr	r2, [pc, #36]	@ (8005de8 <clear_lock+0x44>)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	4413      	add	r3, r2
 8005dca:	2200      	movs	r2, #0
 8005dcc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d9eb      	bls.n	8005db2 <clear_lock+0xe>
	}
}
 8005dda:	bf00      	nop
 8005ddc:	bf00      	nop
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	20000258 	.word	0x20000258

08005dec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	78db      	ldrb	r3, [r3, #3]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d034      	beq.n	8005e6a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e04:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	7858      	ldrb	r0, [r3, #1]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005e10:	2301      	movs	r3, #1
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	f7ff fd40 	bl	8005898 <disk_write>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	73fb      	strb	r3, [r7, #15]
 8005e22:	e022      	b.n	8005e6a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	1ad2      	subs	r2, r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d217      	bcs.n	8005e6a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	789b      	ldrb	r3, [r3, #2]
 8005e3e:	613b      	str	r3, [r7, #16]
 8005e40:	e010      	b.n	8005e64 <sync_window+0x78>
					wsect += fs->fsize;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	4413      	add	r3, r2
 8005e4a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	7858      	ldrb	r0, [r3, #1]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005e56:	2301      	movs	r3, #1
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	f7ff fd1d 	bl	8005898 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	613b      	str	r3, [r7, #16]
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d8eb      	bhi.n	8005e42 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d01b      	beq.n	8005ec4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7ff ffad 	bl	8005dec <sync_window>
 8005e92:	4603      	mov	r3, r0
 8005e94:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d113      	bne.n	8005ec4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	7858      	ldrb	r0, [r3, #1]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	f7ff fcd5 	bl	8005858 <disk_read>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d004      	beq.n	8005ebe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005eb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005eb8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff ff87 	bl	8005dec <sync_window>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d159      	bne.n	8005f9c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	d149      	bne.n	8005f84 <sync_fs+0xb4>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	791b      	ldrb	r3, [r3, #4]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d145      	bne.n	8005f84 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	899b      	ldrh	r3, [r3, #12]
 8005f02:	461a      	mov	r2, r3
 8005f04:	2100      	movs	r1, #0
 8005f06:	f7ff fda8 	bl	8005a5a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	3338      	adds	r3, #56	@ 0x38
 8005f0e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005f12:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff fd37 	bl	800598a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3338      	adds	r3, #56	@ 0x38
 8005f20:	4921      	ldr	r1, [pc, #132]	@ (8005fa8 <sync_fs+0xd8>)
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7ff fd4c 	bl	80059c0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3338      	adds	r3, #56	@ 0x38
 8005f2c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005f30:	491e      	ldr	r1, [pc, #120]	@ (8005fac <sync_fs+0xdc>)
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff fd44 	bl	80059c0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3338      	adds	r3, #56	@ 0x38
 8005f3c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	4619      	mov	r1, r3
 8005f46:	4610      	mov	r0, r2
 8005f48:	f7ff fd3a 	bl	80059c0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3338      	adds	r3, #56	@ 0x38
 8005f50:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	f7ff fd30 	bl	80059c0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	7858      	ldrb	r0, [r3, #1]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f78:	2301      	movs	r3, #1
 8005f7a:	f7ff fc8d 	bl	8005898 <disk_write>
			fs->fsi_flag = 0;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	785b      	ldrb	r3, [r3, #1]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff fca3 	bl	80058d8 <disk_ioctl>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <sync_fs+0xcc>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	41615252 	.word	0x41615252
 8005fac:	61417272 	.word	0x61417272

08005fb0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	3b02      	subs	r3, #2
 8005fbe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	69db      	ldr	r3, [r3, #28]
 8005fc4:	3b02      	subs	r3, #2
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d301      	bcc.n	8005fd0 <clust2sect+0x20>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	e008      	b.n	8005fe2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	895b      	ldrh	r3, [r3, #10]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	fb03 f202 	mul.w	r2, r3, r2
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe0:	4413      	add	r3, r2
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b086      	sub	sp, #24
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d904      	bls.n	800600e <get_fat+0x20>
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	429a      	cmp	r2, r3
 800600c:	d302      	bcc.n	8006014 <get_fat+0x26>
		val = 1;	/* Internal error */
 800600e:	2301      	movs	r3, #1
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	e0ba      	b.n	800618a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006014:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006018:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	2b03      	cmp	r3, #3
 8006020:	f000 8082 	beq.w	8006128 <get_fat+0x13a>
 8006024:	2b03      	cmp	r3, #3
 8006026:	f300 80a6 	bgt.w	8006176 <get_fat+0x188>
 800602a:	2b01      	cmp	r3, #1
 800602c:	d002      	beq.n	8006034 <get_fat+0x46>
 800602e:	2b02      	cmp	r3, #2
 8006030:	d055      	beq.n	80060de <get_fat+0xf0>
 8006032:	e0a0      	b.n	8006176 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	085b      	lsrs	r3, r3, #1
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4413      	add	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	899b      	ldrh	r3, [r3, #12]
 800604a:	4619      	mov	r1, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006052:	4413      	add	r3, r2
 8006054:	4619      	mov	r1, r3
 8006056:	6938      	ldr	r0, [r7, #16]
 8006058:	f7ff ff0c 	bl	8005e74 <move_window>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	f040 808c 	bne.w	800617c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	60fa      	str	r2, [r7, #12]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	8992      	ldrh	r2, [r2, #12]
 800606e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006072:	fb01 f202 	mul.w	r2, r1, r2
 8006076:	1a9b      	subs	r3, r3, r2
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	4413      	add	r3, r2
 800607c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006080:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	899b      	ldrh	r3, [r3, #12]
 800608a:	4619      	mov	r1, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006092:	4413      	add	r3, r2
 8006094:	4619      	mov	r1, r3
 8006096:	6938      	ldr	r0, [r7, #16]
 8006098:	f7ff feec 	bl	8005e74 <move_window>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d16e      	bne.n	8006180 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	899b      	ldrh	r3, [r3, #12]
 80060a6:	461a      	mov	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80060ae:	fb01 f202 	mul.w	r2, r1, r2
 80060b2:	1a9b      	subs	r3, r3, r2
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	4413      	add	r3, r2
 80060b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80060bc:	021b      	lsls	r3, r3, #8
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d002      	beq.n	80060d4 <get_fat+0xe6>
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	091b      	lsrs	r3, r3, #4
 80060d2:	e002      	b.n	80060da <get_fat+0xec>
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060da:	617b      	str	r3, [r7, #20]
			break;
 80060dc:	e055      	b.n	800618a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	899b      	ldrh	r3, [r3, #12]
 80060e6:	085b      	lsrs	r3, r3, #1
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	4619      	mov	r1, r3
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80060f2:	4413      	add	r3, r2
 80060f4:	4619      	mov	r1, r3
 80060f6:	6938      	ldr	r0, [r7, #16]
 80060f8:	f7ff febc 	bl	8005e74 <move_window>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d140      	bne.n	8006184 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	005b      	lsls	r3, r3, #1
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	8992      	ldrh	r2, [r2, #12]
 8006110:	fbb3 f0f2 	udiv	r0, r3, r2
 8006114:	fb00 f202 	mul.w	r2, r0, r2
 8006118:	1a9b      	subs	r3, r3, r2
 800611a:	440b      	add	r3, r1
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff fbf9 	bl	8005914 <ld_word>
 8006122:	4603      	mov	r3, r0
 8006124:	617b      	str	r3, [r7, #20]
			break;
 8006126:	e030      	b.n	800618a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	899b      	ldrh	r3, [r3, #12]
 8006130:	089b      	lsrs	r3, r3, #2
 8006132:	b29b      	uxth	r3, r3
 8006134:	4619      	mov	r1, r3
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	fbb3 f3f1 	udiv	r3, r3, r1
 800613c:	4413      	add	r3, r2
 800613e:	4619      	mov	r1, r3
 8006140:	6938      	ldr	r0, [r7, #16]
 8006142:	f7ff fe97 	bl	8005e74 <move_window>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d11d      	bne.n	8006188 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	8992      	ldrh	r2, [r2, #12]
 800615a:	fbb3 f0f2 	udiv	r0, r3, r2
 800615e:	fb00 f202 	mul.w	r2, r0, r2
 8006162:	1a9b      	subs	r3, r3, r2
 8006164:	440b      	add	r3, r1
 8006166:	4618      	mov	r0, r3
 8006168:	f7ff fbec 	bl	8005944 <ld_dword>
 800616c:	4603      	mov	r3, r0
 800616e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006172:	617b      	str	r3, [r7, #20]
			break;
 8006174:	e009      	b.n	800618a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006176:	2301      	movs	r3, #1
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	e006      	b.n	800618a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800617c:	bf00      	nop
 800617e:	e004      	b.n	800618a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006180:	bf00      	nop
 8006182:	e002      	b.n	800618a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006184:	bf00      	nop
 8006186:	e000      	b.n	800618a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006188:	bf00      	nop
		}
	}

	return val;
 800618a:	697b      	ldr	r3, [r7, #20]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3718      	adds	r7, #24
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006194:	b590      	push	{r4, r7, lr}
 8006196:	b089      	sub	sp, #36	@ 0x24
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80061a0:	2302      	movs	r3, #2
 80061a2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	f240 8109 	bls.w	80063be <put_fat+0x22a>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	f080 8103 	bcs.w	80063be <put_fat+0x22a>
		switch (fs->fs_type) {
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	2b03      	cmp	r3, #3
 80061be:	f000 80b6 	beq.w	800632e <put_fat+0x19a>
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	f300 80fb 	bgt.w	80063be <put_fat+0x22a>
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d003      	beq.n	80061d4 <put_fat+0x40>
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	f000 8083 	beq.w	80062d8 <put_fat+0x144>
 80061d2:	e0f4      	b.n	80063be <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	61bb      	str	r3, [r7, #24]
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	085b      	lsrs	r3, r3, #1
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	4413      	add	r3, r2
 80061e0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	899b      	ldrh	r3, [r3, #12]
 80061ea:	4619      	mov	r1, r3
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80061f2:	4413      	add	r3, r2
 80061f4:	4619      	mov	r1, r3
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f7ff fe3c 	bl	8005e74 <move_window>
 80061fc:	4603      	mov	r3, r0
 80061fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006200:	7ffb      	ldrb	r3, [r7, #31]
 8006202:	2b00      	cmp	r3, #0
 8006204:	f040 80d4 	bne.w	80063b0 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	61ba      	str	r2, [r7, #24]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	8992      	ldrh	r2, [r2, #12]
 8006218:	fbb3 f0f2 	udiv	r0, r3, r2
 800621c:	fb00 f202 	mul.w	r2, r0, r2
 8006220:	1a9b      	subs	r3, r3, r2
 8006222:	440b      	add	r3, r1
 8006224:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00d      	beq.n	800624c <put_fat+0xb8>
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	b25b      	sxtb	r3, r3
 8006236:	f003 030f 	and.w	r3, r3, #15
 800623a:	b25a      	sxtb	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	b2db      	uxtb	r3, r3
 8006240:	011b      	lsls	r3, r3, #4
 8006242:	b25b      	sxtb	r3, r3
 8006244:	4313      	orrs	r3, r2
 8006246:	b25b      	sxtb	r3, r3
 8006248:	b2db      	uxtb	r3, r3
 800624a:	e001      	b.n	8006250 <put_fat+0xbc>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	b2db      	uxtb	r3, r3
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2201      	movs	r2, #1
 8006258:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	899b      	ldrh	r3, [r3, #12]
 8006262:	4619      	mov	r1, r3
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	fbb3 f3f1 	udiv	r3, r3, r1
 800626a:	4413      	add	r3, r2
 800626c:	4619      	mov	r1, r3
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f7ff fe00 	bl	8005e74 <move_window>
 8006274:	4603      	mov	r3, r0
 8006276:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006278:	7ffb      	ldrb	r3, [r7, #31]
 800627a:	2b00      	cmp	r3, #0
 800627c:	f040 809a 	bne.w	80063b4 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	899b      	ldrh	r3, [r3, #12]
 800628a:	461a      	mov	r2, r3
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006292:	fb00 f202 	mul.w	r2, r0, r2
 8006296:	1a9b      	subs	r3, r3, r2
 8006298:	440b      	add	r3, r1
 800629a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <put_fat+0x11a>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	091b      	lsrs	r3, r3, #4
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	e00e      	b.n	80062cc <put_fat+0x138>
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	b25b      	sxtb	r3, r3
 80062b4:	f023 030f 	bic.w	r3, r3, #15
 80062b8:	b25a      	sxtb	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	0a1b      	lsrs	r3, r3, #8
 80062be:	b25b      	sxtb	r3, r3
 80062c0:	f003 030f 	and.w	r3, r3, #15
 80062c4:	b25b      	sxtb	r3, r3
 80062c6:	4313      	orrs	r3, r2
 80062c8:	b25b      	sxtb	r3, r3
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2201      	movs	r2, #1
 80062d4:	70da      	strb	r2, [r3, #3]
			break;
 80062d6:	e072      	b.n	80063be <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	899b      	ldrh	r3, [r3, #12]
 80062e0:	085b      	lsrs	r3, r3, #1
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	4619      	mov	r1, r3
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80062ec:	4413      	add	r3, r2
 80062ee:	4619      	mov	r1, r3
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f7ff fdbf 	bl	8005e74 <move_window>
 80062f6:	4603      	mov	r3, r0
 80062f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062fa:	7ffb      	ldrb	r3, [r7, #31]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d15b      	bne.n	80063b8 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	8992      	ldrh	r2, [r2, #12]
 800630e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006312:	fb00 f202 	mul.w	r2, r0, r2
 8006316:	1a9b      	subs	r3, r3, r2
 8006318:	440b      	add	r3, r1
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	b292      	uxth	r2, r2
 800631e:	4611      	mov	r1, r2
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff fb32 	bl	800598a <st_word>
			fs->wflag = 1;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2201      	movs	r2, #1
 800632a:	70da      	strb	r2, [r3, #3]
			break;
 800632c:	e047      	b.n	80063be <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	899b      	ldrh	r3, [r3, #12]
 8006336:	089b      	lsrs	r3, r3, #2
 8006338:	b29b      	uxth	r3, r3
 800633a:	4619      	mov	r1, r3
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006342:	4413      	add	r3, r2
 8006344:	4619      	mov	r1, r3
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f7ff fd94 	bl	8005e74 <move_window>
 800634c:	4603      	mov	r3, r0
 800634e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006350:	7ffb      	ldrb	r3, [r7, #31]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d132      	bne.n	80063bc <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	8992      	ldrh	r2, [r2, #12]
 800636a:	fbb3 f0f2 	udiv	r0, r3, r2
 800636e:	fb00 f202 	mul.w	r2, r0, r2
 8006372:	1a9b      	subs	r3, r3, r2
 8006374:	440b      	add	r3, r1
 8006376:	4618      	mov	r0, r3
 8006378:	f7ff fae4 	bl	8005944 <ld_dword>
 800637c:	4603      	mov	r3, r0
 800637e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006382:	4323      	orrs	r3, r4
 8006384:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	8992      	ldrh	r2, [r2, #12]
 8006394:	fbb3 f0f2 	udiv	r0, r3, r2
 8006398:	fb00 f202 	mul.w	r2, r0, r2
 800639c:	1a9b      	subs	r3, r3, r2
 800639e:	440b      	add	r3, r1
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7ff fb0c 	bl	80059c0 <st_dword>
			fs->wflag = 1;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2201      	movs	r2, #1
 80063ac:	70da      	strb	r2, [r3, #3]
			break;
 80063ae:	e006      	b.n	80063be <put_fat+0x22a>
			if (res != FR_OK) break;
 80063b0:	bf00      	nop
 80063b2:	e004      	b.n	80063be <put_fat+0x22a>
			if (res != FR_OK) break;
 80063b4:	bf00      	nop
 80063b6:	e002      	b.n	80063be <put_fat+0x22a>
			if (res != FR_OK) break;
 80063b8:	bf00      	nop
 80063ba:	e000      	b.n	80063be <put_fat+0x22a>
			if (res != FR_OK) break;
 80063bc:	bf00      	nop
		}
	}
	return res;
 80063be:	7ffb      	ldrb	r3, [r7, #31]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3724      	adds	r7, #36	@ 0x24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd90      	pop	{r4, r7, pc}

080063c8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d904      	bls.n	80063ee <remove_chain+0x26>
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	69db      	ldr	r3, [r3, #28]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d301      	bcc.n	80063f2 <remove_chain+0x2a>
 80063ee:	2302      	movs	r3, #2
 80063f0:	e04b      	b.n	800648a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00c      	beq.n	8006412 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80063f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80063fc:	6879      	ldr	r1, [r7, #4]
 80063fe:	69b8      	ldr	r0, [r7, #24]
 8006400:	f7ff fec8 	bl	8006194 <put_fat>
 8006404:	4603      	mov	r3, r0
 8006406:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006408:	7ffb      	ldrb	r3, [r7, #31]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <remove_chain+0x4a>
 800640e:	7ffb      	ldrb	r3, [r7, #31]
 8006410:	e03b      	b.n	800648a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006412:	68b9      	ldr	r1, [r7, #8]
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f7ff fdea 	bl	8005fee <get_fat>
 800641a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d031      	beq.n	8006486 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <remove_chain+0x64>
 8006428:	2302      	movs	r3, #2
 800642a:	e02e      	b.n	800648a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006432:	d101      	bne.n	8006438 <remove_chain+0x70>
 8006434:	2301      	movs	r3, #1
 8006436:	e028      	b.n	800648a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006438:	2200      	movs	r2, #0
 800643a:	68b9      	ldr	r1, [r7, #8]
 800643c:	69b8      	ldr	r0, [r7, #24]
 800643e:	f7ff fea9 	bl	8006194 <put_fat>
 8006442:	4603      	mov	r3, r0
 8006444:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006446:	7ffb      	ldrb	r3, [r7, #31]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <remove_chain+0x88>
 800644c:	7ffb      	ldrb	r3, [r7, #31]
 800644e:	e01c      	b.n	800648a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	699a      	ldr	r2, [r3, #24]
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	3b02      	subs	r3, #2
 800645a:	429a      	cmp	r2, r3
 800645c:	d20b      	bcs.n	8006476 <remove_chain+0xae>
			fs->free_clst++;
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	1c5a      	adds	r2, r3, #1
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	791b      	ldrb	r3, [r3, #4]
 800646c:	f043 0301 	orr.w	r3, r3, #1
 8006470:	b2da      	uxtb	r2, r3
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	429a      	cmp	r2, r3
 8006482:	d3c6      	bcc.n	8006412 <remove_chain+0x4a>
 8006484:	e000      	b.n	8006488 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006486:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3720      	adds	r7, #32
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b088      	sub	sp, #32
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10d      	bne.n	80064c4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d004      	beq.n	80064be <create_chain+0x2c>
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d31b      	bcc.n	80064f6 <create_chain+0x64>
 80064be:	2301      	movs	r3, #1
 80064c0:	61bb      	str	r3, [r7, #24]
 80064c2:	e018      	b.n	80064f6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff fd91 	bl	8005fee <get_fat>
 80064cc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d801      	bhi.n	80064d8 <create_chain+0x46>
 80064d4:	2301      	movs	r3, #1
 80064d6:	e070      	b.n	80065ba <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064de:	d101      	bne.n	80064e4 <create_chain+0x52>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	e06a      	b.n	80065ba <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d201      	bcs.n	80064f2 <create_chain+0x60>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	e063      	b.n	80065ba <create_chain+0x128>
		scl = clst;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	3301      	adds	r3, #1
 80064fe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	69db      	ldr	r3, [r3, #28]
 8006504:	69fa      	ldr	r2, [r7, #28]
 8006506:	429a      	cmp	r2, r3
 8006508:	d307      	bcc.n	800651a <create_chain+0x88>
				ncl = 2;
 800650a:	2302      	movs	r3, #2
 800650c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800650e:	69fa      	ldr	r2, [r7, #28]
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	429a      	cmp	r2, r3
 8006514:	d901      	bls.n	800651a <create_chain+0x88>
 8006516:	2300      	movs	r3, #0
 8006518:	e04f      	b.n	80065ba <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800651a:	69f9      	ldr	r1, [r7, #28]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff fd66 	bl	8005fee <get_fat>
 8006522:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00e      	beq.n	8006548 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d003      	beq.n	8006538 <create_chain+0xa6>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006536:	d101      	bne.n	800653c <create_chain+0xaa>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	e03e      	b.n	80065ba <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800653c:	69fa      	ldr	r2, [r7, #28]
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	429a      	cmp	r2, r3
 8006542:	d1da      	bne.n	80064fa <create_chain+0x68>
 8006544:	2300      	movs	r3, #0
 8006546:	e038      	b.n	80065ba <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006548:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800654a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800654e:	69f9      	ldr	r1, [r7, #28]
 8006550:	6938      	ldr	r0, [r7, #16]
 8006552:	f7ff fe1f 	bl	8006194 <put_fat>
 8006556:	4603      	mov	r3, r0
 8006558:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800655a:	7dfb      	ldrb	r3, [r7, #23]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d109      	bne.n	8006574 <create_chain+0xe2>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d006      	beq.n	8006574 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006566:	69fa      	ldr	r2, [r7, #28]
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6938      	ldr	r0, [r7, #16]
 800656c:	f7ff fe12 	bl	8006194 <put_fat>
 8006570:	4603      	mov	r3, r0
 8006572:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006574:	7dfb      	ldrb	r3, [r7, #23]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d116      	bne.n	80065a8 <create_chain+0x116>
		fs->last_clst = ncl;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	69fa      	ldr	r2, [r7, #28]
 800657e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	699a      	ldr	r2, [r3, #24]
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	3b02      	subs	r3, #2
 800658a:	429a      	cmp	r2, r3
 800658c:	d804      	bhi.n	8006598 <create_chain+0x106>
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	1e5a      	subs	r2, r3, #1
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	791b      	ldrb	r3, [r3, #4]
 800659c:	f043 0301 	orr.w	r3, r3, #1
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	711a      	strb	r2, [r3, #4]
 80065a6:	e007      	b.n	80065b8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d102      	bne.n	80065b4 <create_chain+0x122>
 80065ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80065b2:	e000      	b.n	80065b6 <create_chain+0x124>
 80065b4:	2301      	movs	r3, #1
 80065b6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80065b8:	69fb      	ldr	r3, [r7, #28]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3720      	adds	r7, #32
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b087      	sub	sp, #28
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d6:	3304      	adds	r3, #4
 80065d8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	899b      	ldrh	r3, [r3, #12]
 80065de:	461a      	mov	r2, r3
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	8952      	ldrh	r2, [r2, #10]
 80065ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80065ee:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	1d1a      	adds	r2, r3, #4
 80065f4:	613a      	str	r2, [r7, #16]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <clmt_clust+0x42>
 8006600:	2300      	movs	r3, #0
 8006602:	e010      	b.n	8006626 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	429a      	cmp	r2, r3
 800660a:	d307      	bcc.n	800661c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	3304      	adds	r3, #4
 8006618:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800661a:	e7e9      	b.n	80065f0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800661c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	4413      	add	r3, r2
}
 8006626:	4618      	mov	r0, r3
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b086      	sub	sp, #24
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006648:	d204      	bcs.n	8006654 <dir_sdi+0x22>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	f003 031f 	and.w	r3, r3, #31
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006654:	2302      	movs	r3, #2
 8006656:	e071      	b.n	800673c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d106      	bne.n	8006678 <dir_sdi+0x46>
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	2b02      	cmp	r3, #2
 8006670:	d902      	bls.n	8006678 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006676:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10c      	bne.n	8006698 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	095b      	lsrs	r3, r3, #5
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	8912      	ldrh	r2, [r2, #8]
 8006686:	4293      	cmp	r3, r2
 8006688:	d301      	bcc.n	800668e <dir_sdi+0x5c>
 800668a:	2302      	movs	r3, #2
 800668c:	e056      	b.n	800673c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	61da      	str	r2, [r3, #28]
 8006696:	e02d      	b.n	80066f4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	895b      	ldrh	r3, [r3, #10]
 800669c:	461a      	mov	r2, r3
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	899b      	ldrh	r3, [r3, #12]
 80066a2:	fb02 f303 	mul.w	r3, r2, r3
 80066a6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80066a8:	e019      	b.n	80066de <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6979      	ldr	r1, [r7, #20]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff fc9d 	bl	8005fee <get_fat>
 80066b4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066bc:	d101      	bne.n	80066c2 <dir_sdi+0x90>
 80066be:	2301      	movs	r3, #1
 80066c0:	e03c      	b.n	800673c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d904      	bls.n	80066d2 <dir_sdi+0xa0>
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	69db      	ldr	r3, [r3, #28]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d301      	bcc.n	80066d6 <dir_sdi+0xa4>
 80066d2:	2302      	movs	r3, #2
 80066d4:	e032      	b.n	800673c <dir_sdi+0x10a>
			ofs -= csz;
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d2e1      	bcs.n	80066aa <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80066e6:	6979      	ldr	r1, [r7, #20]
 80066e8:	6938      	ldr	r0, [r7, #16]
 80066ea:	f7ff fc61 	bl	8005fb0 <clust2sect>
 80066ee:	4602      	mov	r2, r0
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d101      	bne.n	8006706 <dir_sdi+0xd4>
 8006702:	2302      	movs	r3, #2
 8006704:	e01a      	b.n	800673c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69da      	ldr	r2, [r3, #28]
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	899b      	ldrh	r3, [r3, #12]
 800670e:	4619      	mov	r1, r3
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	fbb3 f3f1 	udiv	r3, r3, r1
 8006716:	441a      	add	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	899b      	ldrh	r3, [r3, #12]
 8006726:	461a      	mov	r2, r3
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	fbb3 f0f2 	udiv	r0, r3, r2
 800672e:	fb00 f202 	mul.w	r2, r0, r2
 8006732:	1a9b      	subs	r3, r3, r2
 8006734:	18ca      	adds	r2, r1, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3718      	adds	r7, #24
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	3320      	adds	r3, #32
 800675a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	69db      	ldr	r3, [r3, #28]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d003      	beq.n	800676c <dir_next+0x28>
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800676a:	d301      	bcc.n	8006770 <dir_next+0x2c>
 800676c:	2304      	movs	r3, #4
 800676e:	e0bb      	b.n	80068e8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	899b      	ldrh	r3, [r3, #12]
 8006774:	461a      	mov	r2, r3
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	fbb3 f1f2 	udiv	r1, r3, r2
 800677c:	fb01 f202 	mul.w	r2, r1, r2
 8006780:	1a9b      	subs	r3, r3, r2
 8006782:	2b00      	cmp	r3, #0
 8006784:	f040 809d 	bne.w	80068c2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10b      	bne.n	80067b2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	8912      	ldrh	r2, [r2, #8]
 80067a2:	4293      	cmp	r3, r2
 80067a4:	f0c0 808d 	bcc.w	80068c2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	61da      	str	r2, [r3, #28]
 80067ae:	2304      	movs	r3, #4
 80067b0:	e09a      	b.n	80068e8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	899b      	ldrh	r3, [r3, #12]
 80067b6:	461a      	mov	r2, r3
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	8952      	ldrh	r2, [r2, #10]
 80067c2:	3a01      	subs	r2, #1
 80067c4:	4013      	ands	r3, r2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d17b      	bne.n	80068c2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	4619      	mov	r1, r3
 80067d2:	4610      	mov	r0, r2
 80067d4:	f7ff fc0b 	bl	8005fee <get_fat>
 80067d8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d801      	bhi.n	80067e4 <dir_next+0xa0>
 80067e0:	2302      	movs	r3, #2
 80067e2:	e081      	b.n	80068e8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067ea:	d101      	bne.n	80067f0 <dir_next+0xac>
 80067ec:	2301      	movs	r3, #1
 80067ee:	e07b      	b.n	80068e8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d359      	bcc.n	80068ae <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d104      	bne.n	800680a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	61da      	str	r2, [r3, #28]
 8006806:	2304      	movs	r3, #4
 8006808:	e06e      	b.n	80068e8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	4619      	mov	r1, r3
 8006812:	4610      	mov	r0, r2
 8006814:	f7ff fe3d 	bl	8006492 <create_chain>
 8006818:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <dir_next+0xe0>
 8006820:	2307      	movs	r3, #7
 8006822:	e061      	b.n	80068e8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d101      	bne.n	800682e <dir_next+0xea>
 800682a:	2302      	movs	r3, #2
 800682c:	e05c      	b.n	80068e8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006834:	d101      	bne.n	800683a <dir_next+0xf6>
 8006836:	2301      	movs	r3, #1
 8006838:	e056      	b.n	80068e8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f7ff fad6 	bl	8005dec <sync_window>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <dir_next+0x106>
 8006846:	2301      	movs	r3, #1
 8006848:	e04e      	b.n	80068e8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	899b      	ldrh	r3, [r3, #12]
 8006854:	461a      	mov	r2, r3
 8006856:	2100      	movs	r1, #0
 8006858:	f7ff f8ff 	bl	8005a5a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800685c:	2300      	movs	r3, #0
 800685e:	613b      	str	r3, [r7, #16]
 8006860:	6979      	ldr	r1, [r7, #20]
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f7ff fba4 	bl	8005fb0 <clust2sect>
 8006868:	4602      	mov	r2, r0
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	635a      	str	r2, [r3, #52]	@ 0x34
 800686e:	e012      	b.n	8006896 <dir_next+0x152>
						fs->wflag = 1;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2201      	movs	r2, #1
 8006874:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f7ff fab8 	bl	8005dec <sync_window>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <dir_next+0x142>
 8006882:	2301      	movs	r3, #1
 8006884:	e030      	b.n	80068e8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	3301      	adds	r3, #1
 800688a:	613b      	str	r3, [r7, #16]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	635a      	str	r2, [r3, #52]	@ 0x34
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	895b      	ldrh	r3, [r3, #10]
 800689a:	461a      	mov	r2, r3
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	4293      	cmp	r3, r2
 80068a0:	d3e6      	bcc.n	8006870 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	1ad2      	subs	r2, r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80068b4:	6979      	ldr	r1, [r7, #20]
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f7ff fb7a 	bl	8005fb0 <clust2sect>
 80068bc:	4602      	mov	r2, r0
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	899b      	ldrh	r3, [r3, #12]
 80068d2:	461a      	mov	r2, r3
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80068da:	fb00 f202 	mul.w	r2, r0, r2
 80068de:	1a9b      	subs	r3, r3, r2
 80068e0:	18ca      	adds	r2, r1, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006900:	2100      	movs	r1, #0
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7ff fe95 	bl	8006632 <dir_sdi>
 8006908:	4603      	mov	r3, r0
 800690a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800690c:	7dfb      	ldrb	r3, [r7, #23]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d12b      	bne.n	800696a <dir_alloc+0x7a>
		n = 0;
 8006912:	2300      	movs	r3, #0
 8006914:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	4619      	mov	r1, r3
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f7ff faa9 	bl	8005e74 <move_window>
 8006922:	4603      	mov	r3, r0
 8006924:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006926:	7dfb      	ldrb	r3, [r7, #23]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d11d      	bne.n	8006968 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a1b      	ldr	r3, [r3, #32]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	2be5      	cmp	r3, #229	@ 0xe5
 8006934:	d004      	beq.n	8006940 <dir_alloc+0x50>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d107      	bne.n	8006950 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	3301      	adds	r3, #1
 8006944:	613b      	str	r3, [r7, #16]
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d102      	bne.n	8006954 <dir_alloc+0x64>
 800694e:	e00c      	b.n	800696a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006950:	2300      	movs	r3, #0
 8006952:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006954:	2101      	movs	r1, #1
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7ff fef4 	bl	8006744 <dir_next>
 800695c:	4603      	mov	r3, r0
 800695e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006960:	7dfb      	ldrb	r3, [r7, #23]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d0d7      	beq.n	8006916 <dir_alloc+0x26>
 8006966:	e000      	b.n	800696a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006968:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800696a:	7dfb      	ldrb	r3, [r7, #23]
 800696c:	2b04      	cmp	r3, #4
 800696e:	d101      	bne.n	8006974 <dir_alloc+0x84>
 8006970:	2307      	movs	r3, #7
 8006972:	75fb      	strb	r3, [r7, #23]
	return res;
 8006974:	7dfb      	ldrb	r3, [r7, #23]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3718      	adds	r7, #24
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	331a      	adds	r3, #26
 800698c:	4618      	mov	r0, r3
 800698e:	f7fe ffc1 	bl	8005914 <ld_word>
 8006992:	4603      	mov	r3, r0
 8006994:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2b03      	cmp	r3, #3
 800699c:	d109      	bne.n	80069b2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	3314      	adds	r3, #20
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fe ffb6 	bl	8005914 <ld_word>
 80069a8:	4603      	mov	r3, r0
 80069aa:	041b      	lsls	r3, r3, #16
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80069b2:	68fb      	ldr	r3, [r7, #12]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	331a      	adds	r3, #26
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	b292      	uxth	r2, r2
 80069d0:	4611      	mov	r1, r2
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fe ffd9 	bl	800598a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b03      	cmp	r3, #3
 80069de:	d109      	bne.n	80069f4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f103 0214 	add.w	r2, r3, #20
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	0c1b      	lsrs	r3, r3, #16
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	4619      	mov	r1, r3
 80069ee:	4610      	mov	r0, r2
 80069f0:	f7fe ffcb 	bl	800598a <st_word>
	}
}
 80069f4:	bf00      	nop
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80069fc:	b590      	push	{r4, r7, lr}
 80069fe:	b087      	sub	sp, #28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	331a      	adds	r3, #26
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fe ff82 	bl	8005914 <ld_word>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <cmp_lfn+0x1e>
 8006a16:	2300      	movs	r3, #0
 8006a18:	e059      	b.n	8006ace <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a22:	1e5a      	subs	r2, r3, #1
 8006a24:	4613      	mov	r3, r2
 8006a26:	005b      	lsls	r3, r3, #1
 8006a28:	4413      	add	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006a30:	2301      	movs	r3, #1
 8006a32:	81fb      	strh	r3, [r7, #14]
 8006a34:	2300      	movs	r3, #0
 8006a36:	613b      	str	r3, [r7, #16]
 8006a38:	e033      	b.n	8006aa2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006a3a:	4a27      	ldr	r2, [pc, #156]	@ (8006ad8 <cmp_lfn+0xdc>)
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	4413      	add	r3, r2
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	4413      	add	r3, r2
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fe ff63 	bl	8005914 <ld_word>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006a52:	89fb      	ldrh	r3, [r7, #14]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01a      	beq.n	8006a8e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2bfe      	cmp	r3, #254	@ 0xfe
 8006a5c:	d812      	bhi.n	8006a84 <cmp_lfn+0x88>
 8006a5e:	89bb      	ldrh	r3, [r7, #12]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f002 fa83 	bl	8008f6c <ff_wtoupper>
 8006a66:	4603      	mov	r3, r0
 8006a68:	461c      	mov	r4, r3
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	617a      	str	r2, [r7, #20]
 8006a70:	005b      	lsls	r3, r3, #1
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	4413      	add	r3, r2
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f002 fa77 	bl	8008f6c <ff_wtoupper>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	429c      	cmp	r4, r3
 8006a82:	d001      	beq.n	8006a88 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006a84:	2300      	movs	r3, #0
 8006a86:	e022      	b.n	8006ace <cmp_lfn+0xd2>
			}
			wc = uc;
 8006a88:	89bb      	ldrh	r3, [r7, #12]
 8006a8a:	81fb      	strh	r3, [r7, #14]
 8006a8c:	e006      	b.n	8006a9c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006a8e:	89bb      	ldrh	r3, [r7, #12]
 8006a90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d001      	beq.n	8006a9c <cmp_lfn+0xa0>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	e018      	b.n	8006ace <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	613b      	str	r3, [r7, #16]
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	2b0c      	cmp	r3, #12
 8006aa6:	d9c8      	bls.n	8006a3a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00b      	beq.n	8006acc <cmp_lfn+0xd0>
 8006ab4:	89fb      	ldrh	r3, [r7, #14]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d008      	beq.n	8006acc <cmp_lfn+0xd0>
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d001      	beq.n	8006acc <cmp_lfn+0xd0>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	e000      	b.n	8006ace <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006acc:	2301      	movs	r3, #1
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd90      	pop	{r4, r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	08009e2c 	.word	0x08009e2c

08006adc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b088      	sub	sp, #32
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	461a      	mov	r2, r3
 8006aea:	460b      	mov	r3, r1
 8006aec:	71fb      	strb	r3, [r7, #7]
 8006aee:	4613      	mov	r3, r2
 8006af0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	330d      	adds	r3, #13
 8006af6:	79ba      	ldrb	r2, [r7, #6]
 8006af8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	330b      	adds	r3, #11
 8006afe:	220f      	movs	r2, #15
 8006b00:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	330c      	adds	r3, #12
 8006b06:	2200      	movs	r2, #0
 8006b08:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	331a      	adds	r3, #26
 8006b0e:	2100      	movs	r1, #0
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7fe ff3a 	bl	800598a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006b16:	79fb      	ldrb	r3, [r7, #7]
 8006b18:	1e5a      	subs	r2, r3, #1
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	4413      	add	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006b26:	2300      	movs	r3, #0
 8006b28:	82fb      	strh	r3, [r7, #22]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006b2e:	8afb      	ldrh	r3, [r7, #22]
 8006b30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d007      	beq.n	8006b48 <put_lfn+0x6c>
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	1c5a      	adds	r2, r3, #1
 8006b3c:	61fa      	str	r2, [r7, #28]
 8006b3e:	005b      	lsls	r3, r3, #1
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4413      	add	r3, r2
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006b48:	4a17      	ldr	r2, [pc, #92]	@ (8006ba8 <put_lfn+0xcc>)
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	461a      	mov	r2, r3
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	4413      	add	r3, r2
 8006b56:	8afa      	ldrh	r2, [r7, #22]
 8006b58:	4611      	mov	r1, r2
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fe ff15 	bl	800598a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006b60:	8afb      	ldrh	r3, [r7, #22]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d102      	bne.n	8006b6c <put_lfn+0x90>
 8006b66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006b6a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	61bb      	str	r3, [r7, #24]
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	2b0c      	cmp	r3, #12
 8006b76:	d9da      	bls.n	8006b2e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006b78:	8afb      	ldrh	r3, [r7, #22]
 8006b7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d006      	beq.n	8006b90 <put_lfn+0xb4>
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	4413      	add	r3, r2
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d103      	bne.n	8006b98 <put_lfn+0xbc>
 8006b90:	79fb      	ldrb	r3, [r7, #7]
 8006b92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b96:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	79fa      	ldrb	r2, [r7, #7]
 8006b9c:	701a      	strb	r2, [r3, #0]
}
 8006b9e:	bf00      	nop
 8006ba0:	3720      	adds	r7, #32
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	08009e2c 	.word	0x08009e2c

08006bac <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b08c      	sub	sp, #48	@ 0x30
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006bba:	220b      	movs	r2, #11
 8006bbc:	68b9      	ldr	r1, [r7, #8]
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f7fe ff2a 	bl	8005a18 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	2b05      	cmp	r3, #5
 8006bc8:	d92b      	bls.n	8006c22 <gen_numname+0x76>
		sr = seq;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006bce:	e022      	b.n	8006c16 <gen_numname+0x6a>
			wc = *lfn++;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	1c9a      	adds	r2, r3, #2
 8006bd4:	607a      	str	r2, [r7, #4]
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8006bda:	2300      	movs	r3, #0
 8006bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bde:	e017      	b.n	8006c10 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	005a      	lsls	r2, r3, #1
 8006be4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	4413      	add	r3, r2
 8006bec:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006bee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006bf0:	085b      	lsrs	r3, r3, #1
 8006bf2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d005      	beq.n	8006c0a <gen_numname+0x5e>
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8006c04:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8006c08:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c12:	2b0f      	cmp	r3, #15
 8006c14:	d9e4      	bls.n	8006be0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1d8      	bne.n	8006bd0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006c22:	2307      	movs	r3, #7
 8006c24:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	f003 030f 	and.w	r3, r3, #15
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	3330      	adds	r3, #48	@ 0x30
 8006c32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8006c36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c3a:	2b39      	cmp	r3, #57	@ 0x39
 8006c3c:	d904      	bls.n	8006c48 <gen_numname+0x9c>
 8006c3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c42:	3307      	adds	r3, #7
 8006c44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8006c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4a:	1e5a      	subs	r2, r3, #1
 8006c4c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006c4e:	3330      	adds	r3, #48	@ 0x30
 8006c50:	443b      	add	r3, r7
 8006c52:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8006c56:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	091b      	lsrs	r3, r3, #4
 8006c5e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1df      	bne.n	8006c26 <gen_numname+0x7a>
	ns[i] = '~';
 8006c66:	f107 0214 	add.w	r2, r7, #20
 8006c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c6c:	4413      	add	r3, r2
 8006c6e:	227e      	movs	r2, #126	@ 0x7e
 8006c70:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006c72:	2300      	movs	r3, #0
 8006c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c76:	e002      	b.n	8006c7e <gen_numname+0xd2>
 8006c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d205      	bcs.n	8006c92 <gen_numname+0xe6>
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8a:	4413      	add	r3, r2
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	2b20      	cmp	r3, #32
 8006c90:	d1f2      	bne.n	8006c78 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c94:	2b07      	cmp	r3, #7
 8006c96:	d807      	bhi.n	8006ca8 <gen_numname+0xfc>
 8006c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9a:	1c5a      	adds	r2, r3, #1
 8006c9c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006c9e:	3330      	adds	r3, #48	@ 0x30
 8006ca0:	443b      	add	r3, r7
 8006ca2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006ca6:	e000      	b.n	8006caa <gen_numname+0xfe>
 8006ca8:	2120      	movs	r1, #32
 8006caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	627a      	str	r2, [r7, #36]	@ 0x24
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	460a      	mov	r2, r1
 8006cb6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cba:	2b07      	cmp	r3, #7
 8006cbc:	d9e9      	bls.n	8006c92 <gen_numname+0xe6>
}
 8006cbe:	bf00      	nop
 8006cc0:	bf00      	nop
 8006cc2:	3730      	adds	r7, #48	@ 0x30
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006cd4:	230b      	movs	r3, #11
 8006cd6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	0852      	lsrs	r2, r2, #1
 8006cde:	01db      	lsls	r3, r3, #7
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	1c59      	adds	r1, r3, #1
 8006ce8:	6079      	str	r1, [r7, #4]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	4413      	add	r3, r2
 8006cee:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	60bb      	str	r3, [r7, #8]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1ed      	bne.n	8006cd8 <sum_sfn+0x10>
	return sum;
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b086      	sub	sp, #24
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006d18:	2100      	movs	r1, #0
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff fc89 	bl	8006632 <dir_sdi>
 8006d20:	4603      	mov	r3, r0
 8006d22:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <dir_find+0x24>
 8006d2a:	7dfb      	ldrb	r3, [r7, #23]
 8006d2c:	e0a9      	b.n	8006e82 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006d2e:	23ff      	movs	r3, #255	@ 0xff
 8006d30:	753b      	strb	r3, [r7, #20]
 8006d32:	7d3b      	ldrb	r3, [r7, #20]
 8006d34:	757b      	strb	r3, [r7, #21]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d3c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	4619      	mov	r1, r3
 8006d44:	6938      	ldr	r0, [r7, #16]
 8006d46:	f7ff f895 	bl	8005e74 <move_window>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f040 8090 	bne.w	8006e76 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006d5e:	7dbb      	ldrb	r3, [r7, #22]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d102      	bne.n	8006d6a <dir_find+0x60>
 8006d64:	2304      	movs	r3, #4
 8006d66:	75fb      	strb	r3, [r7, #23]
 8006d68:	e08a      	b.n	8006e80 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	330b      	adds	r3, #11
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d76:	73fb      	strb	r3, [r7, #15]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	7bfa      	ldrb	r2, [r7, #15]
 8006d7c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006d7e:	7dbb      	ldrb	r3, [r7, #22]
 8006d80:	2be5      	cmp	r3, #229	@ 0xe5
 8006d82:	d007      	beq.n	8006d94 <dir_find+0x8a>
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	f003 0308 	and.w	r3, r3, #8
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d009      	beq.n	8006da2 <dir_find+0x98>
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
 8006d90:	2b0f      	cmp	r3, #15
 8006d92:	d006      	beq.n	8006da2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006d94:	23ff      	movs	r3, #255	@ 0xff
 8006d96:	757b      	strb	r3, [r7, #21]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006da0:	e05e      	b.n	8006e60 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
 8006da4:	2b0f      	cmp	r3, #15
 8006da6:	d136      	bne.n	8006e16 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d154      	bne.n	8006e60 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006db6:	7dbb      	ldrb	r3, [r7, #22]
 8006db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00d      	beq.n	8006ddc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	7b5b      	ldrb	r3, [r3, #13]
 8006dc6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006dc8:	7dbb      	ldrb	r3, [r7, #22]
 8006dca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dce:	75bb      	strb	r3, [r7, #22]
 8006dd0:	7dbb      	ldrb	r3, [r7, #22]
 8006dd2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	695a      	ldr	r2, [r3, #20]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006ddc:	7dba      	ldrb	r2, [r7, #22]
 8006dde:	7d7b      	ldrb	r3, [r7, #21]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d115      	bne.n	8006e10 <dir_find+0x106>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	330d      	adds	r3, #13
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	7d3a      	ldrb	r2, [r7, #20]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d10e      	bne.n	8006e10 <dir_find+0x106>
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	691a      	ldr	r2, [r3, #16]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	f7ff fdfd 	bl	80069fc <cmp_lfn>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d003      	beq.n	8006e10 <dir_find+0x106>
 8006e08:	7d7b      	ldrb	r3, [r7, #21]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	e000      	b.n	8006e12 <dir_find+0x108>
 8006e10:	23ff      	movs	r3, #255	@ 0xff
 8006e12:	757b      	strb	r3, [r7, #21]
 8006e14:	e024      	b.n	8006e60 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006e16:	7d7b      	ldrb	r3, [r7, #21]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d109      	bne.n	8006e30 <dir_find+0x126>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7ff ff51 	bl	8006cc8 <sum_sfn>
 8006e26:	4603      	mov	r3, r0
 8006e28:	461a      	mov	r2, r3
 8006e2a:	7d3b      	ldrb	r3, [r7, #20]
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d024      	beq.n	8006e7a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <dir_find+0x14a>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a18      	ldr	r0, [r3, #32]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	3324      	adds	r3, #36	@ 0x24
 8006e46:	220b      	movs	r2, #11
 8006e48:	4619      	mov	r1, r3
 8006e4a:	f7fe fe21 	bl	8005a90 <mem_cmp>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d014      	beq.n	8006e7e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006e54:	23ff      	movs	r3, #255	@ 0xff
 8006e56:	757b      	strb	r3, [r7, #21]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e5e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006e60:	2100      	movs	r1, #0
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7ff fc6e 	bl	8006744 <dir_next>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006e6c:	7dfb      	ldrb	r3, [r7, #23]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f43f af65 	beq.w	8006d3e <dir_find+0x34>
 8006e74:	e004      	b.n	8006e80 <dir_find+0x176>
		if (res != FR_OK) break;
 8006e76:	bf00      	nop
 8006e78:	e002      	b.n	8006e80 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006e7a:	bf00      	nop
 8006e7c:	e000      	b.n	8006e80 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006e7e:	bf00      	nop

	return res;
 8006e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3718      	adds	r7, #24
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
	...

08006e8c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08c      	sub	sp, #48	@ 0x30
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006ea0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <dir_register+0x20>
 8006ea8:	2306      	movs	r3, #6
 8006eaa:	e0e0      	b.n	800706e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006eac:	2300      	movs	r3, #0
 8006eae:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eb0:	e002      	b.n	8006eb8 <dir_register+0x2c>
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	691a      	ldr	r2, [r3, #16]
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	4413      	add	r3, r2
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1f4      	bne.n	8006eb2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8006ece:	f107 030c 	add.w	r3, r7, #12
 8006ed2:	220c      	movs	r2, #12
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fe fd9f 	bl	8005a18 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d032      	beq.n	8006f4a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2240      	movs	r2, #64	@ 0x40
 8006ee8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8006eec:	2301      	movs	r3, #1
 8006eee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ef0:	e016      	b.n	8006f20 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	691a      	ldr	r2, [r3, #16]
 8006efc:	f107 010c 	add.w	r1, r7, #12
 8006f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f02:	f7ff fe53 	bl	8006bac <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff feff 	bl	8006d0a <dir_find>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8006f12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d106      	bne.n	8006f28 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f22:	2b63      	cmp	r3, #99	@ 0x63
 8006f24:	d9e5      	bls.n	8006ef2 <dir_register+0x66>
 8006f26:	e000      	b.n	8006f2a <dir_register+0x9e>
			if (res != FR_OK) break;
 8006f28:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f2c:	2b64      	cmp	r3, #100	@ 0x64
 8006f2e:	d101      	bne.n	8006f34 <dir_register+0xa8>
 8006f30:	2307      	movs	r3, #7
 8006f32:	e09c      	b.n	800706e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006f34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	d002      	beq.n	8006f42 <dir_register+0xb6>
 8006f3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006f40:	e095      	b.n	800706e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006f42:	7dfa      	ldrb	r2, [r7, #23]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006f4a:	7dfb      	ldrb	r3, [r7, #23]
 8006f4c:	f003 0302 	and.w	r3, r3, #2
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d007      	beq.n	8006f64 <dir_register+0xd8>
 8006f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f56:	330c      	adds	r3, #12
 8006f58:	4a47      	ldr	r2, [pc, #284]	@ (8007078 <dir_register+0x1ec>)
 8006f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f5e:	089b      	lsrs	r3, r3, #2
 8006f60:	3301      	adds	r3, #1
 8006f62:	e000      	b.n	8006f66 <dir_register+0xda>
 8006f64:	2301      	movs	r3, #1
 8006f66:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006f68:	6a39      	ldr	r1, [r7, #32]
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f7ff fcc0 	bl	80068f0 <dir_alloc>
 8006f70:	4603      	mov	r3, r0
 8006f72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006f76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d148      	bne.n	8007010 <dir_register+0x184>
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	3b01      	subs	r3, #1
 8006f82:	623b      	str	r3, [r7, #32]
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d042      	beq.n	8007010 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	695a      	ldr	r2, [r3, #20]
 8006f8e:	6a3b      	ldr	r3, [r7, #32]
 8006f90:	015b      	lsls	r3, r3, #5
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	4619      	mov	r1, r3
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7ff fb4b 	bl	8006632 <dir_sdi>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8006fa2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d132      	bne.n	8007010 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	3324      	adds	r3, #36	@ 0x24
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7ff fe8a 	bl	8006cc8 <sum_sfn>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	69db      	ldr	r3, [r3, #28]
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	69f8      	ldr	r0, [r7, #28]
 8006fc0:	f7fe ff58 	bl	8005e74 <move_window>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8006fca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d11d      	bne.n	800700e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	6918      	ldr	r0, [r3, #16]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a19      	ldr	r1, [r3, #32]
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	7efb      	ldrb	r3, [r7, #27]
 8006fe0:	f7ff fd7c 	bl	8006adc <put_lfn>
				fs->wflag = 1;
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006fea:	2100      	movs	r1, #0
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7ff fba9 	bl	8006744 <dir_next>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8006ff8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d107      	bne.n	8007010 <dir_register+0x184>
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	3b01      	subs	r3, #1
 8007004:	623b      	str	r3, [r7, #32]
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1d5      	bne.n	8006fb8 <dir_register+0x12c>
 800700c:	e000      	b.n	8007010 <dir_register+0x184>
				if (res != FR_OK) break;
 800700e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007010:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007014:	2b00      	cmp	r3, #0
 8007016:	d128      	bne.n	800706a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	69db      	ldr	r3, [r3, #28]
 800701c:	4619      	mov	r1, r3
 800701e:	69f8      	ldr	r0, [r7, #28]
 8007020:	f7fe ff28 	bl	8005e74 <move_window>
 8007024:	4603      	mov	r3, r0
 8007026:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800702a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800702e:	2b00      	cmp	r3, #0
 8007030:	d11b      	bne.n	800706a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	2220      	movs	r2, #32
 8007038:	2100      	movs	r1, #0
 800703a:	4618      	mov	r0, r3
 800703c:	f7fe fd0d 	bl	8005a5a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a18      	ldr	r0, [r3, #32]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	3324      	adds	r3, #36	@ 0x24
 8007048:	220b      	movs	r2, #11
 800704a:	4619      	mov	r1, r3
 800704c:	f7fe fce4 	bl	8005a18 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	330c      	adds	r3, #12
 800705c:	f002 0218 	and.w	r2, r2, #24
 8007060:	b2d2      	uxtb	r2, r2
 8007062:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	2201      	movs	r2, #1
 8007068:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800706a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800706e:	4618      	mov	r0, r3
 8007070:	3730      	adds	r7, #48	@ 0x30
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	4ec4ec4f 	.word	0x4ec4ec4f

0800707c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b08a      	sub	sp, #40	@ 0x28
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	613b      	str	r3, [r7, #16]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	60fb      	str	r3, [r7, #12]
 8007094:	2300      	movs	r3, #0
 8007096:	617b      	str	r3, [r7, #20]
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	61ba      	str	r2, [r7, #24]
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	4413      	add	r3, r2
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80070aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070ac:	2b1f      	cmp	r3, #31
 80070ae:	d940      	bls.n	8007132 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80070b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070b2:	2b2f      	cmp	r3, #47	@ 0x2f
 80070b4:	d006      	beq.n	80070c4 <create_name+0x48>
 80070b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80070ba:	d110      	bne.n	80070de <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80070bc:	e002      	b.n	80070c4 <create_name+0x48>
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	3301      	adds	r3, #1
 80070c2:	61bb      	str	r3, [r7, #24]
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	4413      	add	r3, r2
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	2b2f      	cmp	r3, #47	@ 0x2f
 80070ce:	d0f6      	beq.n	80070be <create_name+0x42>
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	4413      	add	r3, r2
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	2b5c      	cmp	r3, #92	@ 0x5c
 80070da:	d0f0      	beq.n	80070be <create_name+0x42>
			break;
 80070dc:	e02a      	b.n	8007134 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2bfe      	cmp	r3, #254	@ 0xfe
 80070e2:	d901      	bls.n	80070e8 <create_name+0x6c>
 80070e4:	2306      	movs	r3, #6
 80070e6:	e17d      	b.n	80073e4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80070e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80070ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070f0:	2101      	movs	r1, #1
 80070f2:	4618      	mov	r0, r3
 80070f4:	f001 fefe 	bl	8008ef4 <ff_convert>
 80070f8:	4603      	mov	r3, r0
 80070fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80070fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <create_name+0x8a>
 8007102:	2306      	movs	r3, #6
 8007104:	e16e      	b.n	80073e4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007106:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007108:	2b7f      	cmp	r3, #127	@ 0x7f
 800710a:	d809      	bhi.n	8007120 <create_name+0xa4>
 800710c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800710e:	4619      	mov	r1, r3
 8007110:	488d      	ldr	r0, [pc, #564]	@ (8007348 <create_name+0x2cc>)
 8007112:	f7fe fce4 	bl	8005ade <chk_chr>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <create_name+0xa4>
 800711c:	2306      	movs	r3, #6
 800711e:	e161      	b.n	80073e4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	1c5a      	adds	r2, r3, #1
 8007124:	617a      	str	r2, [r7, #20]
 8007126:	005b      	lsls	r3, r3, #1
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	4413      	add	r3, r2
 800712c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800712e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007130:	e7b4      	b.n	800709c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007132:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	441a      	add	r2, r3
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800713e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007140:	2b1f      	cmp	r3, #31
 8007142:	d801      	bhi.n	8007148 <create_name+0xcc>
 8007144:	2304      	movs	r3, #4
 8007146:	e000      	b.n	800714a <create_name+0xce>
 8007148:	2300      	movs	r3, #0
 800714a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800714e:	e011      	b.n	8007174 <create_name+0xf8>
		w = lfn[di - 1];
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007156:	3b01      	subs	r3, #1
 8007158:	005b      	lsls	r3, r3, #1
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	4413      	add	r3, r2
 800715e:	881b      	ldrh	r3, [r3, #0]
 8007160:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8007162:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007164:	2b20      	cmp	r3, #32
 8007166:	d002      	beq.n	800716e <create_name+0xf2>
 8007168:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800716a:	2b2e      	cmp	r3, #46	@ 0x2e
 800716c:	d106      	bne.n	800717c <create_name+0x100>
		di--;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	3b01      	subs	r3, #1
 8007172:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1ea      	bne.n	8007150 <create_name+0xd4>
 800717a:	e000      	b.n	800717e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800717c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	005b      	lsls	r3, r3, #1
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	4413      	add	r3, r2
 8007186:	2200      	movs	r2, #0
 8007188:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d101      	bne.n	8007194 <create_name+0x118>
 8007190:	2306      	movs	r3, #6
 8007192:	e127      	b.n	80073e4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	3324      	adds	r3, #36	@ 0x24
 8007198:	220b      	movs	r2, #11
 800719a:	2120      	movs	r1, #32
 800719c:	4618      	mov	r0, r3
 800719e:	f7fe fc5c 	bl	8005a5a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80071a2:	2300      	movs	r3, #0
 80071a4:	61bb      	str	r3, [r7, #24]
 80071a6:	e002      	b.n	80071ae <create_name+0x132>
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	3301      	adds	r3, #1
 80071ac:	61bb      	str	r3, [r7, #24]
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	005b      	lsls	r3, r3, #1
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	4413      	add	r3, r2
 80071b6:	881b      	ldrh	r3, [r3, #0]
 80071b8:	2b20      	cmp	r3, #32
 80071ba:	d0f5      	beq.n	80071a8 <create_name+0x12c>
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	005b      	lsls	r3, r3, #1
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	4413      	add	r3, r2
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80071c8:	d0ee      	beq.n	80071a8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d009      	beq.n	80071e4 <create_name+0x168>
 80071d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071d4:	f043 0303 	orr.w	r3, r3, #3
 80071d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80071dc:	e002      	b.n	80071e4 <create_name+0x168>
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	3b01      	subs	r3, #1
 80071e2:	617b      	str	r3, [r7, #20]
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d009      	beq.n	80071fe <create_name+0x182>
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80071f0:	3b01      	subs	r3, #1
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	4413      	add	r3, r2
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80071fc:	d1ef      	bne.n	80071de <create_name+0x162>

	i = b = 0; ni = 8;
 80071fe:	2300      	movs	r3, #0
 8007200:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007204:	2300      	movs	r3, #0
 8007206:	623b      	str	r3, [r7, #32]
 8007208:	2308      	movs	r3, #8
 800720a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	61ba      	str	r2, [r7, #24]
 8007212:	005b      	lsls	r3, r3, #1
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	4413      	add	r3, r2
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800721c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 8090 	beq.w	8007344 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007224:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007226:	2b20      	cmp	r3, #32
 8007228:	d006      	beq.n	8007238 <create_name+0x1bc>
 800722a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800722c:	2b2e      	cmp	r3, #46	@ 0x2e
 800722e:	d10a      	bne.n	8007246 <create_name+0x1ca>
 8007230:	69ba      	ldr	r2, [r7, #24]
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	429a      	cmp	r2, r3
 8007236:	d006      	beq.n	8007246 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007238:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800723c:	f043 0303 	orr.w	r3, r3, #3
 8007240:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007244:	e07d      	b.n	8007342 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007246:	6a3a      	ldr	r2, [r7, #32]
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	429a      	cmp	r2, r3
 800724c:	d203      	bcs.n	8007256 <create_name+0x1da>
 800724e:	69ba      	ldr	r2, [r7, #24]
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	429a      	cmp	r2, r3
 8007254:	d123      	bne.n	800729e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	2b0b      	cmp	r3, #11
 800725a:	d106      	bne.n	800726a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800725c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007260:	f043 0303 	orr.w	r3, r3, #3
 8007264:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007268:	e075      	b.n	8007356 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800726a:	69ba      	ldr	r2, [r7, #24]
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	429a      	cmp	r2, r3
 8007270:	d005      	beq.n	800727e <create_name+0x202>
 8007272:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007276:	f043 0303 	orr.w	r3, r3, #3
 800727a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800727e:	69ba      	ldr	r2, [r7, #24]
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	429a      	cmp	r2, r3
 8007284:	d866      	bhi.n	8007354 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	61bb      	str	r3, [r7, #24]
 800728a:	2308      	movs	r3, #8
 800728c:	623b      	str	r3, [r7, #32]
 800728e:	230b      	movs	r3, #11
 8007290:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007292:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800729c:	e051      	b.n	8007342 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800729e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80072a2:	d914      	bls.n	80072ce <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80072a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072a6:	2100      	movs	r1, #0
 80072a8:	4618      	mov	r0, r3
 80072aa:	f001 fe23 	bl	8008ef4 <ff_convert>
 80072ae:	4603      	mov	r3, r0
 80072b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80072b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d004      	beq.n	80072c2 <create_name+0x246>
 80072b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072ba:	3b80      	subs	r3, #128	@ 0x80
 80072bc:	4a23      	ldr	r2, [pc, #140]	@ (800734c <create_name+0x2d0>)
 80072be:	5cd3      	ldrb	r3, [r2, r3]
 80072c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80072c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072c6:	f043 0302 	orr.w	r3, r3, #2
 80072ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80072ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d007      	beq.n	80072e4 <create_name+0x268>
 80072d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072d6:	4619      	mov	r1, r3
 80072d8:	481d      	ldr	r0, [pc, #116]	@ (8007350 <create_name+0x2d4>)
 80072da:	f7fe fc00 	bl	8005ade <chk_chr>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d008      	beq.n	80072f6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80072e4:	235f      	movs	r3, #95	@ 0x5f
 80072e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80072e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072ec:	f043 0303 	orr.w	r3, r3, #3
 80072f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80072f4:	e01b      	b.n	800732e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80072f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072f8:	2b40      	cmp	r3, #64	@ 0x40
 80072fa:	d909      	bls.n	8007310 <create_name+0x294>
 80072fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072fe:	2b5a      	cmp	r3, #90	@ 0x5a
 8007300:	d806      	bhi.n	8007310 <create_name+0x294>
					b |= 2;
 8007302:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007306:	f043 0302 	orr.w	r3, r3, #2
 800730a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800730e:	e00e      	b.n	800732e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007310:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007312:	2b60      	cmp	r3, #96	@ 0x60
 8007314:	d90b      	bls.n	800732e <create_name+0x2b2>
 8007316:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007318:	2b7a      	cmp	r3, #122	@ 0x7a
 800731a:	d808      	bhi.n	800732e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800731c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007320:	f043 0301 	orr.w	r3, r3, #1
 8007324:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007328:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800732a:	3b20      	subs	r3, #32
 800732c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	623a      	str	r2, [r7, #32]
 8007334:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007336:	b2d1      	uxtb	r1, r2
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	4413      	add	r3, r2
 800733c:	460a      	mov	r2, r1
 800733e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007342:	e763      	b.n	800720c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007344:	bf00      	nop
 8007346:	e006      	b.n	8007356 <create_name+0x2da>
 8007348:	08009d38 	.word	0x08009d38
 800734c:	08009dac 	.word	0x08009dac
 8007350:	08009d44 	.word	0x08009d44
			if (si > di) break;			/* No extension */
 8007354:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800735c:	2be5      	cmp	r3, #229	@ 0xe5
 800735e:	d103      	bne.n	8007368 <create_name+0x2ec>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2205      	movs	r2, #5
 8007364:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	2b08      	cmp	r3, #8
 800736c:	d104      	bne.n	8007378 <create_name+0x2fc>
 800736e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007378:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800737c:	f003 030c 	and.w	r3, r3, #12
 8007380:	2b0c      	cmp	r3, #12
 8007382:	d005      	beq.n	8007390 <create_name+0x314>
 8007384:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007388:	f003 0303 	and.w	r3, r3, #3
 800738c:	2b03      	cmp	r3, #3
 800738e:	d105      	bne.n	800739c <create_name+0x320>
 8007390:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007394:	f043 0302 	orr.w	r3, r3, #2
 8007398:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800739c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d117      	bne.n	80073d8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80073a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80073ac:	f003 0303 	and.w	r3, r3, #3
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d105      	bne.n	80073c0 <create_name+0x344>
 80073b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073b8:	f043 0310 	orr.w	r3, r3, #16
 80073bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80073c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80073c4:	f003 030c 	and.w	r3, r3, #12
 80073c8:	2b04      	cmp	r3, #4
 80073ca:	d105      	bne.n	80073d8 <create_name+0x35c>
 80073cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073d0:	f043 0308 	orr.w	r3, r3, #8
 80073d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80073de:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80073e2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3728      	adds	r7, #40	@ 0x28
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007400:	e002      	b.n	8007408 <follow_path+0x1c>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	3301      	adds	r3, #1
 8007406:	603b      	str	r3, [r7, #0]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	2b2f      	cmp	r3, #47	@ 0x2f
 800740e:	d0f8      	beq.n	8007402 <follow_path+0x16>
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	2b5c      	cmp	r3, #92	@ 0x5c
 8007416:	d0f4      	beq.n	8007402 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	2200      	movs	r2, #0
 800741c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	2b1f      	cmp	r3, #31
 8007424:	d80a      	bhi.n	800743c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2280      	movs	r2, #128	@ 0x80
 800742a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800742e:	2100      	movs	r1, #0
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7ff f8fe 	bl	8006632 <dir_sdi>
 8007436:	4603      	mov	r3, r0
 8007438:	75fb      	strb	r3, [r7, #23]
 800743a:	e048      	b.n	80074ce <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800743c:	463b      	mov	r3, r7
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7ff fe1b 	bl	800707c <create_name>
 8007446:	4603      	mov	r3, r0
 8007448:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800744a:	7dfb      	ldrb	r3, [r7, #23]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d139      	bne.n	80074c4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7ff fc5a 	bl	8006d0a <dir_find>
 8007456:	4603      	mov	r3, r0
 8007458:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007460:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007462:	7dfb      	ldrb	r3, [r7, #23]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00a      	beq.n	800747e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007468:	7dfb      	ldrb	r3, [r7, #23]
 800746a:	2b04      	cmp	r3, #4
 800746c:	d12c      	bne.n	80074c8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800746e:	7afb      	ldrb	r3, [r7, #11]
 8007470:	f003 0304 	and.w	r3, r3, #4
 8007474:	2b00      	cmp	r3, #0
 8007476:	d127      	bne.n	80074c8 <follow_path+0xdc>
 8007478:	2305      	movs	r3, #5
 800747a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800747c:	e024      	b.n	80074c8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800747e:	7afb      	ldrb	r3, [r7, #11]
 8007480:	f003 0304 	and.w	r3, r3, #4
 8007484:	2b00      	cmp	r3, #0
 8007486:	d121      	bne.n	80074cc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	799b      	ldrb	r3, [r3, #6]
 800748c:	f003 0310 	and.w	r3, r3, #16
 8007490:	2b00      	cmp	r3, #0
 8007492:	d102      	bne.n	800749a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007494:	2305      	movs	r3, #5
 8007496:	75fb      	strb	r3, [r7, #23]
 8007498:	e019      	b.n	80074ce <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	8992      	ldrh	r2, [r2, #12]
 80074a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80074ac:	fb00 f202 	mul.w	r2, r0, r2
 80074b0:	1a9b      	subs	r3, r3, r2
 80074b2:	440b      	add	r3, r1
 80074b4:	4619      	mov	r1, r3
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f7ff fa61 	bl	800697e <ld_clust>
 80074bc:	4602      	mov	r2, r0
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80074c2:	e7bb      	b.n	800743c <follow_path+0x50>
			if (res != FR_OK) break;
 80074c4:	bf00      	nop
 80074c6:	e002      	b.n	80074ce <follow_path+0xe2>
				break;
 80074c8:	bf00      	nop
 80074ca:	e000      	b.n	80074ce <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80074cc:	bf00      	nop
			}
		}
	}

	return res;
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3718      	adds	r7, #24
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80074d8:	b480      	push	{r7}
 80074da:	b087      	sub	sp, #28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80074e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074e4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d031      	beq.n	8007552 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	617b      	str	r3, [r7, #20]
 80074f4:	e002      	b.n	80074fc <get_ldnumber+0x24>
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	3301      	adds	r3, #1
 80074fa:	617b      	str	r3, [r7, #20]
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	2b1f      	cmp	r3, #31
 8007502:	d903      	bls.n	800750c <get_ldnumber+0x34>
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	2b3a      	cmp	r3, #58	@ 0x3a
 800750a:	d1f4      	bne.n	80074f6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	2b3a      	cmp	r3, #58	@ 0x3a
 8007512:	d11c      	bne.n	800754e <get_ldnumber+0x76>
			tp = *path;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	1c5a      	adds	r2, r3, #1
 800751e:	60fa      	str	r2, [r7, #12]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	3b30      	subs	r3, #48	@ 0x30
 8007524:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2b09      	cmp	r3, #9
 800752a:	d80e      	bhi.n	800754a <get_ldnumber+0x72>
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	429a      	cmp	r2, r3
 8007532:	d10a      	bne.n	800754a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d107      	bne.n	800754a <get_ldnumber+0x72>
					vol = (int)i;
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	3301      	adds	r3, #1
 8007542:	617b      	str	r3, [r7, #20]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	e002      	b.n	8007554 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800754e:	2300      	movs	r3, #0
 8007550:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007552:	693b      	ldr	r3, [r7, #16]
}
 8007554:	4618      	mov	r0, r3
 8007556:	371c      	adds	r7, #28
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	70da      	strb	r2, [r3, #3]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007576:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007578:	6839      	ldr	r1, [r7, #0]
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7fe fc7a 	bl	8005e74 <move_window>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <check_fs+0x2a>
 8007586:	2304      	movs	r3, #4
 8007588:	e038      	b.n	80075fc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	3338      	adds	r3, #56	@ 0x38
 800758e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007592:	4618      	mov	r0, r3
 8007594:	f7fe f9be 	bl	8005914 <ld_word>
 8007598:	4603      	mov	r3, r0
 800759a:	461a      	mov	r2, r3
 800759c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d001      	beq.n	80075a8 <check_fs+0x48>
 80075a4:	2303      	movs	r3, #3
 80075a6:	e029      	b.n	80075fc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80075ae:	2be9      	cmp	r3, #233	@ 0xe9
 80075b0:	d009      	beq.n	80075c6 <check_fs+0x66>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80075b8:	2beb      	cmp	r3, #235	@ 0xeb
 80075ba:	d11e      	bne.n	80075fa <check_fs+0x9a>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80075c2:	2b90      	cmp	r3, #144	@ 0x90
 80075c4:	d119      	bne.n	80075fa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	3338      	adds	r3, #56	@ 0x38
 80075ca:	3336      	adds	r3, #54	@ 0x36
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fe f9b9 	bl	8005944 <ld_dword>
 80075d2:	4603      	mov	r3, r0
 80075d4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80075d8:	4a0a      	ldr	r2, [pc, #40]	@ (8007604 <check_fs+0xa4>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d101      	bne.n	80075e2 <check_fs+0x82>
 80075de:	2300      	movs	r3, #0
 80075e0:	e00c      	b.n	80075fc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3338      	adds	r3, #56	@ 0x38
 80075e6:	3352      	adds	r3, #82	@ 0x52
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fe f9ab 	bl	8005944 <ld_dword>
 80075ee:	4603      	mov	r3, r0
 80075f0:	4a05      	ldr	r2, [pc, #20]	@ (8007608 <check_fs+0xa8>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d101      	bne.n	80075fa <check_fs+0x9a>
 80075f6:	2300      	movs	r3, #0
 80075f8:	e000      	b.n	80075fc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80075fa:	2302      	movs	r3, #2
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	00544146 	.word	0x00544146
 8007608:	33544146 	.word	0x33544146

0800760c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b096      	sub	sp, #88	@ 0x58
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	4613      	mov	r3, r2
 8007618:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	2200      	movs	r2, #0
 800761e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f7ff ff59 	bl	80074d8 <get_ldnumber>
 8007626:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800762a:	2b00      	cmp	r3, #0
 800762c:	da01      	bge.n	8007632 <find_volume+0x26>
 800762e:	230b      	movs	r3, #11
 8007630:	e265      	b.n	8007afe <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007632:	4a9f      	ldr	r2, [pc, #636]	@ (80078b0 <find_volume+0x2a4>)
 8007634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800763a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800763c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <find_volume+0x3a>
 8007642:	230c      	movs	r3, #12
 8007644:	e25b      	b.n	8007afe <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800764a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800764c:	79fb      	ldrb	r3, [r7, #7]
 800764e:	f023 0301 	bic.w	r3, r3, #1
 8007652:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d01a      	beq.n	8007692 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800765c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800765e:	785b      	ldrb	r3, [r3, #1]
 8007660:	4618      	mov	r0, r3
 8007662:	f7fe f8b7 	bl	80057d4 <disk_status>
 8007666:	4603      	mov	r3, r0
 8007668:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800766c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10c      	bne.n	8007692 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d007      	beq.n	800768e <find_volume+0x82>
 800767e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007682:	f003 0304 	and.w	r3, r3, #4
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800768a:	230a      	movs	r3, #10
 800768c:	e237      	b.n	8007afe <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800768e:	2300      	movs	r3, #0
 8007690:	e235      	b.n	8007afe <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007694:	2200      	movs	r2, #0
 8007696:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800769a:	b2da      	uxtb	r2, r3
 800769c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80076a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a2:	785b      	ldrb	r3, [r3, #1]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fe f8af 	bl	8005808 <disk_initialize>
 80076aa:	4603      	mov	r3, r0
 80076ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80076b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80076b4:	f003 0301 	and.w	r3, r3, #1
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80076bc:	2303      	movs	r3, #3
 80076be:	e21e      	b.n	8007afe <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80076c0:	79fb      	ldrb	r3, [r7, #7]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d007      	beq.n	80076d6 <find_volume+0xca>
 80076c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80076ca:	f003 0304 	and.w	r3, r3, #4
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80076d2:	230a      	movs	r3, #10
 80076d4:	e213      	b.n	8007afe <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80076d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d8:	7858      	ldrb	r0, [r3, #1]
 80076da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076dc:	330c      	adds	r3, #12
 80076de:	461a      	mov	r2, r3
 80076e0:	2102      	movs	r1, #2
 80076e2:	f7fe f8f9 	bl	80058d8 <disk_ioctl>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <find_volume+0xe4>
 80076ec:	2301      	movs	r3, #1
 80076ee:	e206      	b.n	8007afe <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80076f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f2:	899b      	ldrh	r3, [r3, #12]
 80076f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076f8:	d80d      	bhi.n	8007716 <find_volume+0x10a>
 80076fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fc:	899b      	ldrh	r3, [r3, #12]
 80076fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007702:	d308      	bcc.n	8007716 <find_volume+0x10a>
 8007704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007706:	899b      	ldrh	r3, [r3, #12]
 8007708:	461a      	mov	r2, r3
 800770a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770c:	899b      	ldrh	r3, [r3, #12]
 800770e:	3b01      	subs	r3, #1
 8007710:	4013      	ands	r3, r2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <find_volume+0x10e>
 8007716:	2301      	movs	r3, #1
 8007718:	e1f1      	b.n	8007afe <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800771a:	2300      	movs	r3, #0
 800771c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800771e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007720:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007722:	f7ff ff1d 	bl	8007560 <check_fs>
 8007726:	4603      	mov	r3, r0
 8007728:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800772c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007730:	2b02      	cmp	r3, #2
 8007732:	d149      	bne.n	80077c8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007734:	2300      	movs	r3, #0
 8007736:	643b      	str	r3, [r7, #64]	@ 0x40
 8007738:	e01e      	b.n	8007778 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800773a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007740:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007742:	011b      	lsls	r3, r3, #4
 8007744:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007748:	4413      	add	r3, r2
 800774a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800774c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774e:	3304      	adds	r3, #4
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d006      	beq.n	8007764 <find_volume+0x158>
 8007756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007758:	3308      	adds	r3, #8
 800775a:	4618      	mov	r0, r3
 800775c:	f7fe f8f2 	bl	8005944 <ld_dword>
 8007760:	4602      	mov	r2, r0
 8007762:	e000      	b.n	8007766 <find_volume+0x15a>
 8007764:	2200      	movs	r2, #0
 8007766:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	3358      	adds	r3, #88	@ 0x58
 800776c:	443b      	add	r3, r7
 800776e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007774:	3301      	adds	r3, #1
 8007776:	643b      	str	r3, [r7, #64]	@ 0x40
 8007778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800777a:	2b03      	cmp	r3, #3
 800777c:	d9dd      	bls.n	800773a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800777e:	2300      	movs	r3, #0
 8007780:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <find_volume+0x182>
 8007788:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800778a:	3b01      	subs	r3, #1
 800778c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800778e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	3358      	adds	r3, #88	@ 0x58
 8007794:	443b      	add	r3, r7
 8007796:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800779a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800779c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d005      	beq.n	80077ae <find_volume+0x1a2>
 80077a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80077a4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80077a6:	f7ff fedb 	bl	8007560 <check_fs>
 80077aa:	4603      	mov	r3, r0
 80077ac:	e000      	b.n	80077b0 <find_volume+0x1a4>
 80077ae:	2303      	movs	r3, #3
 80077b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80077b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d905      	bls.n	80077c8 <find_volume+0x1bc>
 80077bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077be:	3301      	adds	r3, #1
 80077c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80077c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077c4:	2b03      	cmp	r3, #3
 80077c6:	d9e2      	bls.n	800778e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80077c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	d101      	bne.n	80077d4 <find_volume+0x1c8>
 80077d0:	2301      	movs	r3, #1
 80077d2:	e194      	b.n	8007afe <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80077d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d901      	bls.n	80077e0 <find_volume+0x1d4>
 80077dc:	230d      	movs	r3, #13
 80077de:	e18e      	b.n	8007afe <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80077e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e2:	3338      	adds	r3, #56	@ 0x38
 80077e4:	330b      	adds	r3, #11
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fe f894 	bl	8005914 <ld_word>
 80077ec:	4603      	mov	r3, r0
 80077ee:	461a      	mov	r2, r3
 80077f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f2:	899b      	ldrh	r3, [r3, #12]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d001      	beq.n	80077fc <find_volume+0x1f0>
 80077f8:	230d      	movs	r3, #13
 80077fa:	e180      	b.n	8007afe <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80077fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fe:	3338      	adds	r3, #56	@ 0x38
 8007800:	3316      	adds	r3, #22
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe f886 	bl	8005914 <ld_word>
 8007808:	4603      	mov	r3, r0
 800780a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800780c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800780e:	2b00      	cmp	r3, #0
 8007810:	d106      	bne.n	8007820 <find_volume+0x214>
 8007812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007814:	3338      	adds	r3, #56	@ 0x38
 8007816:	3324      	adds	r3, #36	@ 0x24
 8007818:	4618      	mov	r0, r3
 800781a:	f7fe f893 	bl	8005944 <ld_dword>
 800781e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007822:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007824:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007828:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800782c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800782e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007832:	789b      	ldrb	r3, [r3, #2]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d005      	beq.n	8007844 <find_volume+0x238>
 8007838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800783a:	789b      	ldrb	r3, [r3, #2]
 800783c:	2b02      	cmp	r3, #2
 800783e:	d001      	beq.n	8007844 <find_volume+0x238>
 8007840:	230d      	movs	r3, #13
 8007842:	e15c      	b.n	8007afe <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007846:	789b      	ldrb	r3, [r3, #2]
 8007848:	461a      	mov	r2, r3
 800784a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800784c:	fb02 f303 	mul.w	r3, r2, r3
 8007850:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007854:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007858:	461a      	mov	r2, r3
 800785a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800785e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007860:	895b      	ldrh	r3, [r3, #10]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d008      	beq.n	8007878 <find_volume+0x26c>
 8007866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007868:	895b      	ldrh	r3, [r3, #10]
 800786a:	461a      	mov	r2, r3
 800786c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800786e:	895b      	ldrh	r3, [r3, #10]
 8007870:	3b01      	subs	r3, #1
 8007872:	4013      	ands	r3, r2
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <find_volume+0x270>
 8007878:	230d      	movs	r3, #13
 800787a:	e140      	b.n	8007afe <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800787c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787e:	3338      	adds	r3, #56	@ 0x38
 8007880:	3311      	adds	r3, #17
 8007882:	4618      	mov	r0, r3
 8007884:	f7fe f846 	bl	8005914 <ld_word>
 8007888:	4603      	mov	r3, r0
 800788a:	461a      	mov	r2, r3
 800788c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800788e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007892:	891b      	ldrh	r3, [r3, #8]
 8007894:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007896:	8992      	ldrh	r2, [r2, #12]
 8007898:	0952      	lsrs	r2, r2, #5
 800789a:	b292      	uxth	r2, r2
 800789c:	fbb3 f1f2 	udiv	r1, r3, r2
 80078a0:	fb01 f202 	mul.w	r2, r1, r2
 80078a4:	1a9b      	subs	r3, r3, r2
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d003      	beq.n	80078b4 <find_volume+0x2a8>
 80078ac:	230d      	movs	r3, #13
 80078ae:	e126      	b.n	8007afe <find_volume+0x4f2>
 80078b0:	20000250 	.word	0x20000250

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80078b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b6:	3338      	adds	r3, #56	@ 0x38
 80078b8:	3313      	adds	r3, #19
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fe f82a 	bl	8005914 <ld_word>
 80078c0:	4603      	mov	r3, r0
 80078c2:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80078c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d106      	bne.n	80078d8 <find_volume+0x2cc>
 80078ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078cc:	3338      	adds	r3, #56	@ 0x38
 80078ce:	3320      	adds	r3, #32
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7fe f837 	bl	8005944 <ld_dword>
 80078d6:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80078d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078da:	3338      	adds	r3, #56	@ 0x38
 80078dc:	330e      	adds	r3, #14
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fe f818 	bl	8005914 <ld_word>
 80078e4:	4603      	mov	r3, r0
 80078e6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80078e8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <find_volume+0x2e6>
 80078ee:	230d      	movs	r3, #13
 80078f0:	e105      	b.n	8007afe <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80078f2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80078f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078f6:	4413      	add	r3, r2
 80078f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078fa:	8911      	ldrh	r1, [r2, #8]
 80078fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078fe:	8992      	ldrh	r2, [r2, #12]
 8007900:	0952      	lsrs	r2, r2, #5
 8007902:	b292      	uxth	r2, r2
 8007904:	fbb1 f2f2 	udiv	r2, r1, r2
 8007908:	b292      	uxth	r2, r2
 800790a:	4413      	add	r3, r2
 800790c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800790e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007912:	429a      	cmp	r2, r3
 8007914:	d201      	bcs.n	800791a <find_volume+0x30e>
 8007916:	230d      	movs	r3, #13
 8007918:	e0f1      	b.n	8007afe <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800791a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800791c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007922:	8952      	ldrh	r2, [r2, #10]
 8007924:	fbb3 f3f2 	udiv	r3, r3, r2
 8007928:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800792a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792c:	2b00      	cmp	r3, #0
 800792e:	d101      	bne.n	8007934 <find_volume+0x328>
 8007930:	230d      	movs	r3, #13
 8007932:	e0e4      	b.n	8007afe <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007934:	2303      	movs	r3, #3
 8007936:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800793a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007940:	4293      	cmp	r3, r2
 8007942:	d802      	bhi.n	800794a <find_volume+0x33e>
 8007944:	2302      	movs	r3, #2
 8007946:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800794a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007950:	4293      	cmp	r3, r2
 8007952:	d802      	bhi.n	800795a <find_volume+0x34e>
 8007954:	2301      	movs	r3, #1
 8007956:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800795a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795c:	1c9a      	adds	r2, r3, #2
 800795e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007960:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007964:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007966:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007968:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800796a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800796c:	441a      	add	r2, r3
 800796e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007970:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007972:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007976:	441a      	add	r2, r3
 8007978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800797c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007980:	2b03      	cmp	r3, #3
 8007982:	d11e      	bne.n	80079c2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007986:	3338      	adds	r3, #56	@ 0x38
 8007988:	332a      	adds	r3, #42	@ 0x2a
 800798a:	4618      	mov	r0, r3
 800798c:	f7fd ffc2 	bl	8005914 <ld_word>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <find_volume+0x38e>
 8007996:	230d      	movs	r3, #13
 8007998:	e0b1      	b.n	8007afe <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800799a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800799c:	891b      	ldrh	r3, [r3, #8]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d001      	beq.n	80079a6 <find_volume+0x39a>
 80079a2:	230d      	movs	r3, #13
 80079a4:	e0ab      	b.n	8007afe <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80079a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a8:	3338      	adds	r3, #56	@ 0x38
 80079aa:	332c      	adds	r3, #44	@ 0x2c
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7fd ffc9 	bl	8005944 <ld_dword>
 80079b2:	4602      	mov	r2, r0
 80079b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b6:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80079b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	647b      	str	r3, [r7, #68]	@ 0x44
 80079c0:	e01f      	b.n	8007a02 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80079c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c4:	891b      	ldrh	r3, [r3, #8]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d101      	bne.n	80079ce <find_volume+0x3c2>
 80079ca:	230d      	movs	r3, #13
 80079cc:	e097      	b.n	8007afe <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80079ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079d4:	441a      	add	r2, r3
 80079d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d8:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80079da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d103      	bne.n	80079ea <find_volume+0x3de>
 80079e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e4:	69db      	ldr	r3, [r3, #28]
 80079e6:	005b      	lsls	r3, r3, #1
 80079e8:	e00a      	b.n	8007a00 <find_volume+0x3f4>
 80079ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ec:	69da      	ldr	r2, [r3, #28]
 80079ee:	4613      	mov	r3, r2
 80079f0:	005b      	lsls	r3, r3, #1
 80079f2:	4413      	add	r3, r2
 80079f4:	085a      	lsrs	r2, r3, #1
 80079f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f8:	69db      	ldr	r3, [r3, #28]
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007a00:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a04:	6a1a      	ldr	r2, [r3, #32]
 8007a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a08:	899b      	ldrh	r3, [r3, #12]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a0e:	440b      	add	r3, r1
 8007a10:	3b01      	subs	r3, #1
 8007a12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007a14:	8989      	ldrh	r1, [r1, #12]
 8007a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d201      	bcs.n	8007a22 <find_volume+0x416>
 8007a1e:	230d      	movs	r3, #13
 8007a20:	e06d      	b.n	8007afe <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a28:	619a      	str	r2, [r3, #24]
 8007a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2c:	699a      	ldr	r2, [r3, #24]
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a30:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a34:	2280      	movs	r2, #128	@ 0x80
 8007a36:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007a38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d149      	bne.n	8007ad4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a42:	3338      	adds	r3, #56	@ 0x38
 8007a44:	3330      	adds	r3, #48	@ 0x30
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fd ff64 	bl	8005914 <ld_word>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d140      	bne.n	8007ad4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007a52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a54:	3301      	adds	r3, #1
 8007a56:	4619      	mov	r1, r3
 8007a58:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007a5a:	f7fe fa0b 	bl	8005e74 <move_window>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d137      	bne.n	8007ad4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a66:	2200      	movs	r2, #0
 8007a68:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a6c:	3338      	adds	r3, #56	@ 0x38
 8007a6e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fd ff4e 	bl	8005914 <ld_word>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d127      	bne.n	8007ad4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a86:	3338      	adds	r3, #56	@ 0x38
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7fd ff5b 	bl	8005944 <ld_dword>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	4a1d      	ldr	r2, [pc, #116]	@ (8007b08 <find_volume+0x4fc>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d11e      	bne.n	8007ad4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a98:	3338      	adds	r3, #56	@ 0x38
 8007a9a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fd ff50 	bl	8005944 <ld_dword>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	4a19      	ldr	r2, [pc, #100]	@ (8007b0c <find_volume+0x500>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d113      	bne.n	8007ad4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aae:	3338      	adds	r3, #56	@ 0x38
 8007ab0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7fd ff45 	bl	8005944 <ld_dword>
 8007aba:	4602      	mov	r2, r0
 8007abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007abe:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac2:	3338      	adds	r3, #56	@ 0x38
 8007ac4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7fd ff3b 	bl	8005944 <ld_dword>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007ada:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007adc:	4b0c      	ldr	r3, [pc, #48]	@ (8007b10 <find_volume+0x504>)
 8007ade:	881b      	ldrh	r3, [r3, #0]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8007b10 <find_volume+0x504>)
 8007ae6:	801a      	strh	r2, [r3, #0]
 8007ae8:	4b09      	ldr	r3, [pc, #36]	@ (8007b10 <find_volume+0x504>)
 8007aea:	881a      	ldrh	r2, [r3, #0]
 8007aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aee:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af2:	4a08      	ldr	r2, [pc, #32]	@ (8007b14 <find_volume+0x508>)
 8007af4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007af6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007af8:	f7fe f954 	bl	8005da4 <clear_lock>
#endif
	return FR_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3758      	adds	r7, #88	@ 0x58
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	41615252 	.word	0x41615252
 8007b0c:	61417272 	.word	0x61417272
 8007b10:	20000254 	.word	0x20000254
 8007b14:	20000278 	.word	0x20000278

08007b18 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007b22:	2309      	movs	r3, #9
 8007b24:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d01c      	beq.n	8007b66 <validate+0x4e>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d018      	beq.n	8007b66 <validate+0x4e>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d013      	beq.n	8007b66 <validate+0x4e>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	889a      	ldrh	r2, [r3, #4]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	88db      	ldrh	r3, [r3, #6]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d10c      	bne.n	8007b66 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	785b      	ldrb	r3, [r3, #1]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fd fe3e 	bl	80057d4 <disk_status>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <validate+0x4e>
			res = FR_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d102      	bne.n	8007b72 <validate+0x5a>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	e000      	b.n	8007b74 <validate+0x5c>
 8007b72:	2300      	movs	r3, #0
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	6013      	str	r3, [r2, #0]
	return res;
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
	...

08007b84 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b088      	sub	sp, #32
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007b96:	f107 0310 	add.w	r3, r7, #16
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7ff fc9c 	bl	80074d8 <get_ldnumber>
 8007ba0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	da01      	bge.n	8007bac <f_mount+0x28>
 8007ba8:	230b      	movs	r3, #11
 8007baa:	e02b      	b.n	8007c04 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007bac:	4a17      	ldr	r2, [pc, #92]	@ (8007c0c <f_mount+0x88>)
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bb4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d005      	beq.n	8007bc8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007bbc:	69b8      	ldr	r0, [r7, #24]
 8007bbe:	f7fe f8f1 	bl	8005da4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d002      	beq.n	8007bd4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	490d      	ldr	r1, [pc, #52]	@ (8007c0c <f_mount+0x88>)
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d002      	beq.n	8007bea <f_mount+0x66>
 8007be4:	79fb      	ldrb	r3, [r7, #7]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d001      	beq.n	8007bee <f_mount+0x6a>
 8007bea:	2300      	movs	r3, #0
 8007bec:	e00a      	b.n	8007c04 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007bee:	f107 010c 	add.w	r1, r7, #12
 8007bf2:	f107 0308 	add.w	r3, r7, #8
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7ff fd07 	bl	800760c <find_volume>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3720      	adds	r7, #32
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	20000250 	.word	0x20000250

08007c10 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b09a      	sub	sp, #104	@ 0x68
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <f_open+0x18>
 8007c24:	2309      	movs	r3, #9
 8007c26:	e1b7      	b.n	8007f98 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007c28:	79fb      	ldrb	r3, [r7, #7]
 8007c2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c2e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007c30:	79fa      	ldrb	r2, [r7, #7]
 8007c32:	f107 0114 	add.w	r1, r7, #20
 8007c36:	f107 0308 	add.w	r3, r7, #8
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7ff fce6 	bl	800760c <find_volume>
 8007c40:	4603      	mov	r3, r0
 8007c42:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8007c46:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f040 819b 	bne.w	8007f86 <f_open+0x376>
		dj.obj.fs = fs;
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	f107 0318 	add.w	r3, r7, #24
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff fbc5 	bl	80073ec <follow_path>
 8007c62:	4603      	mov	r3, r0
 8007c64:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007c68:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d118      	bne.n	8007ca2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007c70:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007c74:	b25b      	sxtb	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	da03      	bge.n	8007c82 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007c7a:	2306      	movs	r3, #6
 8007c7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007c80:	e00f      	b.n	8007ca2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007c82:	79fb      	ldrb	r3, [r7, #7]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	bf8c      	ite	hi
 8007c88:	2301      	movhi	r3, #1
 8007c8a:	2300      	movls	r3, #0
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	461a      	mov	r2, r3
 8007c90:	f107 0318 	add.w	r3, r7, #24
 8007c94:	4611      	mov	r1, r2
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fd ff3c 	bl	8005b14 <chk_lock>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007ca2:	79fb      	ldrb	r3, [r7, #7]
 8007ca4:	f003 031c 	and.w	r3, r3, #28
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d07f      	beq.n	8007dac <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007cac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d017      	beq.n	8007ce4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007cb4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007cb8:	2b04      	cmp	r3, #4
 8007cba:	d10e      	bne.n	8007cda <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007cbc:	f7fd ff86 	bl	8005bcc <enq_lock>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d006      	beq.n	8007cd4 <f_open+0xc4>
 8007cc6:	f107 0318 	add.w	r3, r7, #24
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7ff f8de 	bl	8006e8c <dir_register>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	e000      	b.n	8007cd6 <f_open+0xc6>
 8007cd4:	2312      	movs	r3, #18
 8007cd6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007cda:	79fb      	ldrb	r3, [r7, #7]
 8007cdc:	f043 0308 	orr.w	r3, r3, #8
 8007ce0:	71fb      	strb	r3, [r7, #7]
 8007ce2:	e010      	b.n	8007d06 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007ce4:	7fbb      	ldrb	r3, [r7, #30]
 8007ce6:	f003 0311 	and.w	r3, r3, #17
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d003      	beq.n	8007cf6 <f_open+0xe6>
					res = FR_DENIED;
 8007cee:	2307      	movs	r3, #7
 8007cf0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007cf4:	e007      	b.n	8007d06 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007cf6:	79fb      	ldrb	r3, [r7, #7]
 8007cf8:	f003 0304 	and.w	r3, r3, #4
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <f_open+0xf6>
 8007d00:	2308      	movs	r3, #8
 8007d02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007d06:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d168      	bne.n	8007de0 <f_open+0x1d0>
 8007d0e:	79fb      	ldrb	r3, [r7, #7]
 8007d10:	f003 0308 	and.w	r3, r3, #8
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d063      	beq.n	8007de0 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007d18:	f7fd fbe2 	bl	80054e0 <get_fattime>
 8007d1c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d20:	330e      	adds	r3, #14
 8007d22:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fd fe4b 	bl	80059c0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2c:	3316      	adds	r3, #22
 8007d2e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7fd fe45 	bl	80059c0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d38:	330b      	adds	r3, #11
 8007d3a:	2220      	movs	r2, #32
 8007d3c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d42:	4611      	mov	r1, r2
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7fe fe1a 	bl	800697e <ld_clust>
 8007d4a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007d50:	2200      	movs	r2, #0
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7fe fe32 	bl	80069bc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d5a:	331c      	adds	r3, #28
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fd fe2e 	bl	80059c0 <st_dword>
					fs->wflag = 1;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	2201      	movs	r2, #1
 8007d68:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d037      	beq.n	8007de0 <f_open+0x1d0>
						dw = fs->winsect;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d74:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007d76:	f107 0318 	add.w	r3, r7, #24
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fe fb22 	bl	80063c8 <remove_chain>
 8007d84:	4603      	mov	r3, r0
 8007d86:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8007d8a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d126      	bne.n	8007de0 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fe f86c 	bl	8005e74 <move_window>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007da6:	3a01      	subs	r2, #1
 8007da8:	615a      	str	r2, [r3, #20]
 8007daa:	e019      	b.n	8007de0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007dac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d115      	bne.n	8007de0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007db4:	7fbb      	ldrb	r3, [r7, #30]
 8007db6:	f003 0310 	and.w	r3, r3, #16
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d003      	beq.n	8007dc6 <f_open+0x1b6>
					res = FR_NO_FILE;
 8007dbe:	2304      	movs	r3, #4
 8007dc0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007dc4:	e00c      	b.n	8007de0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007dc6:	79fb      	ldrb	r3, [r7, #7]
 8007dc8:	f003 0302 	and.w	r3, r3, #2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d007      	beq.n	8007de0 <f_open+0x1d0>
 8007dd0:	7fbb      	ldrb	r3, [r7, #30]
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d002      	beq.n	8007de0 <f_open+0x1d0>
						res = FR_DENIED;
 8007dda:	2307      	movs	r3, #7
 8007ddc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007de0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d126      	bne.n	8007e36 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007de8:	79fb      	ldrb	r3, [r7, #7]
 8007dea:	f003 0308 	and.w	r3, r3, #8
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007df2:	79fb      	ldrb	r3, [r7, #7]
 8007df4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007df8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007e02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007e08:	79fb      	ldrb	r3, [r7, #7]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	bf8c      	ite	hi
 8007e0e:	2301      	movhi	r3, #1
 8007e10:	2300      	movls	r3, #0
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	461a      	mov	r2, r3
 8007e16:	f107 0318 	add.w	r3, r7, #24
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7fd fef7 	bl	8005c10 <inc_lock>
 8007e22:	4602      	mov	r2, r0
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d102      	bne.n	8007e36 <f_open+0x226>
 8007e30:	2302      	movs	r3, #2
 8007e32:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007e36:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f040 80a3 	bne.w	8007f86 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e44:	4611      	mov	r1, r2
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7fe fd99 	bl	800697e <ld_clust>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e54:	331c      	adds	r3, #28
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fd fd74 	bl	8005944 <ld_dword>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	88da      	ldrh	r2, [r3, #6]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	79fa      	ldrb	r2, [r7, #7]
 8007e7a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	3330      	adds	r3, #48	@ 0x30
 8007e92:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007e96:	2100      	movs	r1, #0
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7fd fdde 	bl	8005a5a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007e9e:	79fb      	ldrb	r3, [r7, #7]
 8007ea0:	f003 0320 	and.w	r3, r3, #32
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d06e      	beq.n	8007f86 <f_open+0x376>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d06a      	beq.n	8007f86 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	68da      	ldr	r2, [r3, #12]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	895b      	ldrh	r3, [r3, #10]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	899b      	ldrh	r3, [r3, #12]
 8007ec2:	fb02 f303 	mul.w	r3, r2, r3
 8007ec6:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ed4:	e016      	b.n	8007f04 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7fe f887 	bl	8005fee <get_fat>
 8007ee0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007ee2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d802      	bhi.n	8007eee <f_open+0x2de>
 8007ee8:	2302      	movs	r3, #2
 8007eea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007eee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ef4:	d102      	bne.n	8007efc <f_open+0x2ec>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007efc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007efe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f04:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d103      	bne.n	8007f14 <f_open+0x304>
 8007f0c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007f0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d8e0      	bhi.n	8007ed6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007f18:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007f1a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d131      	bne.n	8007f86 <f_open+0x376>
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	899b      	ldrh	r3, [r3, #12]
 8007f26:	461a      	mov	r2, r3
 8007f28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f2e:	fb01 f202 	mul.w	r2, r1, r2
 8007f32:	1a9b      	subs	r3, r3, r2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d026      	beq.n	8007f86 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fe f837 	bl	8005fb0 <clust2sect>
 8007f42:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8007f44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d103      	bne.n	8007f52 <f_open+0x342>
						res = FR_INT_ERR;
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007f50:	e019      	b.n	8007f86 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	899b      	ldrh	r3, [r3, #12]
 8007f56:	461a      	mov	r2, r3
 8007f58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f60:	441a      	add	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	7858      	ldrb	r0, [r3, #1]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6a1a      	ldr	r2, [r3, #32]
 8007f74:	2301      	movs	r3, #1
 8007f76:	f7fd fc6f 	bl	8005858 <disk_read>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d002      	beq.n	8007f86 <f_open+0x376>
 8007f80:	2301      	movs	r3, #1
 8007f82:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007f86:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d002      	beq.n	8007f94 <f_open+0x384>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007f94:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3768      	adds	r7, #104	@ 0x68
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b08e      	sub	sp, #56	@ 0x38
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
 8007fac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f107 0214 	add.w	r2, r7, #20
 8007fbe:	4611      	mov	r1, r2
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7ff fda9 	bl	8007b18 <validate>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007fcc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d107      	bne.n	8007fe4 <f_read+0x44>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	7d5b      	ldrb	r3, [r3, #21]
 8007fd8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007fdc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d002      	beq.n	8007fea <f_read+0x4a>
 8007fe4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007fe8:	e135      	b.n	8008256 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	7d1b      	ldrb	r3, [r3, #20]
 8007fee:	f003 0301 	and.w	r3, r3, #1
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d101      	bne.n	8007ffa <f_read+0x5a>
 8007ff6:	2307      	movs	r3, #7
 8007ff8:	e12d      	b.n	8008256 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	68da      	ldr	r2, [r3, #12]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	6a3b      	ldr	r3, [r7, #32]
 800800a:	429a      	cmp	r2, r3
 800800c:	f240 811e 	bls.w	800824c <f_read+0x2ac>
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008014:	e11a      	b.n	800824c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	699b      	ldr	r3, [r3, #24]
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	8992      	ldrh	r2, [r2, #12]
 800801e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008022:	fb01 f202 	mul.w	r2, r1, r2
 8008026:	1a9b      	subs	r3, r3, r2
 8008028:	2b00      	cmp	r3, #0
 800802a:	f040 80d5 	bne.w	80081d8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	8992      	ldrh	r2, [r2, #12]
 8008036:	fbb3 f3f2 	udiv	r3, r3, r2
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	8952      	ldrh	r2, [r2, #10]
 800803e:	3a01      	subs	r2, #1
 8008040:	4013      	ands	r3, r2
 8008042:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d12f      	bne.n	80080aa <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d103      	bne.n	800805a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	633b      	str	r3, [r7, #48]	@ 0x30
 8008058:	e013      	b.n	8008082 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805e:	2b00      	cmp	r3, #0
 8008060:	d007      	beq.n	8008072 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	4619      	mov	r1, r3
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f7fe faaa 	bl	80065c2 <clmt_clust>
 800806e:	6338      	str	r0, [r7, #48]	@ 0x30
 8008070:	e007      	b.n	8008082 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	4619      	mov	r1, r3
 800807a:	4610      	mov	r0, r2
 800807c:	f7fd ffb7 	bl	8005fee <get_fat>
 8008080:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008084:	2b01      	cmp	r3, #1
 8008086:	d804      	bhi.n	8008092 <f_read+0xf2>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2202      	movs	r2, #2
 800808c:	755a      	strb	r2, [r3, #21]
 800808e:	2302      	movs	r3, #2
 8008090:	e0e1      	b.n	8008256 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008094:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008098:	d104      	bne.n	80080a4 <f_read+0x104>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2201      	movs	r2, #1
 800809e:	755a      	strb	r2, [r3, #21]
 80080a0:	2301      	movs	r3, #1
 80080a2:	e0d8      	b.n	8008256 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080a8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	4619      	mov	r1, r3
 80080b2:	4610      	mov	r0, r2
 80080b4:	f7fd ff7c 	bl	8005fb0 <clust2sect>
 80080b8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d104      	bne.n	80080ca <f_read+0x12a>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2202      	movs	r2, #2
 80080c4:	755a      	strb	r2, [r3, #21]
 80080c6:	2302      	movs	r3, #2
 80080c8:	e0c5      	b.n	8008256 <f_read+0x2b6>
			sect += csect;
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	4413      	add	r3, r2
 80080d0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	899b      	ldrh	r3, [r3, #12]
 80080d6:	461a      	mov	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	fbb3 f3f2 	udiv	r3, r3, r2
 80080de:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80080e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d041      	beq.n	800816a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80080e6:	69fa      	ldr	r2, [r7, #28]
 80080e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ea:	4413      	add	r3, r2
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	8952      	ldrh	r2, [r2, #10]
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d905      	bls.n	8008100 <f_read+0x160>
					cc = fs->csize - csect;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	895b      	ldrh	r3, [r3, #10]
 80080f8:	461a      	mov	r2, r3
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	7858      	ldrb	r0, [r3, #1]
 8008104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008106:	69ba      	ldr	r2, [r7, #24]
 8008108:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800810a:	f7fd fba5 	bl	8005858 <disk_read>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d004      	beq.n	800811e <f_read+0x17e>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2201      	movs	r2, #1
 8008118:	755a      	strb	r2, [r3, #21]
 800811a:	2301      	movs	r3, #1
 800811c:	e09b      	b.n	8008256 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	7d1b      	ldrb	r3, [r3, #20]
 8008122:	b25b      	sxtb	r3, r3
 8008124:	2b00      	cmp	r3, #0
 8008126:	da18      	bge.n	800815a <f_read+0x1ba>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6a1a      	ldr	r2, [r3, #32]
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008132:	429a      	cmp	r2, r3
 8008134:	d911      	bls.n	800815a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6a1a      	ldr	r2, [r3, #32]
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	8992      	ldrh	r2, [r2, #12]
 8008142:	fb02 f303 	mul.w	r3, r2, r3
 8008146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008148:	18d0      	adds	r0, r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	899b      	ldrh	r3, [r3, #12]
 8008154:	461a      	mov	r2, r3
 8008156:	f7fd fc5f 	bl	8005a18 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	899b      	ldrh	r3, [r3, #12]
 800815e:	461a      	mov	r2, r3
 8008160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008162:	fb02 f303 	mul.w	r3, r2, r3
 8008166:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8008168:	e05c      	b.n	8008224 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	69ba      	ldr	r2, [r7, #24]
 8008170:	429a      	cmp	r2, r3
 8008172:	d02e      	beq.n	80081d2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	7d1b      	ldrb	r3, [r3, #20]
 8008178:	b25b      	sxtb	r3, r3
 800817a:	2b00      	cmp	r3, #0
 800817c:	da18      	bge.n	80081b0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	7858      	ldrb	r0, [r3, #1]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6a1a      	ldr	r2, [r3, #32]
 800818c:	2301      	movs	r3, #1
 800818e:	f7fd fb83 	bl	8005898 <disk_write>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d004      	beq.n	80081a2 <f_read+0x202>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2201      	movs	r2, #1
 800819c:	755a      	strb	r2, [r3, #21]
 800819e:	2301      	movs	r3, #1
 80081a0:	e059      	b.n	8008256 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	7d1b      	ldrb	r3, [r3, #20]
 80081a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	7858      	ldrb	r0, [r3, #1]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80081ba:	2301      	movs	r3, #1
 80081bc:	69ba      	ldr	r2, [r7, #24]
 80081be:	f7fd fb4b 	bl	8005858 <disk_read>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d004      	beq.n	80081d2 <f_read+0x232>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2201      	movs	r2, #1
 80081cc:	755a      	strb	r2, [r3, #21]
 80081ce:	2301      	movs	r3, #1
 80081d0:	e041      	b.n	8008256 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	69ba      	ldr	r2, [r7, #24]
 80081d6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	899b      	ldrh	r3, [r3, #12]
 80081dc:	4618      	mov	r0, r3
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	8992      	ldrh	r2, [r2, #12]
 80081e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80081ea:	fb01 f202 	mul.w	r2, r1, r2
 80081ee:	1a9b      	subs	r3, r3, r2
 80081f0:	1ac3      	subs	r3, r0, r3
 80081f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80081f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d901      	bls.n	8008200 <f_read+0x260>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	8992      	ldrh	r2, [r2, #12]
 800820e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008212:	fb00 f202 	mul.w	r2, r0, r2
 8008216:	1a9b      	subs	r3, r3, r2
 8008218:	440b      	add	r3, r1
 800821a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800821c:	4619      	mov	r1, r3
 800821e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008220:	f7fd fbfa 	bl	8005a18 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008228:	4413      	add	r3, r2
 800822a:	627b      	str	r3, [r7, #36]	@ 0x24
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	699a      	ldr	r2, [r3, #24]
 8008230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008232:	441a      	add	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	619a      	str	r2, [r3, #24]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800823e:	441a      	add	r2, r3
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	f47f aee1 	bne.w	8008016 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3738      	adds	r7, #56	@ 0x38
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b08c      	sub	sp, #48	@ 0x30
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	607a      	str	r2, [r7, #4]
 800826a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f107 0210 	add.w	r2, r7, #16
 800827c:	4611      	mov	r1, r2
 800827e:	4618      	mov	r0, r3
 8008280:	f7ff fc4a 	bl	8007b18 <validate>
 8008284:	4603      	mov	r3, r0
 8008286:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800828a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800828e:	2b00      	cmp	r3, #0
 8008290:	d107      	bne.n	80082a2 <f_write+0x44>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	7d5b      	ldrb	r3, [r3, #21]
 8008296:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800829a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d002      	beq.n	80082a8 <f_write+0x4a>
 80082a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80082a6:	e16a      	b.n	800857e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	7d1b      	ldrb	r3, [r3, #20]
 80082ac:	f003 0302 	and.w	r3, r3, #2
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <f_write+0x5a>
 80082b4:	2307      	movs	r3, #7
 80082b6:	e162      	b.n	800857e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	699a      	ldr	r2, [r3, #24]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	441a      	add	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	f080 814c 	bcs.w	8008562 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	43db      	mvns	r3, r3
 80082d0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80082d2:	e146      	b.n	8008562 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	8992      	ldrh	r2, [r2, #12]
 80082dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80082e0:	fb01 f202 	mul.w	r2, r1, r2
 80082e4:	1a9b      	subs	r3, r3, r2
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f040 80f1 	bne.w	80084ce <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	8992      	ldrh	r2, [r2, #12]
 80082f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	8952      	ldrh	r2, [r2, #10]
 80082fc:	3a01      	subs	r2, #1
 80082fe:	4013      	ands	r3, r2
 8008300:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d143      	bne.n	8008390 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10c      	bne.n	800832a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008318:	2b00      	cmp	r3, #0
 800831a:	d11a      	bne.n	8008352 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2100      	movs	r1, #0
 8008320:	4618      	mov	r0, r3
 8008322:	f7fe f8b6 	bl	8006492 <create_chain>
 8008326:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008328:	e013      	b.n	8008352 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800832e:	2b00      	cmp	r3, #0
 8008330:	d007      	beq.n	8008342 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	4619      	mov	r1, r3
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f7fe f942 	bl	80065c2 <clmt_clust>
 800833e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008340:	e007      	b.n	8008352 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	69db      	ldr	r3, [r3, #28]
 8008348:	4619      	mov	r1, r3
 800834a:	4610      	mov	r0, r2
 800834c:	f7fe f8a1 	bl	8006492 <create_chain>
 8008350:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 8109 	beq.w	800856c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800835a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835c:	2b01      	cmp	r3, #1
 800835e:	d104      	bne.n	800836a <f_write+0x10c>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2202      	movs	r2, #2
 8008364:	755a      	strb	r2, [r3, #21]
 8008366:	2302      	movs	r3, #2
 8008368:	e109      	b.n	800857e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800836a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008370:	d104      	bne.n	800837c <f_write+0x11e>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2201      	movs	r2, #1
 8008376:	755a      	strb	r2, [r3, #21]
 8008378:	2301      	movs	r3, #1
 800837a:	e100      	b.n	800857e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008380:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d102      	bne.n	8008390 <f_write+0x132>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800838e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	7d1b      	ldrb	r3, [r3, #20]
 8008394:	b25b      	sxtb	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	da18      	bge.n	80083cc <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	7858      	ldrb	r0, [r3, #1]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6a1a      	ldr	r2, [r3, #32]
 80083a8:	2301      	movs	r3, #1
 80083aa:	f7fd fa75 	bl	8005898 <disk_write>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d004      	beq.n	80083be <f_write+0x160>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2201      	movs	r2, #1
 80083b8:	755a      	strb	r2, [r3, #21]
 80083ba:	2301      	movs	r3, #1
 80083bc:	e0df      	b.n	800857e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	7d1b      	ldrb	r3, [r3, #20]
 80083c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083c6:	b2da      	uxtb	r2, r3
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	4619      	mov	r1, r3
 80083d4:	4610      	mov	r0, r2
 80083d6:	f7fd fdeb 	bl	8005fb0 <clust2sect>
 80083da:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d104      	bne.n	80083ec <f_write+0x18e>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2202      	movs	r2, #2
 80083e6:	755a      	strb	r2, [r3, #21]
 80083e8:	2302      	movs	r3, #2
 80083ea:	e0c8      	b.n	800857e <f_write+0x320>
			sect += csect;
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	4413      	add	r3, r2
 80083f2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	899b      	ldrh	r3, [r3, #12]
 80083f8:	461a      	mov	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008400:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d043      	beq.n	8008490 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008408:	69ba      	ldr	r2, [r7, #24]
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	4413      	add	r3, r2
 800840e:	693a      	ldr	r2, [r7, #16]
 8008410:	8952      	ldrh	r2, [r2, #10]
 8008412:	4293      	cmp	r3, r2
 8008414:	d905      	bls.n	8008422 <f_write+0x1c4>
					cc = fs->csize - csect;
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	895b      	ldrh	r3, [r3, #10]
 800841a:	461a      	mov	r2, r3
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	7858      	ldrb	r0, [r3, #1]
 8008426:	6a3b      	ldr	r3, [r7, #32]
 8008428:	697a      	ldr	r2, [r7, #20]
 800842a:	69f9      	ldr	r1, [r7, #28]
 800842c:	f7fd fa34 	bl	8005898 <disk_write>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d004      	beq.n	8008440 <f_write+0x1e2>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2201      	movs	r2, #1
 800843a:	755a      	strb	r2, [r3, #21]
 800843c:	2301      	movs	r3, #1
 800843e:	e09e      	b.n	800857e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6a1a      	ldr	r2, [r3, #32]
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	6a3a      	ldr	r2, [r7, #32]
 800844a:	429a      	cmp	r2, r3
 800844c:	d918      	bls.n	8008480 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6a1a      	ldr	r2, [r3, #32]
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	693a      	ldr	r2, [r7, #16]
 800845e:	8992      	ldrh	r2, [r2, #12]
 8008460:	fb02 f303 	mul.w	r3, r2, r3
 8008464:	69fa      	ldr	r2, [r7, #28]
 8008466:	18d1      	adds	r1, r2, r3
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	899b      	ldrh	r3, [r3, #12]
 800846c:	461a      	mov	r2, r3
 800846e:	f7fd fad3 	bl	8005a18 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	7d1b      	ldrb	r3, [r3, #20]
 8008476:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800847a:	b2da      	uxtb	r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	899b      	ldrh	r3, [r3, #12]
 8008484:	461a      	mov	r2, r3
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	fb02 f303 	mul.w	r3, r2, r3
 800848c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800848e:	e04b      	b.n	8008528 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6a1b      	ldr	r3, [r3, #32]
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	429a      	cmp	r2, r3
 8008498:	d016      	beq.n	80084c8 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	699a      	ldr	r2, [r3, #24]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d210      	bcs.n	80084c8 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	7858      	ldrb	r0, [r3, #1]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80084b0:	2301      	movs	r3, #1
 80084b2:	697a      	ldr	r2, [r7, #20]
 80084b4:	f7fd f9d0 	bl	8005858 <disk_read>
 80084b8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d004      	beq.n	80084c8 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2201      	movs	r2, #1
 80084c2:	755a      	strb	r2, [r3, #21]
 80084c4:	2301      	movs	r3, #1
 80084c6:	e05a      	b.n	800857e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	697a      	ldr	r2, [r7, #20]
 80084cc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	899b      	ldrh	r3, [r3, #12]
 80084d2:	4618      	mov	r0, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	8992      	ldrh	r2, [r2, #12]
 80084dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80084e0:	fb01 f202 	mul.w	r2, r1, r2
 80084e4:	1a9b      	subs	r3, r3, r2
 80084e6:	1ac3      	subs	r3, r0, r3
 80084e8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80084ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d901      	bls.n	80084f6 <f_write+0x298>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	8992      	ldrh	r2, [r2, #12]
 8008504:	fbb3 f0f2 	udiv	r0, r3, r2
 8008508:	fb00 f202 	mul.w	r2, r0, r2
 800850c:	1a9b      	subs	r3, r3, r2
 800850e:	440b      	add	r3, r1
 8008510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008512:	69f9      	ldr	r1, [r7, #28]
 8008514:	4618      	mov	r0, r3
 8008516:	f7fd fa7f 	bl	8005a18 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	7d1b      	ldrb	r3, [r3, #20]
 800851e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008522:	b2da      	uxtb	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008528:	69fa      	ldr	r2, [r7, #28]
 800852a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800852c:	4413      	add	r3, r2
 800852e:	61fb      	str	r3, [r7, #28]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	699a      	ldr	r2, [r3, #24]
 8008534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008536:	441a      	add	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	619a      	str	r2, [r3, #24]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	68da      	ldr	r2, [r3, #12]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	699b      	ldr	r3, [r3, #24]
 8008544:	429a      	cmp	r2, r3
 8008546:	bf38      	it	cc
 8008548:	461a      	movcc	r2, r3
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	60da      	str	r2, [r3, #12]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008554:	441a      	add	r2, r3
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	601a      	str	r2, [r3, #0]
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	f47f aeb5 	bne.w	80082d4 <f_write+0x76>
 800856a:	e000      	b.n	800856e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800856c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	7d1b      	ldrb	r3, [r3, #20]
 8008572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008576:	b2da      	uxtb	r2, r3
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3730      	adds	r7, #48	@ 0x30
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b086      	sub	sp, #24
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f107 0208 	add.w	r2, r7, #8
 8008594:	4611      	mov	r1, r2
 8008596:	4618      	mov	r0, r3
 8008598:	f7ff fabe 	bl	8007b18 <validate>
 800859c:	4603      	mov	r3, r0
 800859e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80085a0:	7dfb      	ldrb	r3, [r7, #23]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d168      	bne.n	8008678 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	7d1b      	ldrb	r3, [r3, #20]
 80085aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d062      	beq.n	8008678 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	7d1b      	ldrb	r3, [r3, #20]
 80085b6:	b25b      	sxtb	r3, r3
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	da15      	bge.n	80085e8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	7858      	ldrb	r0, [r3, #1]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a1a      	ldr	r2, [r3, #32]
 80085ca:	2301      	movs	r3, #1
 80085cc:	f7fd f964 	bl	8005898 <disk_write>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d001      	beq.n	80085da <f_sync+0x54>
 80085d6:	2301      	movs	r3, #1
 80085d8:	e04f      	b.n	800867a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	7d1b      	ldrb	r3, [r3, #20]
 80085de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085e2:	b2da      	uxtb	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80085e8:	f7fc ff7a 	bl	80054e0 <get_fattime>
 80085ec:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085f4:	4619      	mov	r1, r3
 80085f6:	4610      	mov	r0, r2
 80085f8:	f7fd fc3c 	bl	8005e74 <move_window>
 80085fc:	4603      	mov	r3, r0
 80085fe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008600:	7dfb      	ldrb	r3, [r7, #23]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d138      	bne.n	8008678 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800860a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	330b      	adds	r3, #11
 8008610:	781a      	ldrb	r2, [r3, #0]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	330b      	adds	r3, #11
 8008616:	f042 0220 	orr.w	r2, r2, #32
 800861a:	b2d2      	uxtb	r2, r2
 800861c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6818      	ldr	r0, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	461a      	mov	r2, r3
 8008628:	68f9      	ldr	r1, [r7, #12]
 800862a:	f7fe f9c7 	bl	80069bc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f103 021c 	add.w	r2, r3, #28
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	4619      	mov	r1, r3
 800863a:	4610      	mov	r0, r2
 800863c:	f7fd f9c0 	bl	80059c0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	3316      	adds	r3, #22
 8008644:	6939      	ldr	r1, [r7, #16]
 8008646:	4618      	mov	r0, r3
 8008648:	f7fd f9ba 	bl	80059c0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	3312      	adds	r3, #18
 8008650:	2100      	movs	r1, #0
 8008652:	4618      	mov	r0, r3
 8008654:	f7fd f999 	bl	800598a <st_word>
					fs->wflag = 1;
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	2201      	movs	r2, #1
 800865c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	4618      	mov	r0, r3
 8008662:	f7fd fc35 	bl	8005ed0 <sync_fs>
 8008666:	4603      	mov	r3, r0
 8008668:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	7d1b      	ldrb	r3, [r3, #20]
 800866e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008672:	b2da      	uxtb	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008678:	7dfb      	ldrb	r3, [r7, #23]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3718      	adds	r7, #24
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b084      	sub	sp, #16
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7ff ff7b 	bl	8008586 <f_sync>
 8008690:	4603      	mov	r3, r0
 8008692:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008694:	7bfb      	ldrb	r3, [r7, #15]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d118      	bne.n	80086cc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f107 0208 	add.w	r2, r7, #8
 80086a0:	4611      	mov	r1, r2
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7ff fa38 	bl	8007b18 <validate>
 80086a8:	4603      	mov	r3, r0
 80086aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10c      	bne.n	80086cc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fd fb38 	bl	8005d2c <dec_lock>
 80086bc:	4603      	mov	r3, r0
 80086be:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80086c0:	7bfb      	ldrb	r3, [r7, #15]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d102      	bne.n	80086cc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b090      	sub	sp, #64	@ 0x40
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
 80086de:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f107 0208 	add.w	r2, r7, #8
 80086e6:	4611      	mov	r1, r2
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7ff fa15 	bl	8007b18 <validate>
 80086ee:	4603      	mov	r3, r0
 80086f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80086f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d103      	bne.n	8008704 <f_lseek+0x2e>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	7d5b      	ldrb	r3, [r3, #21]
 8008700:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008704:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008708:	2b00      	cmp	r3, #0
 800870a:	d002      	beq.n	8008712 <f_lseek+0x3c>
 800870c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008710:	e201      	b.n	8008b16 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 80d9 	beq.w	80088ce <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008722:	d15a      	bne.n	80087da <f_lseek+0x104>
			tbl = fp->cltbl;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008728:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800872a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872c:	1d1a      	adds	r2, r3, #4
 800872e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	617b      	str	r3, [r7, #20]
 8008734:	2302      	movs	r3, #2
 8008736:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800873e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008740:	2b00      	cmp	r3, #0
 8008742:	d03a      	beq.n	80087ba <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008746:	613b      	str	r3, [r7, #16]
 8008748:	2300      	movs	r3, #0
 800874a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800874c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800874e:	3302      	adds	r3, #2
 8008750:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8008752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008754:	60fb      	str	r3, [r7, #12]
 8008756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008758:	3301      	adds	r3, #1
 800875a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008760:	4618      	mov	r0, r3
 8008762:	f7fd fc44 	bl	8005fee <get_fat>
 8008766:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876a:	2b01      	cmp	r3, #1
 800876c:	d804      	bhi.n	8008778 <f_lseek+0xa2>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2202      	movs	r2, #2
 8008772:	755a      	strb	r2, [r3, #21]
 8008774:	2302      	movs	r3, #2
 8008776:	e1ce      	b.n	8008b16 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800877e:	d104      	bne.n	800878a <f_lseek+0xb4>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	755a      	strb	r2, [r3, #21]
 8008786:	2301      	movs	r3, #1
 8008788:	e1c5      	b.n	8008b16 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	3301      	adds	r3, #1
 800878e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008790:	429a      	cmp	r2, r3
 8008792:	d0de      	beq.n	8008752 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008794:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	429a      	cmp	r2, r3
 800879a:	d809      	bhi.n	80087b0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800879c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879e:	1d1a      	adds	r2, r3, #4
 80087a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80087a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087a4:	601a      	str	r2, [r3, #0]
 80087a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a8:	1d1a      	adds	r2, r3, #4
 80087aa:	627a      	str	r2, [r7, #36]	@ 0x24
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	69db      	ldr	r3, [r3, #28]
 80087b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d3c4      	bcc.n	8008744 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087c0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80087c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d803      	bhi.n	80087d2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80087ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087cc:	2200      	movs	r2, #0
 80087ce:	601a      	str	r2, [r3, #0]
 80087d0:	e19f      	b.n	8008b12 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80087d2:	2311      	movs	r3, #17
 80087d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80087d8:	e19b      	b.n	8008b12 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	683a      	ldr	r2, [r7, #0]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d902      	bls.n	80087ea <f_lseek+0x114>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f000 818d 	beq.w	8008b12 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	3b01      	subs	r3, #1
 80087fc:	4619      	mov	r1, r3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7fd fedf 	bl	80065c2 <clmt_clust>
 8008804:	4602      	mov	r2, r0
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	69db      	ldr	r3, [r3, #28]
 8008810:	4619      	mov	r1, r3
 8008812:	4610      	mov	r0, r2
 8008814:	f7fd fbcc 	bl	8005fb0 <clust2sect>
 8008818:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d104      	bne.n	800882a <f_lseek+0x154>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2202      	movs	r2, #2
 8008824:	755a      	strb	r2, [r3, #21]
 8008826:	2302      	movs	r3, #2
 8008828:	e175      	b.n	8008b16 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	3b01      	subs	r3, #1
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	8992      	ldrh	r2, [r2, #12]
 8008832:	fbb3 f3f2 	udiv	r3, r3, r2
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	8952      	ldrh	r2, [r2, #10]
 800883a:	3a01      	subs	r2, #1
 800883c:	4013      	ands	r3, r2
 800883e:	69ba      	ldr	r2, [r7, #24]
 8008840:	4413      	add	r3, r2
 8008842:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	699b      	ldr	r3, [r3, #24]
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	8992      	ldrh	r2, [r2, #12]
 800884c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008850:	fb01 f202 	mul.w	r2, r1, r2
 8008854:	1a9b      	subs	r3, r3, r2
 8008856:	2b00      	cmp	r3, #0
 8008858:	f000 815b 	beq.w	8008b12 <f_lseek+0x43c>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a1b      	ldr	r3, [r3, #32]
 8008860:	69ba      	ldr	r2, [r7, #24]
 8008862:	429a      	cmp	r2, r3
 8008864:	f000 8155 	beq.w	8008b12 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	7d1b      	ldrb	r3, [r3, #20]
 800886c:	b25b      	sxtb	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	da18      	bge.n	80088a4 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	7858      	ldrb	r0, [r3, #1]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a1a      	ldr	r2, [r3, #32]
 8008880:	2301      	movs	r3, #1
 8008882:	f7fd f809 	bl	8005898 <disk_write>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d004      	beq.n	8008896 <f_lseek+0x1c0>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	755a      	strb	r2, [r3, #21]
 8008892:	2301      	movs	r3, #1
 8008894:	e13f      	b.n	8008b16 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	7d1b      	ldrb	r3, [r3, #20]
 800889a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800889e:	b2da      	uxtb	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	7858      	ldrb	r0, [r3, #1]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80088ae:	2301      	movs	r3, #1
 80088b0:	69ba      	ldr	r2, [r7, #24]
 80088b2:	f7fc ffd1 	bl	8005858 <disk_read>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d004      	beq.n	80088c6 <f_lseek+0x1f0>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	755a      	strb	r2, [r3, #21]
 80088c2:	2301      	movs	r3, #1
 80088c4:	e127      	b.n	8008b16 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	69ba      	ldr	r2, [r7, #24]
 80088ca:	621a      	str	r2, [r3, #32]
 80088cc:	e121      	b.n	8008b12 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d908      	bls.n	80088ea <f_lseek+0x214>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	7d1b      	ldrb	r3, [r3, #20]
 80088dc:	f003 0302 	and.w	r3, r3, #2
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d102      	bne.n	80088ea <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80088f0:	2300      	movs	r3, #0
 80088f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80088f8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f000 80b5 	beq.w	8008a6c <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	895b      	ldrh	r3, [r3, #10]
 8008906:	461a      	mov	r2, r3
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	899b      	ldrh	r3, [r3, #12]
 800890c:	fb02 f303 	mul.w	r3, r2, r3
 8008910:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008912:	6a3b      	ldr	r3, [r7, #32]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d01b      	beq.n	8008950 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	1e5a      	subs	r2, r3, #1
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	1e59      	subs	r1, r3, #1
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800892c:	429a      	cmp	r2, r3
 800892e:	d30f      	bcc.n	8008950 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	1e5a      	subs	r2, r3, #1
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	425b      	negs	r3, r3
 8008938:	401a      	ands	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	69db      	ldr	r3, [r3, #28]
 800894c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800894e:	e022      	b.n	8008996 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008958:	2b00      	cmp	r3, #0
 800895a:	d119      	bne.n	8008990 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2100      	movs	r1, #0
 8008960:	4618      	mov	r0, r3
 8008962:	f7fd fd96 	bl	8006492 <create_chain>
 8008966:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800896a:	2b01      	cmp	r3, #1
 800896c:	d104      	bne.n	8008978 <f_lseek+0x2a2>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2202      	movs	r2, #2
 8008972:	755a      	strb	r2, [r3, #21]
 8008974:	2302      	movs	r3, #2
 8008976:	e0ce      	b.n	8008b16 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800897a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800897e:	d104      	bne.n	800898a <f_lseek+0x2b4>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	755a      	strb	r2, [r3, #21]
 8008986:	2301      	movs	r3, #1
 8008988:	e0c5      	b.n	8008b16 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800898e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008994:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8008996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008998:	2b00      	cmp	r3, #0
 800899a:	d067      	beq.n	8008a6c <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800899c:	e03a      	b.n	8008a14 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800899e:	683a      	ldr	r2, [r7, #0]
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	603b      	str	r3, [r7, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	699a      	ldr	r2, [r3, #24]
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	441a      	add	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	7d1b      	ldrb	r3, [r3, #20]
 80089b6:	f003 0302 	and.w	r3, r3, #2
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00b      	beq.n	80089d6 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fd fd65 	bl	8006492 <create_chain>
 80089c8:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80089ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d108      	bne.n	80089e2 <f_lseek+0x30c>
							ofs = 0; break;
 80089d0:	2300      	movs	r3, #0
 80089d2:	603b      	str	r3, [r7, #0]
 80089d4:	e022      	b.n	8008a1c <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fd fb07 	bl	8005fee <get_fat>
 80089e0:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80089e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089e8:	d104      	bne.n	80089f4 <f_lseek+0x31e>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	755a      	strb	r2, [r3, #21]
 80089f0:	2301      	movs	r3, #1
 80089f2:	e090      	b.n	8008b16 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80089f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d904      	bls.n	8008a04 <f_lseek+0x32e>
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	69db      	ldr	r3, [r3, #28]
 80089fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d304      	bcc.n	8008a0e <f_lseek+0x338>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2202      	movs	r2, #2
 8008a08:	755a      	strb	r2, [r3, #21]
 8008a0a:	2302      	movs	r3, #2
 8008a0c:	e083      	b.n	8008b16 <f_lseek+0x440>
					fp->clust = clst;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a12:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d8c0      	bhi.n	800899e <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	699a      	ldr	r2, [r3, #24]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	441a      	add	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	899b      	ldrh	r3, [r3, #12]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a34:	fb01 f202 	mul.w	r2, r1, r2
 8008a38:	1a9b      	subs	r3, r3, r2
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d016      	beq.n	8008a6c <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7fd fab4 	bl	8005fb0 <clust2sect>
 8008a48:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d104      	bne.n	8008a5a <f_lseek+0x384>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2202      	movs	r2, #2
 8008a54:	755a      	strb	r2, [r3, #21]
 8008a56:	2302      	movs	r3, #2
 8008a58:	e05d      	b.n	8008b16 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	899b      	ldrh	r3, [r3, #12]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a68:	4413      	add	r3, r2
 8008a6a:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	699a      	ldr	r2, [r3, #24]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d90a      	bls.n	8008a8e <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	699a      	ldr	r2, [r3, #24]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	7d1b      	ldrb	r3, [r3, #20]
 8008a84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	8992      	ldrh	r2, [r2, #12]
 8008a96:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a9a:	fb01 f202 	mul.w	r2, r1, r2
 8008a9e:	1a9b      	subs	r3, r3, r2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d036      	beq.n	8008b12 <f_lseek+0x43c>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a1b      	ldr	r3, [r3, #32]
 8008aa8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d031      	beq.n	8008b12 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	7d1b      	ldrb	r3, [r3, #20]
 8008ab2:	b25b      	sxtb	r3, r3
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	da18      	bge.n	8008aea <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	7858      	ldrb	r0, [r3, #1]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a1a      	ldr	r2, [r3, #32]
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	f7fc fee6 	bl	8005898 <disk_write>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d004      	beq.n	8008adc <f_lseek+0x406>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	755a      	strb	r2, [r3, #21]
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e01c      	b.n	8008b16 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	7d1b      	ldrb	r3, [r3, #20]
 8008ae0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	7858      	ldrb	r0, [r3, #1]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008af4:	2301      	movs	r3, #1
 8008af6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008af8:	f7fc feae 	bl	8005858 <disk_read>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d004      	beq.n	8008b0c <f_lseek+0x436>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2201      	movs	r2, #1
 8008b06:	755a      	strb	r2, [r3, #21]
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e004      	b.n	8008b16 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b10:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008b12:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3740      	adds	r7, #64	@ 0x40
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b092      	sub	sp, #72	@ 0x48
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	60f8      	str	r0, [r7, #12]
 8008b26:	60b9      	str	r1, [r7, #8]
 8008b28:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008b2a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8008b2e:	f107 030c 	add.w	r3, r7, #12
 8008b32:	2200      	movs	r2, #0
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fe fd69 	bl	800760c <find_volume>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8008b40:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f040 8099 	bne.w	8008c7c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008b4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b52:	699a      	ldr	r2, [r3, #24]
 8008b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b56:	69db      	ldr	r3, [r3, #28]
 8008b58:	3b02      	subs	r3, #2
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d804      	bhi.n	8008b68 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b60:	699a      	ldr	r2, [r3, #24]
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	601a      	str	r2, [r3, #0]
 8008b66:	e089      	b.n	8008c7c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d128      	bne.n	8008bc6 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008b74:	2302      	movs	r3, #2
 8008b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b7a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008b7c:	f107 0314 	add.w	r3, r7, #20
 8008b80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fd fa33 	bl	8005fee <get_fat>
 8008b88:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b90:	d103      	bne.n	8008b9a <f_getfree+0x7c>
 8008b92:	2301      	movs	r3, #1
 8008b94:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008b98:	e063      	b.n	8008c62 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d103      	bne.n	8008ba8 <f_getfree+0x8a>
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008ba6:	e05c      	b.n	8008c62 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d102      	bne.n	8008bb4 <f_getfree+0x96>
 8008bae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8008bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bbc:	69db      	ldr	r3, [r3, #28]
 8008bbe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d3db      	bcc.n	8008b7c <f_getfree+0x5e>
 8008bc4:	e04d      	b.n	8008c62 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc8:	69db      	ldr	r3, [r3, #28]
 8008bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8008bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d113      	bne.n	8008c08 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008be0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be4:	1c5a      	adds	r2, r3, #1
 8008be6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008be8:	4619      	mov	r1, r3
 8008bea:	f7fd f943 	bl	8005e74 <move_window>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8008bf4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d131      	bne.n	8008c60 <f_getfree+0x142>
							p = fs->win;
 8008bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bfe:	3338      	adds	r3, #56	@ 0x38
 8008c00:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8008c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c04:	899b      	ldrh	r3, [r3, #12]
 8008c06:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d10f      	bne.n	8008c30 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008c10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c12:	f7fc fe7f 	bl	8005914 <ld_word>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d102      	bne.n	8008c22 <f_getfree+0x104>
 8008c1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c1e:	3301      	adds	r3, #1
 8008c20:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8008c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c24:	3302      	adds	r3, #2
 8008c26:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c2a:	3b02      	subs	r3, #2
 8008c2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c2e:	e010      	b.n	8008c52 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008c30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c32:	f7fc fe87 	bl	8005944 <ld_dword>
 8008c36:	4603      	mov	r3, r0
 8008c38:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d102      	bne.n	8008c46 <f_getfree+0x128>
 8008c40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c42:	3301      	adds	r3, #1
 8008c44:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8008c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c48:	3304      	adds	r3, #4
 8008c4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c4e:	3b04      	subs	r3, #4
 8008c50:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8008c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c54:	3b01      	subs	r3, #1
 8008c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1bd      	bne.n	8008bda <f_getfree+0xbc>
 8008c5e:	e000      	b.n	8008c62 <f_getfree+0x144>
							if (res != FR_OK) break;
 8008c60:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c66:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c6c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c70:	791a      	ldrb	r2, [r3, #4]
 8008c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c74:	f042 0201 	orr.w	r2, r2, #1
 8008c78:	b2d2      	uxtb	r2, r2
 8008c7a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008c7c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3748      	adds	r7, #72	@ 0x48
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b088      	sub	sp, #32
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008c94:	2300      	movs	r3, #0
 8008c96:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008c9c:	e01c      	b.n	8008cd8 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8008c9e:	f107 0310 	add.w	r3, r7, #16
 8008ca2:	f107 0114 	add.w	r1, r7, #20
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f7ff f979 	bl	8007fa0 <f_read>
		if (rc != 1) break;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d117      	bne.n	8008ce4 <f_gets+0x5c>
		c = s[0];
 8008cb4:	7d3b      	ldrb	r3, [r7, #20]
 8008cb6:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008cb8:	7dfb      	ldrb	r3, [r7, #23]
 8008cba:	2b0d      	cmp	r3, #13
 8008cbc:	d00b      	beq.n	8008cd6 <f_gets+0x4e>
		*p++ = c;
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	1c5a      	adds	r2, r3, #1
 8008cc2:	61ba      	str	r2, [r7, #24]
 8008cc4:	7dfa      	ldrb	r2, [r7, #23]
 8008cc6:	701a      	strb	r2, [r3, #0]
		n++;
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008cce:	7dfb      	ldrb	r3, [r7, #23]
 8008cd0:	2b0a      	cmp	r3, #10
 8008cd2:	d009      	beq.n	8008ce8 <f_gets+0x60>
 8008cd4:	e000      	b.n	8008cd8 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008cd6:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	69fa      	ldr	r2, [r7, #28]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	dbdd      	blt.n	8008c9e <f_gets+0x16>
 8008ce2:	e002      	b.n	8008cea <f_gets+0x62>
		if (rc != 1) break;
 8008ce4:	bf00      	nop
 8008ce6:	e000      	b.n	8008cea <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8008ce8:	bf00      	nop
	}
	*p = 0;
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	2200      	movs	r2, #0
 8008cee:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d001      	beq.n	8008cfa <f_gets+0x72>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	e000      	b.n	8008cfc <f_gets+0x74>
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3720      	adds	r7, #32
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008d10:	78fb      	ldrb	r3, [r7, #3]
 8008d12:	2b0a      	cmp	r3, #10
 8008d14:	d103      	bne.n	8008d1e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008d16:	210d      	movs	r1, #13
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7ff fff3 	bl	8008d04 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	db25      	blt.n	8008d76 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	1c5a      	adds	r2, r3, #1
 8008d2e:	60fa      	str	r2, [r7, #12]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	4413      	add	r3, r2
 8008d34:	78fa      	ldrb	r2, [r7, #3]
 8008d36:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2b3c      	cmp	r3, #60	@ 0x3c
 8008d3c:	dd12      	ble.n	8008d64 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6818      	ldr	r0, [r3, #0]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f103 010c 	add.w	r1, r3, #12
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	f107 0308 	add.w	r3, r7, #8
 8008d4e:	f7ff fa86 	bl	800825e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d101      	bne.n	8008d5e <putc_bfd+0x5a>
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	e001      	b.n	8008d62 <putc_bfd+0x5e>
 8008d5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d62:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	1c5a      	adds	r2, r3, #1
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	609a      	str	r2, [r3, #8]
 8008d74:	e000      	b.n	8008d78 <putc_bfd+0x74>
	if (i < 0) return;
 8008d76:	bf00      	nop
}
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	db16      	blt.n	8008dbc <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6818      	ldr	r0, [r3, #0]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f103 010c 	add.w	r1, r3, #12
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	f107 030c 	add.w	r3, r7, #12
 8008da2:	f7ff fa5c 	bl	800825e <f_write>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d107      	bne.n	8008dbc <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d102      	bne.n	8008dbc <putc_flush+0x3e>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	e001      	b.n	8008dc0 <putc_flush+0x42>
	return EOF;
 8008dbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	605a      	str	r2, [r3, #4]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685a      	ldr	r2, [r3, #4]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	609a      	str	r2, [r3, #8]
}
 8008de6:	bf00      	nop
 8008de8:	370c      	adds	r7, #12
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b096      	sub	sp, #88	@ 0x58
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008dfc:	f107 030c 	add.w	r3, r7, #12
 8008e00:	6839      	ldr	r1, [r7, #0]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7ff ffe0 	bl	8008dc8 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008e08:	e009      	b.n	8008e1e <f_puts+0x2c>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	1c5a      	adds	r2, r3, #1
 8008e0e:	607a      	str	r2, [r7, #4]
 8008e10:	781a      	ldrb	r2, [r3, #0]
 8008e12:	f107 030c 	add.w	r3, r7, #12
 8008e16:	4611      	mov	r1, r2
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7ff ff73 	bl	8008d04 <putc_bfd>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1f1      	bne.n	8008e0a <f_puts+0x18>
	return putc_flush(&pb);
 8008e26:	f107 030c 	add.w	r3, r7, #12
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7ff ffa7 	bl	8008d7e <putc_flush>
 8008e30:	4603      	mov	r3, r0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3758      	adds	r7, #88	@ 0x58
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
	...

08008e3c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b087      	sub	sp, #28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	4613      	mov	r3, r2
 8008e48:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008e52:	4b1f      	ldr	r3, [pc, #124]	@ (8008ed0 <FATFS_LinkDriverEx+0x94>)
 8008e54:	7a5b      	ldrb	r3, [r3, #9]
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d131      	bne.n	8008ec0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8008ed0 <FATFS_LinkDriverEx+0x94>)
 8008e5e:	7a5b      	ldrb	r3, [r3, #9]
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	461a      	mov	r2, r3
 8008e64:	4b1a      	ldr	r3, [pc, #104]	@ (8008ed0 <FATFS_LinkDriverEx+0x94>)
 8008e66:	2100      	movs	r1, #0
 8008e68:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008e6a:	4b19      	ldr	r3, [pc, #100]	@ (8008ed0 <FATFS_LinkDriverEx+0x94>)
 8008e6c:	7a5b      	ldrb	r3, [r3, #9]
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	4a17      	ldr	r2, [pc, #92]	@ (8008ed0 <FATFS_LinkDriverEx+0x94>)
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4413      	add	r3, r2
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008e7a:	4b15      	ldr	r3, [pc, #84]	@ (8008ed0 <FATFS_LinkDriverEx+0x94>)
 8008e7c:	7a5b      	ldrb	r3, [r3, #9]
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	461a      	mov	r2, r3
 8008e82:	4b13      	ldr	r3, [pc, #76]	@ (8008ed0 <FATFS_LinkDriverEx+0x94>)
 8008e84:	4413      	add	r3, r2
 8008e86:	79fa      	ldrb	r2, [r7, #7]
 8008e88:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008e8a:	4b11      	ldr	r3, [pc, #68]	@ (8008ed0 <FATFS_LinkDriverEx+0x94>)
 8008e8c:	7a5b      	ldrb	r3, [r3, #9]
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	1c5a      	adds	r2, r3, #1
 8008e92:	b2d1      	uxtb	r1, r2
 8008e94:	4a0e      	ldr	r2, [pc, #56]	@ (8008ed0 <FATFS_LinkDriverEx+0x94>)
 8008e96:	7251      	strb	r1, [r2, #9]
 8008e98:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008e9a:	7dbb      	ldrb	r3, [r7, #22]
 8008e9c:	3330      	adds	r3, #48	@ 0x30
 8008e9e:	b2da      	uxtb	r2, r3
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	223a      	movs	r2, #58	@ 0x3a
 8008eaa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	3302      	adds	r3, #2
 8008eb0:	222f      	movs	r2, #47	@ 0x2f
 8008eb2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	3303      	adds	r3, #3
 8008eb8:	2200      	movs	r2, #0
 8008eba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	371c      	adds	r7, #28
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	20000478 	.word	0x20000478

08008ed4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008ede:	2200      	movs	r2, #0
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7ff ffaa 	bl	8008e3c <FATFS_LinkDriverEx>
 8008ee8:	4603      	mov	r3, r0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
	...

08008ef4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	4603      	mov	r3, r0
 8008efc:	6039      	str	r1, [r7, #0]
 8008efe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008f00:	88fb      	ldrh	r3, [r7, #6]
 8008f02:	2b7f      	cmp	r3, #127	@ 0x7f
 8008f04:	d802      	bhi.n	8008f0c <ff_convert+0x18>
		c = chr;
 8008f06:	88fb      	ldrh	r3, [r7, #6]
 8008f08:	81fb      	strh	r3, [r7, #14]
 8008f0a:	e025      	b.n	8008f58 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00b      	beq.n	8008f2a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008f12:	88fb      	ldrh	r3, [r7, #6]
 8008f14:	2bff      	cmp	r3, #255	@ 0xff
 8008f16:	d805      	bhi.n	8008f24 <ff_convert+0x30>
 8008f18:	88fb      	ldrh	r3, [r7, #6]
 8008f1a:	3b80      	subs	r3, #128	@ 0x80
 8008f1c:	4a12      	ldr	r2, [pc, #72]	@ (8008f68 <ff_convert+0x74>)
 8008f1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f22:	e000      	b.n	8008f26 <ff_convert+0x32>
 8008f24:	2300      	movs	r3, #0
 8008f26:	81fb      	strh	r3, [r7, #14]
 8008f28:	e016      	b.n	8008f58 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	81fb      	strh	r3, [r7, #14]
 8008f2e:	e009      	b.n	8008f44 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008f30:	89fb      	ldrh	r3, [r7, #14]
 8008f32:	4a0d      	ldr	r2, [pc, #52]	@ (8008f68 <ff_convert+0x74>)
 8008f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f38:	88fa      	ldrh	r2, [r7, #6]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d006      	beq.n	8008f4c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008f3e:	89fb      	ldrh	r3, [r7, #14]
 8008f40:	3301      	adds	r3, #1
 8008f42:	81fb      	strh	r3, [r7, #14]
 8008f44:	89fb      	ldrh	r3, [r7, #14]
 8008f46:	2b7f      	cmp	r3, #127	@ 0x7f
 8008f48:	d9f2      	bls.n	8008f30 <ff_convert+0x3c>
 8008f4a:	e000      	b.n	8008f4e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008f4c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008f4e:	89fb      	ldrh	r3, [r7, #14]
 8008f50:	3380      	adds	r3, #128	@ 0x80
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008f58:	89fb      	ldrh	r3, [r7, #14]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3714      	adds	r7, #20
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	08009e3c 	.word	0x08009e3c

08008f6c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	4603      	mov	r3, r0
 8008f74:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008f76:	88fb      	ldrh	r3, [r7, #6]
 8008f78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f7c:	d201      	bcs.n	8008f82 <ff_wtoupper+0x16>
 8008f7e:	4b3e      	ldr	r3, [pc, #248]	@ (8009078 <ff_wtoupper+0x10c>)
 8008f80:	e000      	b.n	8008f84 <ff_wtoupper+0x18>
 8008f82:	4b3e      	ldr	r3, [pc, #248]	@ (800907c <ff_wtoupper+0x110>)
 8008f84:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	1c9a      	adds	r2, r3, #2
 8008f8a:	617a      	str	r2, [r7, #20]
 8008f8c:	881b      	ldrh	r3, [r3, #0]
 8008f8e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008f90:	8a7b      	ldrh	r3, [r7, #18]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d068      	beq.n	8009068 <ff_wtoupper+0xfc>
 8008f96:	88fa      	ldrh	r2, [r7, #6]
 8008f98:	8a7b      	ldrh	r3, [r7, #18]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d364      	bcc.n	8009068 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	1c9a      	adds	r2, r3, #2
 8008fa2:	617a      	str	r2, [r7, #20]
 8008fa4:	881b      	ldrh	r3, [r3, #0]
 8008fa6:	823b      	strh	r3, [r7, #16]
 8008fa8:	8a3b      	ldrh	r3, [r7, #16]
 8008faa:	0a1b      	lsrs	r3, r3, #8
 8008fac:	81fb      	strh	r3, [r7, #14]
 8008fae:	8a3b      	ldrh	r3, [r7, #16]
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008fb4:	88fa      	ldrh	r2, [r7, #6]
 8008fb6:	8a79      	ldrh	r1, [r7, #18]
 8008fb8:	8a3b      	ldrh	r3, [r7, #16]
 8008fba:	440b      	add	r3, r1
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	da49      	bge.n	8009054 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008fc0:	89fb      	ldrh	r3, [r7, #14]
 8008fc2:	2b08      	cmp	r3, #8
 8008fc4:	d84f      	bhi.n	8009066 <ff_wtoupper+0xfa>
 8008fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8008fcc <ff_wtoupper+0x60>)
 8008fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fcc:	08008ff1 	.word	0x08008ff1
 8008fd0:	08009003 	.word	0x08009003
 8008fd4:	08009019 	.word	0x08009019
 8008fd8:	08009021 	.word	0x08009021
 8008fdc:	08009029 	.word	0x08009029
 8008fe0:	08009031 	.word	0x08009031
 8008fe4:	08009039 	.word	0x08009039
 8008fe8:	08009041 	.word	0x08009041
 8008fec:	08009049 	.word	0x08009049
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008ff0:	88fa      	ldrh	r2, [r7, #6]
 8008ff2:	8a7b      	ldrh	r3, [r7, #18]
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	005b      	lsls	r3, r3, #1
 8008ff8:	697a      	ldr	r2, [r7, #20]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	881b      	ldrh	r3, [r3, #0]
 8008ffe:	80fb      	strh	r3, [r7, #6]
 8009000:	e027      	b.n	8009052 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009002:	88fa      	ldrh	r2, [r7, #6]
 8009004:	8a7b      	ldrh	r3, [r7, #18]
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	b29b      	uxth	r3, r3
 800900a:	f003 0301 	and.w	r3, r3, #1
 800900e:	b29b      	uxth	r3, r3
 8009010:	88fa      	ldrh	r2, [r7, #6]
 8009012:	1ad3      	subs	r3, r2, r3
 8009014:	80fb      	strh	r3, [r7, #6]
 8009016:	e01c      	b.n	8009052 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009018:	88fb      	ldrh	r3, [r7, #6]
 800901a:	3b10      	subs	r3, #16
 800901c:	80fb      	strh	r3, [r7, #6]
 800901e:	e018      	b.n	8009052 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009020:	88fb      	ldrh	r3, [r7, #6]
 8009022:	3b20      	subs	r3, #32
 8009024:	80fb      	strh	r3, [r7, #6]
 8009026:	e014      	b.n	8009052 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009028:	88fb      	ldrh	r3, [r7, #6]
 800902a:	3b30      	subs	r3, #48	@ 0x30
 800902c:	80fb      	strh	r3, [r7, #6]
 800902e:	e010      	b.n	8009052 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009030:	88fb      	ldrh	r3, [r7, #6]
 8009032:	3b1a      	subs	r3, #26
 8009034:	80fb      	strh	r3, [r7, #6]
 8009036:	e00c      	b.n	8009052 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009038:	88fb      	ldrh	r3, [r7, #6]
 800903a:	3308      	adds	r3, #8
 800903c:	80fb      	strh	r3, [r7, #6]
 800903e:	e008      	b.n	8009052 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009040:	88fb      	ldrh	r3, [r7, #6]
 8009042:	3b50      	subs	r3, #80	@ 0x50
 8009044:	80fb      	strh	r3, [r7, #6]
 8009046:	e004      	b.n	8009052 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009048:	88fb      	ldrh	r3, [r7, #6]
 800904a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800904e:	80fb      	strh	r3, [r7, #6]
 8009050:	bf00      	nop
			}
			break;
 8009052:	e008      	b.n	8009066 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009054:	89fb      	ldrh	r3, [r7, #14]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d195      	bne.n	8008f86 <ff_wtoupper+0x1a>
 800905a:	8a3b      	ldrh	r3, [r7, #16]
 800905c:	005b      	lsls	r3, r3, #1
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	4413      	add	r3, r2
 8009062:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009064:	e78f      	b.n	8008f86 <ff_wtoupper+0x1a>
			break;
 8009066:	bf00      	nop
	}

	return chr;
 8009068:	88fb      	ldrh	r3, [r7, #6]
}
 800906a:	4618      	mov	r0, r3
 800906c:	371c      	adds	r7, #28
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	08009f3c 	.word	0x08009f3c
 800907c:	0800a130 	.word	0x0800a130

08009080 <siprintf>:
 8009080:	b40e      	push	{r1, r2, r3}
 8009082:	b500      	push	{lr}
 8009084:	b09c      	sub	sp, #112	@ 0x70
 8009086:	ab1d      	add	r3, sp, #116	@ 0x74
 8009088:	9002      	str	r0, [sp, #8]
 800908a:	9006      	str	r0, [sp, #24]
 800908c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009090:	4809      	ldr	r0, [pc, #36]	@ (80090b8 <siprintf+0x38>)
 8009092:	9107      	str	r1, [sp, #28]
 8009094:	9104      	str	r1, [sp, #16]
 8009096:	4909      	ldr	r1, [pc, #36]	@ (80090bc <siprintf+0x3c>)
 8009098:	f853 2b04 	ldr.w	r2, [r3], #4
 800909c:	9105      	str	r1, [sp, #20]
 800909e:	6800      	ldr	r0, [r0, #0]
 80090a0:	9301      	str	r3, [sp, #4]
 80090a2:	a902      	add	r1, sp, #8
 80090a4:	f000 f89c 	bl	80091e0 <_svfiprintf_r>
 80090a8:	9b02      	ldr	r3, [sp, #8]
 80090aa:	2200      	movs	r2, #0
 80090ac:	701a      	strb	r2, [r3, #0]
 80090ae:	b01c      	add	sp, #112	@ 0x70
 80090b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80090b4:	b003      	add	sp, #12
 80090b6:	4770      	bx	lr
 80090b8:	2000000c 	.word	0x2000000c
 80090bc:	ffff0208 	.word	0xffff0208

080090c0 <memset>:
 80090c0:	4402      	add	r2, r0
 80090c2:	4603      	mov	r3, r0
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d100      	bne.n	80090ca <memset+0xa>
 80090c8:	4770      	bx	lr
 80090ca:	f803 1b01 	strb.w	r1, [r3], #1
 80090ce:	e7f9      	b.n	80090c4 <memset+0x4>

080090d0 <__errno>:
 80090d0:	4b01      	ldr	r3, [pc, #4]	@ (80090d8 <__errno+0x8>)
 80090d2:	6818      	ldr	r0, [r3, #0]
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	2000000c 	.word	0x2000000c

080090dc <__libc_init_array>:
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	4d0d      	ldr	r5, [pc, #52]	@ (8009114 <__libc_init_array+0x38>)
 80090e0:	4c0d      	ldr	r4, [pc, #52]	@ (8009118 <__libc_init_array+0x3c>)
 80090e2:	1b64      	subs	r4, r4, r5
 80090e4:	10a4      	asrs	r4, r4, #2
 80090e6:	2600      	movs	r6, #0
 80090e8:	42a6      	cmp	r6, r4
 80090ea:	d109      	bne.n	8009100 <__libc_init_array+0x24>
 80090ec:	4d0b      	ldr	r5, [pc, #44]	@ (800911c <__libc_init_array+0x40>)
 80090ee:	4c0c      	ldr	r4, [pc, #48]	@ (8009120 <__libc_init_array+0x44>)
 80090f0:	f000 fc66 	bl	80099c0 <_init>
 80090f4:	1b64      	subs	r4, r4, r5
 80090f6:	10a4      	asrs	r4, r4, #2
 80090f8:	2600      	movs	r6, #0
 80090fa:	42a6      	cmp	r6, r4
 80090fc:	d105      	bne.n	800910a <__libc_init_array+0x2e>
 80090fe:	bd70      	pop	{r4, r5, r6, pc}
 8009100:	f855 3b04 	ldr.w	r3, [r5], #4
 8009104:	4798      	blx	r3
 8009106:	3601      	adds	r6, #1
 8009108:	e7ee      	b.n	80090e8 <__libc_init_array+0xc>
 800910a:	f855 3b04 	ldr.w	r3, [r5], #4
 800910e:	4798      	blx	r3
 8009110:	3601      	adds	r6, #1
 8009112:	e7f2      	b.n	80090fa <__libc_init_array+0x1e>
 8009114:	0800a228 	.word	0x0800a228
 8009118:	0800a228 	.word	0x0800a228
 800911c:	0800a228 	.word	0x0800a228
 8009120:	0800a22c 	.word	0x0800a22c

08009124 <__retarget_lock_acquire_recursive>:
 8009124:	4770      	bx	lr

08009126 <__retarget_lock_release_recursive>:
 8009126:	4770      	bx	lr

08009128 <__ssputs_r>:
 8009128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800912c:	688e      	ldr	r6, [r1, #8]
 800912e:	461f      	mov	r7, r3
 8009130:	42be      	cmp	r6, r7
 8009132:	680b      	ldr	r3, [r1, #0]
 8009134:	4682      	mov	sl, r0
 8009136:	460c      	mov	r4, r1
 8009138:	4690      	mov	r8, r2
 800913a:	d82d      	bhi.n	8009198 <__ssputs_r+0x70>
 800913c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009140:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009144:	d026      	beq.n	8009194 <__ssputs_r+0x6c>
 8009146:	6965      	ldr	r5, [r4, #20]
 8009148:	6909      	ldr	r1, [r1, #16]
 800914a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800914e:	eba3 0901 	sub.w	r9, r3, r1
 8009152:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009156:	1c7b      	adds	r3, r7, #1
 8009158:	444b      	add	r3, r9
 800915a:	106d      	asrs	r5, r5, #1
 800915c:	429d      	cmp	r5, r3
 800915e:	bf38      	it	cc
 8009160:	461d      	movcc	r5, r3
 8009162:	0553      	lsls	r3, r2, #21
 8009164:	d527      	bpl.n	80091b6 <__ssputs_r+0x8e>
 8009166:	4629      	mov	r1, r5
 8009168:	f000 f958 	bl	800941c <_malloc_r>
 800916c:	4606      	mov	r6, r0
 800916e:	b360      	cbz	r0, 80091ca <__ssputs_r+0xa2>
 8009170:	6921      	ldr	r1, [r4, #16]
 8009172:	464a      	mov	r2, r9
 8009174:	f000 fbc4 	bl	8009900 <memcpy>
 8009178:	89a3      	ldrh	r3, [r4, #12]
 800917a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800917e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009182:	81a3      	strh	r3, [r4, #12]
 8009184:	6126      	str	r6, [r4, #16]
 8009186:	6165      	str	r5, [r4, #20]
 8009188:	444e      	add	r6, r9
 800918a:	eba5 0509 	sub.w	r5, r5, r9
 800918e:	6026      	str	r6, [r4, #0]
 8009190:	60a5      	str	r5, [r4, #8]
 8009192:	463e      	mov	r6, r7
 8009194:	42be      	cmp	r6, r7
 8009196:	d900      	bls.n	800919a <__ssputs_r+0x72>
 8009198:	463e      	mov	r6, r7
 800919a:	6820      	ldr	r0, [r4, #0]
 800919c:	4632      	mov	r2, r6
 800919e:	4641      	mov	r1, r8
 80091a0:	f000 fb84 	bl	80098ac <memmove>
 80091a4:	68a3      	ldr	r3, [r4, #8]
 80091a6:	1b9b      	subs	r3, r3, r6
 80091a8:	60a3      	str	r3, [r4, #8]
 80091aa:	6823      	ldr	r3, [r4, #0]
 80091ac:	4433      	add	r3, r6
 80091ae:	6023      	str	r3, [r4, #0]
 80091b0:	2000      	movs	r0, #0
 80091b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091b6:	462a      	mov	r2, r5
 80091b8:	f000 fb4a 	bl	8009850 <_realloc_r>
 80091bc:	4606      	mov	r6, r0
 80091be:	2800      	cmp	r0, #0
 80091c0:	d1e0      	bne.n	8009184 <__ssputs_r+0x5c>
 80091c2:	6921      	ldr	r1, [r4, #16]
 80091c4:	4650      	mov	r0, sl
 80091c6:	f000 fba9 	bl	800991c <_free_r>
 80091ca:	230c      	movs	r3, #12
 80091cc:	f8ca 3000 	str.w	r3, [sl]
 80091d0:	89a3      	ldrh	r3, [r4, #12]
 80091d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091d6:	81a3      	strh	r3, [r4, #12]
 80091d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80091dc:	e7e9      	b.n	80091b2 <__ssputs_r+0x8a>
	...

080091e0 <_svfiprintf_r>:
 80091e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e4:	4698      	mov	r8, r3
 80091e6:	898b      	ldrh	r3, [r1, #12]
 80091e8:	061b      	lsls	r3, r3, #24
 80091ea:	b09d      	sub	sp, #116	@ 0x74
 80091ec:	4607      	mov	r7, r0
 80091ee:	460d      	mov	r5, r1
 80091f0:	4614      	mov	r4, r2
 80091f2:	d510      	bpl.n	8009216 <_svfiprintf_r+0x36>
 80091f4:	690b      	ldr	r3, [r1, #16]
 80091f6:	b973      	cbnz	r3, 8009216 <_svfiprintf_r+0x36>
 80091f8:	2140      	movs	r1, #64	@ 0x40
 80091fa:	f000 f90f 	bl	800941c <_malloc_r>
 80091fe:	6028      	str	r0, [r5, #0]
 8009200:	6128      	str	r0, [r5, #16]
 8009202:	b930      	cbnz	r0, 8009212 <_svfiprintf_r+0x32>
 8009204:	230c      	movs	r3, #12
 8009206:	603b      	str	r3, [r7, #0]
 8009208:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800920c:	b01d      	add	sp, #116	@ 0x74
 800920e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009212:	2340      	movs	r3, #64	@ 0x40
 8009214:	616b      	str	r3, [r5, #20]
 8009216:	2300      	movs	r3, #0
 8009218:	9309      	str	r3, [sp, #36]	@ 0x24
 800921a:	2320      	movs	r3, #32
 800921c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009220:	f8cd 800c 	str.w	r8, [sp, #12]
 8009224:	2330      	movs	r3, #48	@ 0x30
 8009226:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80093c4 <_svfiprintf_r+0x1e4>
 800922a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800922e:	f04f 0901 	mov.w	r9, #1
 8009232:	4623      	mov	r3, r4
 8009234:	469a      	mov	sl, r3
 8009236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800923a:	b10a      	cbz	r2, 8009240 <_svfiprintf_r+0x60>
 800923c:	2a25      	cmp	r2, #37	@ 0x25
 800923e:	d1f9      	bne.n	8009234 <_svfiprintf_r+0x54>
 8009240:	ebba 0b04 	subs.w	fp, sl, r4
 8009244:	d00b      	beq.n	800925e <_svfiprintf_r+0x7e>
 8009246:	465b      	mov	r3, fp
 8009248:	4622      	mov	r2, r4
 800924a:	4629      	mov	r1, r5
 800924c:	4638      	mov	r0, r7
 800924e:	f7ff ff6b 	bl	8009128 <__ssputs_r>
 8009252:	3001      	adds	r0, #1
 8009254:	f000 80a7 	beq.w	80093a6 <_svfiprintf_r+0x1c6>
 8009258:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800925a:	445a      	add	r2, fp
 800925c:	9209      	str	r2, [sp, #36]	@ 0x24
 800925e:	f89a 3000 	ldrb.w	r3, [sl]
 8009262:	2b00      	cmp	r3, #0
 8009264:	f000 809f 	beq.w	80093a6 <_svfiprintf_r+0x1c6>
 8009268:	2300      	movs	r3, #0
 800926a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800926e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009272:	f10a 0a01 	add.w	sl, sl, #1
 8009276:	9304      	str	r3, [sp, #16]
 8009278:	9307      	str	r3, [sp, #28]
 800927a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800927e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009280:	4654      	mov	r4, sl
 8009282:	2205      	movs	r2, #5
 8009284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009288:	484e      	ldr	r0, [pc, #312]	@ (80093c4 <_svfiprintf_r+0x1e4>)
 800928a:	f7f6 ffc9 	bl	8000220 <memchr>
 800928e:	9a04      	ldr	r2, [sp, #16]
 8009290:	b9d8      	cbnz	r0, 80092ca <_svfiprintf_r+0xea>
 8009292:	06d0      	lsls	r0, r2, #27
 8009294:	bf44      	itt	mi
 8009296:	2320      	movmi	r3, #32
 8009298:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800929c:	0711      	lsls	r1, r2, #28
 800929e:	bf44      	itt	mi
 80092a0:	232b      	movmi	r3, #43	@ 0x2b
 80092a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092a6:	f89a 3000 	ldrb.w	r3, [sl]
 80092aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80092ac:	d015      	beq.n	80092da <_svfiprintf_r+0xfa>
 80092ae:	9a07      	ldr	r2, [sp, #28]
 80092b0:	4654      	mov	r4, sl
 80092b2:	2000      	movs	r0, #0
 80092b4:	f04f 0c0a 	mov.w	ip, #10
 80092b8:	4621      	mov	r1, r4
 80092ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092be:	3b30      	subs	r3, #48	@ 0x30
 80092c0:	2b09      	cmp	r3, #9
 80092c2:	d94b      	bls.n	800935c <_svfiprintf_r+0x17c>
 80092c4:	b1b0      	cbz	r0, 80092f4 <_svfiprintf_r+0x114>
 80092c6:	9207      	str	r2, [sp, #28]
 80092c8:	e014      	b.n	80092f4 <_svfiprintf_r+0x114>
 80092ca:	eba0 0308 	sub.w	r3, r0, r8
 80092ce:	fa09 f303 	lsl.w	r3, r9, r3
 80092d2:	4313      	orrs	r3, r2
 80092d4:	9304      	str	r3, [sp, #16]
 80092d6:	46a2      	mov	sl, r4
 80092d8:	e7d2      	b.n	8009280 <_svfiprintf_r+0xa0>
 80092da:	9b03      	ldr	r3, [sp, #12]
 80092dc:	1d19      	adds	r1, r3, #4
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	9103      	str	r1, [sp, #12]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	bfbb      	ittet	lt
 80092e6:	425b      	neglt	r3, r3
 80092e8:	f042 0202 	orrlt.w	r2, r2, #2
 80092ec:	9307      	strge	r3, [sp, #28]
 80092ee:	9307      	strlt	r3, [sp, #28]
 80092f0:	bfb8      	it	lt
 80092f2:	9204      	strlt	r2, [sp, #16]
 80092f4:	7823      	ldrb	r3, [r4, #0]
 80092f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80092f8:	d10a      	bne.n	8009310 <_svfiprintf_r+0x130>
 80092fa:	7863      	ldrb	r3, [r4, #1]
 80092fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80092fe:	d132      	bne.n	8009366 <_svfiprintf_r+0x186>
 8009300:	9b03      	ldr	r3, [sp, #12]
 8009302:	1d1a      	adds	r2, r3, #4
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	9203      	str	r2, [sp, #12]
 8009308:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800930c:	3402      	adds	r4, #2
 800930e:	9305      	str	r3, [sp, #20]
 8009310:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80093d4 <_svfiprintf_r+0x1f4>
 8009314:	7821      	ldrb	r1, [r4, #0]
 8009316:	2203      	movs	r2, #3
 8009318:	4650      	mov	r0, sl
 800931a:	f7f6 ff81 	bl	8000220 <memchr>
 800931e:	b138      	cbz	r0, 8009330 <_svfiprintf_r+0x150>
 8009320:	9b04      	ldr	r3, [sp, #16]
 8009322:	eba0 000a 	sub.w	r0, r0, sl
 8009326:	2240      	movs	r2, #64	@ 0x40
 8009328:	4082      	lsls	r2, r0
 800932a:	4313      	orrs	r3, r2
 800932c:	3401      	adds	r4, #1
 800932e:	9304      	str	r3, [sp, #16]
 8009330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009334:	4824      	ldr	r0, [pc, #144]	@ (80093c8 <_svfiprintf_r+0x1e8>)
 8009336:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800933a:	2206      	movs	r2, #6
 800933c:	f7f6 ff70 	bl	8000220 <memchr>
 8009340:	2800      	cmp	r0, #0
 8009342:	d036      	beq.n	80093b2 <_svfiprintf_r+0x1d2>
 8009344:	4b21      	ldr	r3, [pc, #132]	@ (80093cc <_svfiprintf_r+0x1ec>)
 8009346:	bb1b      	cbnz	r3, 8009390 <_svfiprintf_r+0x1b0>
 8009348:	9b03      	ldr	r3, [sp, #12]
 800934a:	3307      	adds	r3, #7
 800934c:	f023 0307 	bic.w	r3, r3, #7
 8009350:	3308      	adds	r3, #8
 8009352:	9303      	str	r3, [sp, #12]
 8009354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009356:	4433      	add	r3, r6
 8009358:	9309      	str	r3, [sp, #36]	@ 0x24
 800935a:	e76a      	b.n	8009232 <_svfiprintf_r+0x52>
 800935c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009360:	460c      	mov	r4, r1
 8009362:	2001      	movs	r0, #1
 8009364:	e7a8      	b.n	80092b8 <_svfiprintf_r+0xd8>
 8009366:	2300      	movs	r3, #0
 8009368:	3401      	adds	r4, #1
 800936a:	9305      	str	r3, [sp, #20]
 800936c:	4619      	mov	r1, r3
 800936e:	f04f 0c0a 	mov.w	ip, #10
 8009372:	4620      	mov	r0, r4
 8009374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009378:	3a30      	subs	r2, #48	@ 0x30
 800937a:	2a09      	cmp	r2, #9
 800937c:	d903      	bls.n	8009386 <_svfiprintf_r+0x1a6>
 800937e:	2b00      	cmp	r3, #0
 8009380:	d0c6      	beq.n	8009310 <_svfiprintf_r+0x130>
 8009382:	9105      	str	r1, [sp, #20]
 8009384:	e7c4      	b.n	8009310 <_svfiprintf_r+0x130>
 8009386:	fb0c 2101 	mla	r1, ip, r1, r2
 800938a:	4604      	mov	r4, r0
 800938c:	2301      	movs	r3, #1
 800938e:	e7f0      	b.n	8009372 <_svfiprintf_r+0x192>
 8009390:	ab03      	add	r3, sp, #12
 8009392:	9300      	str	r3, [sp, #0]
 8009394:	462a      	mov	r2, r5
 8009396:	4b0e      	ldr	r3, [pc, #56]	@ (80093d0 <_svfiprintf_r+0x1f0>)
 8009398:	a904      	add	r1, sp, #16
 800939a:	4638      	mov	r0, r7
 800939c:	f3af 8000 	nop.w
 80093a0:	1c42      	adds	r2, r0, #1
 80093a2:	4606      	mov	r6, r0
 80093a4:	d1d6      	bne.n	8009354 <_svfiprintf_r+0x174>
 80093a6:	89ab      	ldrh	r3, [r5, #12]
 80093a8:	065b      	lsls	r3, r3, #25
 80093aa:	f53f af2d 	bmi.w	8009208 <_svfiprintf_r+0x28>
 80093ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093b0:	e72c      	b.n	800920c <_svfiprintf_r+0x2c>
 80093b2:	ab03      	add	r3, sp, #12
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	462a      	mov	r2, r5
 80093b8:	4b05      	ldr	r3, [pc, #20]	@ (80093d0 <_svfiprintf_r+0x1f0>)
 80093ba:	a904      	add	r1, sp, #16
 80093bc:	4638      	mov	r0, r7
 80093be:	f000 f91b 	bl	80095f8 <_printf_i>
 80093c2:	e7ed      	b.n	80093a0 <_svfiprintf_r+0x1c0>
 80093c4:	0800a1ec 	.word	0x0800a1ec
 80093c8:	0800a1f6 	.word	0x0800a1f6
 80093cc:	00000000 	.word	0x00000000
 80093d0:	08009129 	.word	0x08009129
 80093d4:	0800a1f2 	.word	0x0800a1f2

080093d8 <sbrk_aligned>:
 80093d8:	b570      	push	{r4, r5, r6, lr}
 80093da:	4e0f      	ldr	r6, [pc, #60]	@ (8009418 <sbrk_aligned+0x40>)
 80093dc:	460c      	mov	r4, r1
 80093de:	6831      	ldr	r1, [r6, #0]
 80093e0:	4605      	mov	r5, r0
 80093e2:	b911      	cbnz	r1, 80093ea <sbrk_aligned+0x12>
 80093e4:	f000 fa7c 	bl	80098e0 <_sbrk_r>
 80093e8:	6030      	str	r0, [r6, #0]
 80093ea:	4621      	mov	r1, r4
 80093ec:	4628      	mov	r0, r5
 80093ee:	f000 fa77 	bl	80098e0 <_sbrk_r>
 80093f2:	1c43      	adds	r3, r0, #1
 80093f4:	d103      	bne.n	80093fe <sbrk_aligned+0x26>
 80093f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80093fa:	4620      	mov	r0, r4
 80093fc:	bd70      	pop	{r4, r5, r6, pc}
 80093fe:	1cc4      	adds	r4, r0, #3
 8009400:	f024 0403 	bic.w	r4, r4, #3
 8009404:	42a0      	cmp	r0, r4
 8009406:	d0f8      	beq.n	80093fa <sbrk_aligned+0x22>
 8009408:	1a21      	subs	r1, r4, r0
 800940a:	4628      	mov	r0, r5
 800940c:	f000 fa68 	bl	80098e0 <_sbrk_r>
 8009410:	3001      	adds	r0, #1
 8009412:	d1f2      	bne.n	80093fa <sbrk_aligned+0x22>
 8009414:	e7ef      	b.n	80093f6 <sbrk_aligned+0x1e>
 8009416:	bf00      	nop
 8009418:	200005c0 	.word	0x200005c0

0800941c <_malloc_r>:
 800941c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009420:	1ccd      	adds	r5, r1, #3
 8009422:	f025 0503 	bic.w	r5, r5, #3
 8009426:	3508      	adds	r5, #8
 8009428:	2d0c      	cmp	r5, #12
 800942a:	bf38      	it	cc
 800942c:	250c      	movcc	r5, #12
 800942e:	2d00      	cmp	r5, #0
 8009430:	4606      	mov	r6, r0
 8009432:	db01      	blt.n	8009438 <_malloc_r+0x1c>
 8009434:	42a9      	cmp	r1, r5
 8009436:	d904      	bls.n	8009442 <_malloc_r+0x26>
 8009438:	230c      	movs	r3, #12
 800943a:	6033      	str	r3, [r6, #0]
 800943c:	2000      	movs	r0, #0
 800943e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009442:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009518 <_malloc_r+0xfc>
 8009446:	f000 f9f7 	bl	8009838 <__malloc_lock>
 800944a:	f8d8 3000 	ldr.w	r3, [r8]
 800944e:	461c      	mov	r4, r3
 8009450:	bb44      	cbnz	r4, 80094a4 <_malloc_r+0x88>
 8009452:	4629      	mov	r1, r5
 8009454:	4630      	mov	r0, r6
 8009456:	f7ff ffbf 	bl	80093d8 <sbrk_aligned>
 800945a:	1c43      	adds	r3, r0, #1
 800945c:	4604      	mov	r4, r0
 800945e:	d158      	bne.n	8009512 <_malloc_r+0xf6>
 8009460:	f8d8 4000 	ldr.w	r4, [r8]
 8009464:	4627      	mov	r7, r4
 8009466:	2f00      	cmp	r7, #0
 8009468:	d143      	bne.n	80094f2 <_malloc_r+0xd6>
 800946a:	2c00      	cmp	r4, #0
 800946c:	d04b      	beq.n	8009506 <_malloc_r+0xea>
 800946e:	6823      	ldr	r3, [r4, #0]
 8009470:	4639      	mov	r1, r7
 8009472:	4630      	mov	r0, r6
 8009474:	eb04 0903 	add.w	r9, r4, r3
 8009478:	f000 fa32 	bl	80098e0 <_sbrk_r>
 800947c:	4581      	cmp	r9, r0
 800947e:	d142      	bne.n	8009506 <_malloc_r+0xea>
 8009480:	6821      	ldr	r1, [r4, #0]
 8009482:	1a6d      	subs	r5, r5, r1
 8009484:	4629      	mov	r1, r5
 8009486:	4630      	mov	r0, r6
 8009488:	f7ff ffa6 	bl	80093d8 <sbrk_aligned>
 800948c:	3001      	adds	r0, #1
 800948e:	d03a      	beq.n	8009506 <_malloc_r+0xea>
 8009490:	6823      	ldr	r3, [r4, #0]
 8009492:	442b      	add	r3, r5
 8009494:	6023      	str	r3, [r4, #0]
 8009496:	f8d8 3000 	ldr.w	r3, [r8]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	bb62      	cbnz	r2, 80094f8 <_malloc_r+0xdc>
 800949e:	f8c8 7000 	str.w	r7, [r8]
 80094a2:	e00f      	b.n	80094c4 <_malloc_r+0xa8>
 80094a4:	6822      	ldr	r2, [r4, #0]
 80094a6:	1b52      	subs	r2, r2, r5
 80094a8:	d420      	bmi.n	80094ec <_malloc_r+0xd0>
 80094aa:	2a0b      	cmp	r2, #11
 80094ac:	d917      	bls.n	80094de <_malloc_r+0xc2>
 80094ae:	1961      	adds	r1, r4, r5
 80094b0:	42a3      	cmp	r3, r4
 80094b2:	6025      	str	r5, [r4, #0]
 80094b4:	bf18      	it	ne
 80094b6:	6059      	strne	r1, [r3, #4]
 80094b8:	6863      	ldr	r3, [r4, #4]
 80094ba:	bf08      	it	eq
 80094bc:	f8c8 1000 	streq.w	r1, [r8]
 80094c0:	5162      	str	r2, [r4, r5]
 80094c2:	604b      	str	r3, [r1, #4]
 80094c4:	4630      	mov	r0, r6
 80094c6:	f000 f9bd 	bl	8009844 <__malloc_unlock>
 80094ca:	f104 000b 	add.w	r0, r4, #11
 80094ce:	1d23      	adds	r3, r4, #4
 80094d0:	f020 0007 	bic.w	r0, r0, #7
 80094d4:	1ac2      	subs	r2, r0, r3
 80094d6:	bf1c      	itt	ne
 80094d8:	1a1b      	subne	r3, r3, r0
 80094da:	50a3      	strne	r3, [r4, r2]
 80094dc:	e7af      	b.n	800943e <_malloc_r+0x22>
 80094de:	6862      	ldr	r2, [r4, #4]
 80094e0:	42a3      	cmp	r3, r4
 80094e2:	bf0c      	ite	eq
 80094e4:	f8c8 2000 	streq.w	r2, [r8]
 80094e8:	605a      	strne	r2, [r3, #4]
 80094ea:	e7eb      	b.n	80094c4 <_malloc_r+0xa8>
 80094ec:	4623      	mov	r3, r4
 80094ee:	6864      	ldr	r4, [r4, #4]
 80094f0:	e7ae      	b.n	8009450 <_malloc_r+0x34>
 80094f2:	463c      	mov	r4, r7
 80094f4:	687f      	ldr	r7, [r7, #4]
 80094f6:	e7b6      	b.n	8009466 <_malloc_r+0x4a>
 80094f8:	461a      	mov	r2, r3
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	42a3      	cmp	r3, r4
 80094fe:	d1fb      	bne.n	80094f8 <_malloc_r+0xdc>
 8009500:	2300      	movs	r3, #0
 8009502:	6053      	str	r3, [r2, #4]
 8009504:	e7de      	b.n	80094c4 <_malloc_r+0xa8>
 8009506:	230c      	movs	r3, #12
 8009508:	6033      	str	r3, [r6, #0]
 800950a:	4630      	mov	r0, r6
 800950c:	f000 f99a 	bl	8009844 <__malloc_unlock>
 8009510:	e794      	b.n	800943c <_malloc_r+0x20>
 8009512:	6005      	str	r5, [r0, #0]
 8009514:	e7d6      	b.n	80094c4 <_malloc_r+0xa8>
 8009516:	bf00      	nop
 8009518:	200005c4 	.word	0x200005c4

0800951c <_printf_common>:
 800951c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009520:	4616      	mov	r6, r2
 8009522:	4698      	mov	r8, r3
 8009524:	688a      	ldr	r2, [r1, #8]
 8009526:	690b      	ldr	r3, [r1, #16]
 8009528:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800952c:	4293      	cmp	r3, r2
 800952e:	bfb8      	it	lt
 8009530:	4613      	movlt	r3, r2
 8009532:	6033      	str	r3, [r6, #0]
 8009534:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009538:	4607      	mov	r7, r0
 800953a:	460c      	mov	r4, r1
 800953c:	b10a      	cbz	r2, 8009542 <_printf_common+0x26>
 800953e:	3301      	adds	r3, #1
 8009540:	6033      	str	r3, [r6, #0]
 8009542:	6823      	ldr	r3, [r4, #0]
 8009544:	0699      	lsls	r1, r3, #26
 8009546:	bf42      	ittt	mi
 8009548:	6833      	ldrmi	r3, [r6, #0]
 800954a:	3302      	addmi	r3, #2
 800954c:	6033      	strmi	r3, [r6, #0]
 800954e:	6825      	ldr	r5, [r4, #0]
 8009550:	f015 0506 	ands.w	r5, r5, #6
 8009554:	d106      	bne.n	8009564 <_printf_common+0x48>
 8009556:	f104 0a19 	add.w	sl, r4, #25
 800955a:	68e3      	ldr	r3, [r4, #12]
 800955c:	6832      	ldr	r2, [r6, #0]
 800955e:	1a9b      	subs	r3, r3, r2
 8009560:	42ab      	cmp	r3, r5
 8009562:	dc26      	bgt.n	80095b2 <_printf_common+0x96>
 8009564:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009568:	6822      	ldr	r2, [r4, #0]
 800956a:	3b00      	subs	r3, #0
 800956c:	bf18      	it	ne
 800956e:	2301      	movne	r3, #1
 8009570:	0692      	lsls	r2, r2, #26
 8009572:	d42b      	bmi.n	80095cc <_printf_common+0xb0>
 8009574:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009578:	4641      	mov	r1, r8
 800957a:	4638      	mov	r0, r7
 800957c:	47c8      	blx	r9
 800957e:	3001      	adds	r0, #1
 8009580:	d01e      	beq.n	80095c0 <_printf_common+0xa4>
 8009582:	6823      	ldr	r3, [r4, #0]
 8009584:	6922      	ldr	r2, [r4, #16]
 8009586:	f003 0306 	and.w	r3, r3, #6
 800958a:	2b04      	cmp	r3, #4
 800958c:	bf02      	ittt	eq
 800958e:	68e5      	ldreq	r5, [r4, #12]
 8009590:	6833      	ldreq	r3, [r6, #0]
 8009592:	1aed      	subeq	r5, r5, r3
 8009594:	68a3      	ldr	r3, [r4, #8]
 8009596:	bf0c      	ite	eq
 8009598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800959c:	2500      	movne	r5, #0
 800959e:	4293      	cmp	r3, r2
 80095a0:	bfc4      	itt	gt
 80095a2:	1a9b      	subgt	r3, r3, r2
 80095a4:	18ed      	addgt	r5, r5, r3
 80095a6:	2600      	movs	r6, #0
 80095a8:	341a      	adds	r4, #26
 80095aa:	42b5      	cmp	r5, r6
 80095ac:	d11a      	bne.n	80095e4 <_printf_common+0xc8>
 80095ae:	2000      	movs	r0, #0
 80095b0:	e008      	b.n	80095c4 <_printf_common+0xa8>
 80095b2:	2301      	movs	r3, #1
 80095b4:	4652      	mov	r2, sl
 80095b6:	4641      	mov	r1, r8
 80095b8:	4638      	mov	r0, r7
 80095ba:	47c8      	blx	r9
 80095bc:	3001      	adds	r0, #1
 80095be:	d103      	bne.n	80095c8 <_printf_common+0xac>
 80095c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80095c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095c8:	3501      	adds	r5, #1
 80095ca:	e7c6      	b.n	800955a <_printf_common+0x3e>
 80095cc:	18e1      	adds	r1, r4, r3
 80095ce:	1c5a      	adds	r2, r3, #1
 80095d0:	2030      	movs	r0, #48	@ 0x30
 80095d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80095d6:	4422      	add	r2, r4
 80095d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80095dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80095e0:	3302      	adds	r3, #2
 80095e2:	e7c7      	b.n	8009574 <_printf_common+0x58>
 80095e4:	2301      	movs	r3, #1
 80095e6:	4622      	mov	r2, r4
 80095e8:	4641      	mov	r1, r8
 80095ea:	4638      	mov	r0, r7
 80095ec:	47c8      	blx	r9
 80095ee:	3001      	adds	r0, #1
 80095f0:	d0e6      	beq.n	80095c0 <_printf_common+0xa4>
 80095f2:	3601      	adds	r6, #1
 80095f4:	e7d9      	b.n	80095aa <_printf_common+0x8e>
	...

080095f8 <_printf_i>:
 80095f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095fc:	7e0f      	ldrb	r7, [r1, #24]
 80095fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009600:	2f78      	cmp	r7, #120	@ 0x78
 8009602:	4691      	mov	r9, r2
 8009604:	4680      	mov	r8, r0
 8009606:	460c      	mov	r4, r1
 8009608:	469a      	mov	sl, r3
 800960a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800960e:	d807      	bhi.n	8009620 <_printf_i+0x28>
 8009610:	2f62      	cmp	r7, #98	@ 0x62
 8009612:	d80a      	bhi.n	800962a <_printf_i+0x32>
 8009614:	2f00      	cmp	r7, #0
 8009616:	f000 80d2 	beq.w	80097be <_printf_i+0x1c6>
 800961a:	2f58      	cmp	r7, #88	@ 0x58
 800961c:	f000 80b9 	beq.w	8009792 <_printf_i+0x19a>
 8009620:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009624:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009628:	e03a      	b.n	80096a0 <_printf_i+0xa8>
 800962a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800962e:	2b15      	cmp	r3, #21
 8009630:	d8f6      	bhi.n	8009620 <_printf_i+0x28>
 8009632:	a101      	add	r1, pc, #4	@ (adr r1, 8009638 <_printf_i+0x40>)
 8009634:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009638:	08009691 	.word	0x08009691
 800963c:	080096a5 	.word	0x080096a5
 8009640:	08009621 	.word	0x08009621
 8009644:	08009621 	.word	0x08009621
 8009648:	08009621 	.word	0x08009621
 800964c:	08009621 	.word	0x08009621
 8009650:	080096a5 	.word	0x080096a5
 8009654:	08009621 	.word	0x08009621
 8009658:	08009621 	.word	0x08009621
 800965c:	08009621 	.word	0x08009621
 8009660:	08009621 	.word	0x08009621
 8009664:	080097a5 	.word	0x080097a5
 8009668:	080096cf 	.word	0x080096cf
 800966c:	0800975f 	.word	0x0800975f
 8009670:	08009621 	.word	0x08009621
 8009674:	08009621 	.word	0x08009621
 8009678:	080097c7 	.word	0x080097c7
 800967c:	08009621 	.word	0x08009621
 8009680:	080096cf 	.word	0x080096cf
 8009684:	08009621 	.word	0x08009621
 8009688:	08009621 	.word	0x08009621
 800968c:	08009767 	.word	0x08009767
 8009690:	6833      	ldr	r3, [r6, #0]
 8009692:	1d1a      	adds	r2, r3, #4
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	6032      	str	r2, [r6, #0]
 8009698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800969c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80096a0:	2301      	movs	r3, #1
 80096a2:	e09d      	b.n	80097e0 <_printf_i+0x1e8>
 80096a4:	6833      	ldr	r3, [r6, #0]
 80096a6:	6820      	ldr	r0, [r4, #0]
 80096a8:	1d19      	adds	r1, r3, #4
 80096aa:	6031      	str	r1, [r6, #0]
 80096ac:	0606      	lsls	r6, r0, #24
 80096ae:	d501      	bpl.n	80096b4 <_printf_i+0xbc>
 80096b0:	681d      	ldr	r5, [r3, #0]
 80096b2:	e003      	b.n	80096bc <_printf_i+0xc4>
 80096b4:	0645      	lsls	r5, r0, #25
 80096b6:	d5fb      	bpl.n	80096b0 <_printf_i+0xb8>
 80096b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80096bc:	2d00      	cmp	r5, #0
 80096be:	da03      	bge.n	80096c8 <_printf_i+0xd0>
 80096c0:	232d      	movs	r3, #45	@ 0x2d
 80096c2:	426d      	negs	r5, r5
 80096c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096c8:	4859      	ldr	r0, [pc, #356]	@ (8009830 <_printf_i+0x238>)
 80096ca:	230a      	movs	r3, #10
 80096cc:	e011      	b.n	80096f2 <_printf_i+0xfa>
 80096ce:	6821      	ldr	r1, [r4, #0]
 80096d0:	6833      	ldr	r3, [r6, #0]
 80096d2:	0608      	lsls	r0, r1, #24
 80096d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80096d8:	d402      	bmi.n	80096e0 <_printf_i+0xe8>
 80096da:	0649      	lsls	r1, r1, #25
 80096dc:	bf48      	it	mi
 80096de:	b2ad      	uxthmi	r5, r5
 80096e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80096e2:	4853      	ldr	r0, [pc, #332]	@ (8009830 <_printf_i+0x238>)
 80096e4:	6033      	str	r3, [r6, #0]
 80096e6:	bf14      	ite	ne
 80096e8:	230a      	movne	r3, #10
 80096ea:	2308      	moveq	r3, #8
 80096ec:	2100      	movs	r1, #0
 80096ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80096f2:	6866      	ldr	r6, [r4, #4]
 80096f4:	60a6      	str	r6, [r4, #8]
 80096f6:	2e00      	cmp	r6, #0
 80096f8:	bfa2      	ittt	ge
 80096fa:	6821      	ldrge	r1, [r4, #0]
 80096fc:	f021 0104 	bicge.w	r1, r1, #4
 8009700:	6021      	strge	r1, [r4, #0]
 8009702:	b90d      	cbnz	r5, 8009708 <_printf_i+0x110>
 8009704:	2e00      	cmp	r6, #0
 8009706:	d04b      	beq.n	80097a0 <_printf_i+0x1a8>
 8009708:	4616      	mov	r6, r2
 800970a:	fbb5 f1f3 	udiv	r1, r5, r3
 800970e:	fb03 5711 	mls	r7, r3, r1, r5
 8009712:	5dc7      	ldrb	r7, [r0, r7]
 8009714:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009718:	462f      	mov	r7, r5
 800971a:	42bb      	cmp	r3, r7
 800971c:	460d      	mov	r5, r1
 800971e:	d9f4      	bls.n	800970a <_printf_i+0x112>
 8009720:	2b08      	cmp	r3, #8
 8009722:	d10b      	bne.n	800973c <_printf_i+0x144>
 8009724:	6823      	ldr	r3, [r4, #0]
 8009726:	07df      	lsls	r7, r3, #31
 8009728:	d508      	bpl.n	800973c <_printf_i+0x144>
 800972a:	6923      	ldr	r3, [r4, #16]
 800972c:	6861      	ldr	r1, [r4, #4]
 800972e:	4299      	cmp	r1, r3
 8009730:	bfde      	ittt	le
 8009732:	2330      	movle	r3, #48	@ 0x30
 8009734:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009738:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800973c:	1b92      	subs	r2, r2, r6
 800973e:	6122      	str	r2, [r4, #16]
 8009740:	f8cd a000 	str.w	sl, [sp]
 8009744:	464b      	mov	r3, r9
 8009746:	aa03      	add	r2, sp, #12
 8009748:	4621      	mov	r1, r4
 800974a:	4640      	mov	r0, r8
 800974c:	f7ff fee6 	bl	800951c <_printf_common>
 8009750:	3001      	adds	r0, #1
 8009752:	d14a      	bne.n	80097ea <_printf_i+0x1f2>
 8009754:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009758:	b004      	add	sp, #16
 800975a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800975e:	6823      	ldr	r3, [r4, #0]
 8009760:	f043 0320 	orr.w	r3, r3, #32
 8009764:	6023      	str	r3, [r4, #0]
 8009766:	4833      	ldr	r0, [pc, #204]	@ (8009834 <_printf_i+0x23c>)
 8009768:	2778      	movs	r7, #120	@ 0x78
 800976a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800976e:	6823      	ldr	r3, [r4, #0]
 8009770:	6831      	ldr	r1, [r6, #0]
 8009772:	061f      	lsls	r7, r3, #24
 8009774:	f851 5b04 	ldr.w	r5, [r1], #4
 8009778:	d402      	bmi.n	8009780 <_printf_i+0x188>
 800977a:	065f      	lsls	r7, r3, #25
 800977c:	bf48      	it	mi
 800977e:	b2ad      	uxthmi	r5, r5
 8009780:	6031      	str	r1, [r6, #0]
 8009782:	07d9      	lsls	r1, r3, #31
 8009784:	bf44      	itt	mi
 8009786:	f043 0320 	orrmi.w	r3, r3, #32
 800978a:	6023      	strmi	r3, [r4, #0]
 800978c:	b11d      	cbz	r5, 8009796 <_printf_i+0x19e>
 800978e:	2310      	movs	r3, #16
 8009790:	e7ac      	b.n	80096ec <_printf_i+0xf4>
 8009792:	4827      	ldr	r0, [pc, #156]	@ (8009830 <_printf_i+0x238>)
 8009794:	e7e9      	b.n	800976a <_printf_i+0x172>
 8009796:	6823      	ldr	r3, [r4, #0]
 8009798:	f023 0320 	bic.w	r3, r3, #32
 800979c:	6023      	str	r3, [r4, #0]
 800979e:	e7f6      	b.n	800978e <_printf_i+0x196>
 80097a0:	4616      	mov	r6, r2
 80097a2:	e7bd      	b.n	8009720 <_printf_i+0x128>
 80097a4:	6833      	ldr	r3, [r6, #0]
 80097a6:	6825      	ldr	r5, [r4, #0]
 80097a8:	6961      	ldr	r1, [r4, #20]
 80097aa:	1d18      	adds	r0, r3, #4
 80097ac:	6030      	str	r0, [r6, #0]
 80097ae:	062e      	lsls	r6, r5, #24
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	d501      	bpl.n	80097b8 <_printf_i+0x1c0>
 80097b4:	6019      	str	r1, [r3, #0]
 80097b6:	e002      	b.n	80097be <_printf_i+0x1c6>
 80097b8:	0668      	lsls	r0, r5, #25
 80097ba:	d5fb      	bpl.n	80097b4 <_printf_i+0x1bc>
 80097bc:	8019      	strh	r1, [r3, #0]
 80097be:	2300      	movs	r3, #0
 80097c0:	6123      	str	r3, [r4, #16]
 80097c2:	4616      	mov	r6, r2
 80097c4:	e7bc      	b.n	8009740 <_printf_i+0x148>
 80097c6:	6833      	ldr	r3, [r6, #0]
 80097c8:	1d1a      	adds	r2, r3, #4
 80097ca:	6032      	str	r2, [r6, #0]
 80097cc:	681e      	ldr	r6, [r3, #0]
 80097ce:	6862      	ldr	r2, [r4, #4]
 80097d0:	2100      	movs	r1, #0
 80097d2:	4630      	mov	r0, r6
 80097d4:	f7f6 fd24 	bl	8000220 <memchr>
 80097d8:	b108      	cbz	r0, 80097de <_printf_i+0x1e6>
 80097da:	1b80      	subs	r0, r0, r6
 80097dc:	6060      	str	r0, [r4, #4]
 80097de:	6863      	ldr	r3, [r4, #4]
 80097e0:	6123      	str	r3, [r4, #16]
 80097e2:	2300      	movs	r3, #0
 80097e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097e8:	e7aa      	b.n	8009740 <_printf_i+0x148>
 80097ea:	6923      	ldr	r3, [r4, #16]
 80097ec:	4632      	mov	r2, r6
 80097ee:	4649      	mov	r1, r9
 80097f0:	4640      	mov	r0, r8
 80097f2:	47d0      	blx	sl
 80097f4:	3001      	adds	r0, #1
 80097f6:	d0ad      	beq.n	8009754 <_printf_i+0x15c>
 80097f8:	6823      	ldr	r3, [r4, #0]
 80097fa:	079b      	lsls	r3, r3, #30
 80097fc:	d413      	bmi.n	8009826 <_printf_i+0x22e>
 80097fe:	68e0      	ldr	r0, [r4, #12]
 8009800:	9b03      	ldr	r3, [sp, #12]
 8009802:	4298      	cmp	r0, r3
 8009804:	bfb8      	it	lt
 8009806:	4618      	movlt	r0, r3
 8009808:	e7a6      	b.n	8009758 <_printf_i+0x160>
 800980a:	2301      	movs	r3, #1
 800980c:	4632      	mov	r2, r6
 800980e:	4649      	mov	r1, r9
 8009810:	4640      	mov	r0, r8
 8009812:	47d0      	blx	sl
 8009814:	3001      	adds	r0, #1
 8009816:	d09d      	beq.n	8009754 <_printf_i+0x15c>
 8009818:	3501      	adds	r5, #1
 800981a:	68e3      	ldr	r3, [r4, #12]
 800981c:	9903      	ldr	r1, [sp, #12]
 800981e:	1a5b      	subs	r3, r3, r1
 8009820:	42ab      	cmp	r3, r5
 8009822:	dcf2      	bgt.n	800980a <_printf_i+0x212>
 8009824:	e7eb      	b.n	80097fe <_printf_i+0x206>
 8009826:	2500      	movs	r5, #0
 8009828:	f104 0619 	add.w	r6, r4, #25
 800982c:	e7f5      	b.n	800981a <_printf_i+0x222>
 800982e:	bf00      	nop
 8009830:	0800a1fd 	.word	0x0800a1fd
 8009834:	0800a20e 	.word	0x0800a20e

08009838 <__malloc_lock>:
 8009838:	4801      	ldr	r0, [pc, #4]	@ (8009840 <__malloc_lock+0x8>)
 800983a:	f7ff bc73 	b.w	8009124 <__retarget_lock_acquire_recursive>
 800983e:	bf00      	nop
 8009840:	200005bc 	.word	0x200005bc

08009844 <__malloc_unlock>:
 8009844:	4801      	ldr	r0, [pc, #4]	@ (800984c <__malloc_unlock+0x8>)
 8009846:	f7ff bc6e 	b.w	8009126 <__retarget_lock_release_recursive>
 800984a:	bf00      	nop
 800984c:	200005bc 	.word	0x200005bc

08009850 <_realloc_r>:
 8009850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009854:	4680      	mov	r8, r0
 8009856:	4615      	mov	r5, r2
 8009858:	460c      	mov	r4, r1
 800985a:	b921      	cbnz	r1, 8009866 <_realloc_r+0x16>
 800985c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009860:	4611      	mov	r1, r2
 8009862:	f7ff bddb 	b.w	800941c <_malloc_r>
 8009866:	b92a      	cbnz	r2, 8009874 <_realloc_r+0x24>
 8009868:	f000 f858 	bl	800991c <_free_r>
 800986c:	2400      	movs	r4, #0
 800986e:	4620      	mov	r0, r4
 8009870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009874:	f000 f89c 	bl	80099b0 <_malloc_usable_size_r>
 8009878:	4285      	cmp	r5, r0
 800987a:	4606      	mov	r6, r0
 800987c:	d802      	bhi.n	8009884 <_realloc_r+0x34>
 800987e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009882:	d8f4      	bhi.n	800986e <_realloc_r+0x1e>
 8009884:	4629      	mov	r1, r5
 8009886:	4640      	mov	r0, r8
 8009888:	f7ff fdc8 	bl	800941c <_malloc_r>
 800988c:	4607      	mov	r7, r0
 800988e:	2800      	cmp	r0, #0
 8009890:	d0ec      	beq.n	800986c <_realloc_r+0x1c>
 8009892:	42b5      	cmp	r5, r6
 8009894:	462a      	mov	r2, r5
 8009896:	4621      	mov	r1, r4
 8009898:	bf28      	it	cs
 800989a:	4632      	movcs	r2, r6
 800989c:	f000 f830 	bl	8009900 <memcpy>
 80098a0:	4621      	mov	r1, r4
 80098a2:	4640      	mov	r0, r8
 80098a4:	f000 f83a 	bl	800991c <_free_r>
 80098a8:	463c      	mov	r4, r7
 80098aa:	e7e0      	b.n	800986e <_realloc_r+0x1e>

080098ac <memmove>:
 80098ac:	4288      	cmp	r0, r1
 80098ae:	b510      	push	{r4, lr}
 80098b0:	eb01 0402 	add.w	r4, r1, r2
 80098b4:	d902      	bls.n	80098bc <memmove+0x10>
 80098b6:	4284      	cmp	r4, r0
 80098b8:	4623      	mov	r3, r4
 80098ba:	d807      	bhi.n	80098cc <memmove+0x20>
 80098bc:	1e43      	subs	r3, r0, #1
 80098be:	42a1      	cmp	r1, r4
 80098c0:	d008      	beq.n	80098d4 <memmove+0x28>
 80098c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098ca:	e7f8      	b.n	80098be <memmove+0x12>
 80098cc:	4402      	add	r2, r0
 80098ce:	4601      	mov	r1, r0
 80098d0:	428a      	cmp	r2, r1
 80098d2:	d100      	bne.n	80098d6 <memmove+0x2a>
 80098d4:	bd10      	pop	{r4, pc}
 80098d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098de:	e7f7      	b.n	80098d0 <memmove+0x24>

080098e0 <_sbrk_r>:
 80098e0:	b538      	push	{r3, r4, r5, lr}
 80098e2:	4d06      	ldr	r5, [pc, #24]	@ (80098fc <_sbrk_r+0x1c>)
 80098e4:	2300      	movs	r3, #0
 80098e6:	4604      	mov	r4, r0
 80098e8:	4608      	mov	r0, r1
 80098ea:	602b      	str	r3, [r5, #0]
 80098ec:	f7f7 fe2e 	bl	800154c <_sbrk>
 80098f0:	1c43      	adds	r3, r0, #1
 80098f2:	d102      	bne.n	80098fa <_sbrk_r+0x1a>
 80098f4:	682b      	ldr	r3, [r5, #0]
 80098f6:	b103      	cbz	r3, 80098fa <_sbrk_r+0x1a>
 80098f8:	6023      	str	r3, [r4, #0]
 80098fa:	bd38      	pop	{r3, r4, r5, pc}
 80098fc:	200005c8 	.word	0x200005c8

08009900 <memcpy>:
 8009900:	440a      	add	r2, r1
 8009902:	4291      	cmp	r1, r2
 8009904:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009908:	d100      	bne.n	800990c <memcpy+0xc>
 800990a:	4770      	bx	lr
 800990c:	b510      	push	{r4, lr}
 800990e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009912:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009916:	4291      	cmp	r1, r2
 8009918:	d1f9      	bne.n	800990e <memcpy+0xe>
 800991a:	bd10      	pop	{r4, pc}

0800991c <_free_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4605      	mov	r5, r0
 8009920:	2900      	cmp	r1, #0
 8009922:	d041      	beq.n	80099a8 <_free_r+0x8c>
 8009924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009928:	1f0c      	subs	r4, r1, #4
 800992a:	2b00      	cmp	r3, #0
 800992c:	bfb8      	it	lt
 800992e:	18e4      	addlt	r4, r4, r3
 8009930:	f7ff ff82 	bl	8009838 <__malloc_lock>
 8009934:	4a1d      	ldr	r2, [pc, #116]	@ (80099ac <_free_r+0x90>)
 8009936:	6813      	ldr	r3, [r2, #0]
 8009938:	b933      	cbnz	r3, 8009948 <_free_r+0x2c>
 800993a:	6063      	str	r3, [r4, #4]
 800993c:	6014      	str	r4, [r2, #0]
 800993e:	4628      	mov	r0, r5
 8009940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009944:	f7ff bf7e 	b.w	8009844 <__malloc_unlock>
 8009948:	42a3      	cmp	r3, r4
 800994a:	d908      	bls.n	800995e <_free_r+0x42>
 800994c:	6820      	ldr	r0, [r4, #0]
 800994e:	1821      	adds	r1, r4, r0
 8009950:	428b      	cmp	r3, r1
 8009952:	bf01      	itttt	eq
 8009954:	6819      	ldreq	r1, [r3, #0]
 8009956:	685b      	ldreq	r3, [r3, #4]
 8009958:	1809      	addeq	r1, r1, r0
 800995a:	6021      	streq	r1, [r4, #0]
 800995c:	e7ed      	b.n	800993a <_free_r+0x1e>
 800995e:	461a      	mov	r2, r3
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	b10b      	cbz	r3, 8009968 <_free_r+0x4c>
 8009964:	42a3      	cmp	r3, r4
 8009966:	d9fa      	bls.n	800995e <_free_r+0x42>
 8009968:	6811      	ldr	r1, [r2, #0]
 800996a:	1850      	adds	r0, r2, r1
 800996c:	42a0      	cmp	r0, r4
 800996e:	d10b      	bne.n	8009988 <_free_r+0x6c>
 8009970:	6820      	ldr	r0, [r4, #0]
 8009972:	4401      	add	r1, r0
 8009974:	1850      	adds	r0, r2, r1
 8009976:	4283      	cmp	r3, r0
 8009978:	6011      	str	r1, [r2, #0]
 800997a:	d1e0      	bne.n	800993e <_free_r+0x22>
 800997c:	6818      	ldr	r0, [r3, #0]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	6053      	str	r3, [r2, #4]
 8009982:	4408      	add	r0, r1
 8009984:	6010      	str	r0, [r2, #0]
 8009986:	e7da      	b.n	800993e <_free_r+0x22>
 8009988:	d902      	bls.n	8009990 <_free_r+0x74>
 800998a:	230c      	movs	r3, #12
 800998c:	602b      	str	r3, [r5, #0]
 800998e:	e7d6      	b.n	800993e <_free_r+0x22>
 8009990:	6820      	ldr	r0, [r4, #0]
 8009992:	1821      	adds	r1, r4, r0
 8009994:	428b      	cmp	r3, r1
 8009996:	bf04      	itt	eq
 8009998:	6819      	ldreq	r1, [r3, #0]
 800999a:	685b      	ldreq	r3, [r3, #4]
 800999c:	6063      	str	r3, [r4, #4]
 800999e:	bf04      	itt	eq
 80099a0:	1809      	addeq	r1, r1, r0
 80099a2:	6021      	streq	r1, [r4, #0]
 80099a4:	6054      	str	r4, [r2, #4]
 80099a6:	e7ca      	b.n	800993e <_free_r+0x22>
 80099a8:	bd38      	pop	{r3, r4, r5, pc}
 80099aa:	bf00      	nop
 80099ac:	200005c4 	.word	0x200005c4

080099b0 <_malloc_usable_size_r>:
 80099b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099b4:	1f18      	subs	r0, r3, #4
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	bfbc      	itt	lt
 80099ba:	580b      	ldrlt	r3, [r1, r0]
 80099bc:	18c0      	addlt	r0, r0, r3
 80099be:	4770      	bx	lr

080099c0 <_init>:
 80099c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c2:	bf00      	nop
 80099c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099c6:	bc08      	pop	{r3}
 80099c8:	469e      	mov	lr, r3
 80099ca:	4770      	bx	lr

080099cc <_fini>:
 80099cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ce:	bf00      	nop
 80099d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099d2:	bc08      	pop	{r3}
 80099d4:	469e      	mov	lr, r3
 80099d6:	4770      	bx	lr
